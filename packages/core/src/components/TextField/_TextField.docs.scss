/*
Text field

@uswds https://standards.usa.gov/components/form-controls/#text-input

Text fields allow users to enter any combination of letters, numbers, or symbols of their choosing (unless otherwise restricted). Text fields can span single or multiple lines.

Markup: textfield.example.html

Style guide: components.text-field
*/

/*
Inverse theme

Markup: textfield-inverse.example.html

Style guide: components.text-field.inverse
*/

/*
`<TextField>`

@react-component TextField

Style guide: components.text-field.react
*/

/*
---

### When to use

- If you can’t reasonably predict a user’s answer to a prompt and there might be wide variability in users’ answers.
- When using another type of input will make answering more difficult. For example, birthdays and other known dates are easier to type in than they are to select from a calendar picker.
- When users want to paste in a response.

### When to consider alternatives

- When users are choosing from a specific set of options. Consider [checkboxes, radio buttons](/components/choice), or a [select menu](/components/select) in these cases.

### Usage

- Don't use placeholder text in form fields. Use hint text instead, if you need to provide contextual information. Placeholder text disappears after a user types a value, therefore users will no longer have that text available when they need to review their entries. People who have cognitive or visual disabilities have additional problems with placeholder text.
- The length of the text field provides a hint to users as to how much text to write. Do not require users to write paragraphs of text into a single-line `input` box; use a `textarea` instead.
- Text fields are among the easiest type of input for desktop users but are more difficult for mobile users.
- Only show error messages or styling after a user has interacted with a particular field.

**[View the "Forms" guidelines for additional guidance and best practices.](/guidelines/forms/)**

### Accessibility

- Group each set of thematically related controls in a `fieldset` element. Use the `legend` element to offer a label within each `fieldset`. The `fieldset` and `legend` elements make it easier for screen reader users to navigate the form.
- Keep your form blocks in a vertical pattern. This approach is ideal, from an accessibility standpoint, because of limited vision that makes it hard to scan from left to right.

### Customization

The following Sass variables can be overridden to theme a field:

- `$color-focus`
- `$color-focus-inverse`
- `$focus-shadow`
- `$focus-shadow-inverse`
- `$input-border-color`
- `$input-border-color-inverse`
- `$input-border-radius`
- `$input-line-height`
- `$input-border-width`
- `$input-padding`

### Related patterns

- [Masked field](/components/masked-field/)
- [Date field](/components/date-field/)

### Learn more

- [Form Guidelines](/guidelines/forms/)
- ["Placeholders in Form Fields Are Harmful"](https://www.nngroup.com/articles/form-design-placeholders/)
- [Asking for a date of birth](https://designnotes.blog.gov.uk/2013/12/05/asking-for-a-date-of-birth/)
- [GOV.UK text boxes discussion](https://paper.dropbox.com/doc/Text-boxes-8NLlgz9tjR8OzTz2N9wE3)
- [Four steps for choosing form elements on the Web (PDF)](http://www.formsthatwork.com/files/Articles/dropdown.pdf)

Style guide: components.text-field.guidance
*/
