// Form-specific variables can be found in _variables.forms
@import '../../settings/index';

/*
Text field

@status prototype

@uswds https://standards.usa.gov/components/form-controls/#text-input

A text field can be an `input` or `textarea` HTML element.

Markup:
<label class="ds-c-label ds-u-margin-top--0" for="input-firstname">
  First name
  <span class="ds-c-field__hint">Helpful hint text</span>
</label>
<input class="ds-c-field" id="input-firstname" name="firstname" type="text">
<label class="ds-c-label" for="input-lastname">
  <span class="ds-u-font-weight--bold">Last name</span>
  <span class="ds-c-field__hint ds-u-color--error" role="alert">
    Please enter your last name
  </span>
  <span class="ds-c-field__hint">Helpful hint text</span>
</label>
<input class="ds-c-field ds-c-field--error" id="input-lastname" name="lastname" type="text" />
<label class="ds-c-label" for="input-username">Username</label>
<input class="ds-c-field ds-c-field--success" id="input-username" name="username" type="text">
<label class="ds-c-label" for="input-bio">Bio</label>
<textarea class="ds-c-field" id="input-bio" name="bio" rows="5"></textarea>

Style guide: components.text-field
*/

// input, textarea, select
.ds-c-field {
  appearance: none;
  border: $input-border-width solid $input-border-color;
  border-radius: $input-border-radius;
  box-sizing: border-box; // ensure padding doesn't affect width
  color: $color-base;
  display: block;
  font-size: $base-font-size;
  line-height: $input-line-height;
  margin: $spacer-half 0;
  max-width: $input-max-width;
  outline: none;
  padding: $input-padding;
  width: 100%;

  &:disabled {
    background-color: $color-gray-lighter;
    border-width: 0;
  }

  &:focus {
    box-shadow: $focus-shadow;
  }
}

/*
Inverse theme

Markup:
<div class="ds-base--inverse ds-u-padding--2">
  <label class="ds-c-label ds-u-margin-top--0" for="input-firstname-2">
    First name
    <span class="ds-c-field__hint ds-c-field__hint--inverse">Helpful hint text</span>
  </label>
  <input class="ds-c-field ds-c-field--inverse" id="input-firstname-2" name="firstname" type="text">
  <label class="ds-c-label" for="input-lastname-2">
    <span class="ds-u-font-weight--bold">Last name</span>
    <span class="ds-c-field__hint ds-u-color--error-light" role="alert">
      Please enter your last name
    </span>
    <span class="ds-c-field__hint ds-c-field__hint--inverse">Helpful hint text</span>
  </label>
  <input class="ds-c-field ds-c-field--inverse ds-c-field--error" id="input-lastname-2" name="lastname" type="text">
  <label class="ds-c-label" for="input-username-2">Username</label>
  <input class="ds-c-field ds-c-field--inverse ds-c-field--success" id="input-username-2" name="username" type="text">
  <label class="ds-c-label" for="input-bio-2">Bio</label>
  <textarea class="ds-c-field ds-c-field--inverse" id="input-bio-2" name="bio" rows="5"></textarea>
</div>

Style guide: components.text-field.inverse
*/

.ds-c-field--inverse {
  border-color: $input-border-color-inverse;

  &:focus {
    box-shadow: $focus-shadow-inverse;
  }
}

// State modifiers and message
.ds-c-field--error {
  border: 3px solid $color-error;
}

.ds-c-field--success {
  border: 3px solid $color-success-light;
}

/*
React - `<TextField>`

@react-component TextField

Style guide: components.text-field.react
*/

/*
---

## Accessibility

- Display form controls in the same order in HTML as they appear on screen. Do not use CSS to rearrange the form controls. Screen readers narrate forms in the order they appear in the HTML.
- Visually align validation messages with the input fields, so people using screen magnifiers can read them quickly.
- Group each set of thematically related controls in a fieldset element. Use the legend element to offer a label within each one. The fieldset and legend elements make it easier for screen reader users to navigate the form.
- Use a single legend for fieldset (this is required). One example of a common use of fieldset and legend is a question with radio button options for answers. The question text and radio buttons are wrapped in a fieldset, with the question itself being inside the legend tag.
- Embed multiple fieldsets and legends for more complex forms.x
- Keep your form blocks in a vertical pattern. This approach is ideal, from an accessibility standpoint, because of limited vision that makes it hard to scan from right to left.

## Usability

### Guidance

- The length of the text input provides a hint to users as to how much text to write. Do not require users to write paragraphs of text into a single-line `input` box; use a `textarea` instead.
- Text inputs are among the easiest type of input for desktop users but are more difficult for mobile users.
- Only show error messages or stylings after a user has interacted with a particular field.
- Avoid using placeholder text that appears within a text field before a user starts typing. If placeholder text is no longer visible after a user clicks into the field, users will no longer have that text available when they need to review their entries. (People who have cognitive or visual disabilities have additional problems with placeholder text.)

## Theming

The following Sass variables can be overridden to theme a field: `$color-focus`, `$color-focus-inverse`, `$focus-shadow`, `$focus-shadow-inverse`, `$input-border-color`, `$input-border-color-inverse`, `$input-border-radius`, `$input-line-height`, `$input-border-width`, `$input-padding`

## Further reading

- ["Placeholders in Form Fields Are Harmful"](https://www.nngroup.com/articles/form-design-placeholders/)

Style guide: components.text-field.guidance
*/
