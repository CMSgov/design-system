// Form-specific variables can be found in _variables.forms
@import '@cmsgov/design-system-support/src/settings/index';

/*
Autocomplete field

@uswds https://standards.usa.gov/components/form-controls/#text-input

Text fields allow users to enter any combination of letters, numbers, or symbols of their choosing (unless otherwise restricted). Text fields can span single or multiple lines.

Markup:
<label class="ds-c-label ds-u-margin-top--0" for="input-firstname">First name</label>
<input class="ds-c-field" id="input-firstname" name="firstname" type="text">
<label class="ds-c-label" for="input-lastname">
  <span class="ds-u-font-weight--bold">Last name</span>
  <span class="ds-c-field__hint ds-u-color--error" role="alert">
    Please enter your last name
  </span>
  <span class="ds-c-field__hint">Helpful hint text</span>
</label>
<input class="ds-c-field ds-c-field--error" id="input-lastname" name="lastname" type="text" />
<label class="ds-c-label" for="input-username">
  Username
  <span class="ds-c-field__hint">Example of a success field state</span>
</label>
<input class="ds-c-field ds-c-field--success" id="input-username" name="username" type="text" value="johnsnow">
<label class="ds-c-label" for="input-bio">Bio</label>
<textarea class="ds-c-field" id="input-bio" name="bio" rows="5"></textarea>
<label class="ds-c-label" for="input-id-num">
  ID Number
  <span class="ds-c-field__hint">
    Example of a disabled field
  </span>
</label>
<input class="ds-c-field ds-c-field--inverse" id="input-id-num" name="id-num" type="text" value="1234" disabled>

Style guide: components.autocomplete-field
*/

// input
.ds-c-autocomplete {
  max-width: 460px;

  &__label {
    + .ds-c-field__hint {
      border: 0;
      clip: rect(0, 0, 0, 0);
      height: 1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
      word-wrap: normal;
    }
  }

  &__list {
    width: 100%;
  }

  &__list-item--active {
    background-color: $color-primary-alt-darkest;
    color: $color-white; 
  }
}

/*
`<Autocompletefield>`

@react-component AutocompleteField

Style guide: components.autocomplete-field.react
*/

/*
---

## When to use

- If you can’t reasonably predict a user’s answer to a prompt and there might be wide variability in users’ answers.
- When using another type of input will make answering more difficult. For example, birthdays and other known dates are easier to type in than they are to select from a calendar picker.
- When users want to paste in a response.

## When to consider alternatives

- When users are choosing from a specific set of options. Consider [checkboxes, radio buttons]({{root}}/components/choice), or a [select menu]({{root}}/components/select) in these cases.

## Guidance

- Don't use placeholder text in form fields. Use hint text instead, if you need to provide contextual information. Placeholder text disappears after a user types a value, therefore users will no longer have that text available when they need to review their entries. People who have cognitive or visual disabilities have additional problems with placeholder text.
- The length of the text field provides a hint to users as to how much text to write. Do not require users to write paragraphs of text into a single-line `input` box; use a `textarea` instead.
- Text fields are among the easiest type of input for desktop users but are more difficult for mobile users.
- Only show error messages or styling after a user has interacted with a particular field.

**[View the "Forms" guidelines for additional guidance and best practices.]({{root}}/guidelines/forms/)**

## Accessibility

- Group each set of thematically related controls in a `fieldset` element. Use the `legend` element to offer a label within each `fieldset`. The `fieldset` and `legend` elements make it easier for screen reader users to navigate the form.
- Keep your form blocks in a vertical pattern. This approach is ideal, from an accessibility standpoint, because of limited vision that makes it hard to scan from left to right.

## Theming

The following Sass variables can be overridden to theme a field:

- `$color-focus`
- `$color-focus-inverse`
- `$focus-shadow`
- `$focus-shadow-inverse`
- `$input-border-color`
- `$input-border-color-inverse`
- `$input-border-radius`
- `$input-line-height`
- `$input-border-width`
- `$input-padding`

## Related patterns

- [Date field]({{root}}/patterns/date-field/)

## Learn more

- [Form Guidelines]({{root}}/guidelines/forms/)
- ["Placeholders in Form Fields Are Harmful"](https://www.nngroup.com/articles/form-design-placeholders/)
- [Asking for a date of birth](https://designnotes.blog.gov.uk/2013/12/05/asking-for-a-date-of-birth/)
- [GOV.UK text boxes discussion](https://paper.dropbox.com/doc/Text-boxes-8NLlgz9tjR8OzTz2N9wE3)
- [Four steps for choosing form elements on the Web (PDF)](http://www.formsthatwork.com/files/Articles/dropdown.pdf)

Style guide: components.autocomplete-field.guidance
*/
