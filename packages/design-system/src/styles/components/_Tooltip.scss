@import '../settings/index.scss';

$tooltip-icon-size: 16px;
$tooltip-arrow-size: 8px;
$tooltip-plus-border-size: 24px;

// stylelint-disable selector-no-qualifying-type
.ds-c-tooltip__trigger,
button.ds-c-tooltip__trigger {
  // override user agent button styles
  background: none;
  border: 0;
  display: inline-block;
  margin: 0;
  padding: 4px;
  text-decoration: none;
  &:hover {
    // Turn off cursor style as most of it is covered by the pseudo-after element
    // that makes it so that hovering in area including tooltip trigger means that
    // tooltip is still visible
    cursor: default;
    text-decoration: none;
  }
}
// stylelint-enable selector-no-qualifying-type

// Tooltip arrow
.ds-c-tooltip__arrow {
  height: $tooltip-icon-size;
  overflow: hidden;
  position: absolute;
  width: $tooltip-icon-size;
  &::after {
    background: $color-white;
    content: '';
    height: $tooltip-arrow-size;
    left: 50%;
    position: absolute;
    width: $tooltip-arrow-size;
  }
}

// Interior content of tooltip
.ds-c-tooltip__content {
  color: $color-base;
  font-size: $small-font-size;
  font-weight: 400;
  padding: $spacer-1;
}

// Used in ds-c-tooltip__container::before
// The invisible area on top of the arrow that keeps the tooltip visible on hover
%ds-c-tooltip__container-before {
  content: '';
  height: 36px;
  left: 0;
  opacity: 0;
  position: absolute;
  width: 100%;
}

// The greater tooltip container which gets added in via state
// max-width and z-index are set via props to account for different uses
.ds-c-tooltip__container {
  background: $color-white;
  border: 1px solid $color-gray-lighter;
  border-radius: 4px;
  box-shadow: $shadow-base;
  box-sizing: border-box;
  // When the tooltip is positioned on top of the trigger
  &[data-placement*='top'] {
    &::before {
      @extend %ds-c-tooltip__container-before;
      bottom: -36px;
    }
    // The box shadow of the tooltip arrow
    .ds-c-tooltip__arrow {
      top: 100%;
      // stylelint-disable max-nesting-depth
      &::after {
        box-shadow: $shadow-base;
        top: 0;
        transform: translateX(-50%) translateY(-50%) rotate(45deg);
      }
      // stylelint-enable max-nesting-depth
    }
  }
  // When the tooltip is positioned on bottom of the trigger
  &[data-placement*='bottom'] {
    &::before {
      @extend %ds-c-tooltip__container-before;
      top: -36px;
    }
    // The box shadow of the tooltip arrow
    .ds-c-tooltip__arrow {
      top: -$tooltip-arrow-size;
      // stylelint-disable max-nesting-depth
      &::after {
        bottom: 0;
        box-shadow: 1px 1px 1px $shadow-base-color;
        transform: translateX(-50%) translateY(-50%) rotate(-135deg);
      }
      // stylelint-enable max-nesting-depth
    }
  }
}

.ds-c-tooltip--container-enter {
  opacity: 0;
}

.ds-c-tooltip--container-enter-active {
  opacity: 1;
  transition: opacity $animation-speed-1;
}

.ds-c-tooltip--container-exit {
  opacity: 1;
}

.ds-c-tooltip--container-exit-active {
  opacity: 0;
  transition: opacity $animation-speed-1;
}

// styles for the dark/inverse version of the tooltip body/content
// stylelint-disable selector-class-pattern
.ds-c-tooltip__container--inverse {
  background: $color-gray;
  border: 1px solid $color-gray-dark;
  box-shadow: 1px 1px $shadow-base-blur-radius $shadow-base-color;
  box-sizing: border-box;

  .ds-c-tooltip__arrow::after {
    background: $color-gray;
  }

  .ds-c-tooltip__content {
    color: $color-white;
  }
}
// stylelint-enable selector-class-pattern