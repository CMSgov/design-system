@use '../layout' as *;
@use '../mixins';

// Wraps all label and dropdown markup
.ds-c-dropdown {
  max-width: var(--form__max-width);
  position: relative;
}

// Dropdown uses a <button> to fake a <select> element
// This styles a <button> to look like a <select> and positions content within
.ds-c-dropdown__button.ds-c-field {
  align-items: center;
  appearance: none;
  background-color: var(--dropdown__background-color);
  display: flex;
  gap: 2ch;
  justify-content: space-between;
  text-align: start;

  // Removes inner outline on select elements in Firefox.
  &:-moz-focusring {
    color: transparent;
    text-shadow: 0 0 0 #000;
  }

  // Due to the shadow overlay, the border needs to be transparent to avoid a light gray line divider
  &[aria-expanded='true'] {
    border-block-end-color: transparent;
  }

  .ds-c-dropdown--open & {
    @include mixins.focus-styles;
  }
}

// Dropdown previously used a background image for the caret
// Caret is now an SVG icon that is rotated based on aria-expanded set on its parent
// Rotation (and potential animation) couldn't be handled on the background element, but can now that it's its own element
.ds-c-dropdown__caret {
  flex-basis: 0 0 auto;

  [aria-expanded='true'] & {
    transform: rotate(0deg);
  }

  [aria-expanded='false'] & {
    transform: rotate(180deg);
  }
}

// Styles for the dropdown menu
.ds-c-dropdown__menu-container {
  --blur-radius: 17px;
  --clip-path-value: calc(-1 * var(--blur-radius));
  --max-height: 320px;

  background-color: var(--autocomplete__background-color);
  border: var(--text-input__border-width) solid var(--text-input__border-color);
  border-block-start: none;
  border-end-end-radius: var(--text-input__border-radius);
  border-end-start-radius: var(--text-input__border-radius);
  box-shadow: 0 0 var(--blur-radius) 0 var(--color-gray-light);
  // `clip-path` needed to hide `box-shadow` overlap in field. 17px is the `box-shadow` blur radius.
  clip-path: inset(0px var(--clip-path-value) var(--clip-path-value) var(--clip-path-value));
  margin-block-start: calc(-1 * var(--text-input__border-width));
  max-height: var(--max-height);
  position: absolute;
  width: 100%;
  z-index: var(--z-dialog);

  .ds-c-field--inverse + & {
    color: var(--color-base);
  }
}

.ds-c-dropdown__menu {
  @include mixins.unstyled-list;
  // Allows for keyboard navigation of dropdown options, i.e., scrolling through options via arrow keys
  max-height: calc(var(--max-height) - var(--text-input__border-width));
  overflow-y: auto;
}

// Base styles for grouped and individual dropdown elements
.ds-c-dropdown__menu-item,
.ds-c-dropdown__menu-item-group-label {
  cursor: default;
  padding: var(--text-input__padding);
}

.ds-c-dropdown__menu-item-group-label {
  font-weight: var(--font-weight-bold);
}

.ds-c-dropdown__menu-item-group ul[role='group'] {
  @include mixins.unstyled-list;
}

.ds-c-dropdown__menu-item-group .ds-c-dropdown__menu-item {
  padding-inline-start: var(--dropdown-option-group__padding);
}

// Styles for dropdown elements that are highlighted
.ds-c-dropdown__menu-item--highlighted {
  background-color: var(--color-primary-lightest);
  outline: none;
}

// Styles for dropdown elements that are selected
.ds-c-dropdown__menu-item--selected {
  background-color: var(--color-primary);
  color: var(--color-white);
  display: flex; // Prevents text from wrapping under icon
  font-weight: var(--font-weight-bold);

  @media (forced-colors: active) {
    background-color: WindowText;
    color: Window;
    forced-color-adjust: none;
    -ms-high-contrast-adjust: none;
  }
}

.ds-c-dropdown__menu-item-selected-indicator {
  padding-inline-end: var(--spacer-1);

  @media (forced-colors: active) {
    .ds-c-icon path {
      fill: currentColor;
    }
  }
}
