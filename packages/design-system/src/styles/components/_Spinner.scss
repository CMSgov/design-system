@use '../layout' as *;
@use '../mixins';

@mixin spinner-size($inner-size, $outer-size) {
  height: $outer-size;
  width: $outer-size;
  $padding: (($outer-size - $inner-size) * 0.5);

  &::before,
  &::after {
    border-width: ($inner-size * 0.125);
    height: $inner-size;
    left: $padding;
    top: $padding;
    width: $inner-size;
  }
}

.ds-c-spinner {
  @include spinner-size($spacer-4, $spacer-4);
  display: inline-block;
  position: relative;

  .ds-c-button > & {
    @include mixins.inline-icon;
    @include spinner-size(1em, 1em);
  }

  &::before,
  &::after {
    border-radius: var(--radius-circle);
    border-style: solid;
    content: '';
    display: block;
    left: 0;
    position: absolute;
    top: 0;
  }

  &::before {
    border-color: inherit;
    opacity: 0.2;
  }

  &::after {
    animation: spin var(--animation-speed-4) infinite linear;
    border-color: transparent;
    border-inline-start-color: inherit;
    transform: translateZ(0);

    @media (forced-colors: active) {
      border-color: WindowText;
      border-inline-start-color: Window;
    }
  }
}

.ds-c-spinner--filled {
  @include spinner-size($spacer-4, $spacer-6);
  background-color: var(--spinner__background-color);
  border-radius: 50%;
  color: var(--spinner__color);
  height: $spacer-6;
  width: $spacer-6;

  &.ds-c-spinner--inverse {
    background-color: var(--spinner__background-color--inverse);
    &:not(:focus) {
      color: var(--spinner__color--inverse);
    }
  }
}

.ds-c-spinner--small {
  @include spinner-size($spacer-2, $spacer-2);

  &.ds-c-spinner--filled {
    @include spinner-size($spacer-2, $spacer-3);
  }
}

.ds-c-spinner--big {
  @include spinner-size($spacer-5, $spacer-5);

  &.ds-c-spinner--filled {
    @include spinner-size($spacer-5, $spacer-7);
  }
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
