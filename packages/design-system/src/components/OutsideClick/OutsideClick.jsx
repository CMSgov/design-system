import PropTypes from 'prop-types';
import React from 'react';

export class OutsideClick extends React.PureComponent {
  constructor(props) {
    super(props);

    this.onMouseDown = this.onMouseDown.bind(this);
    this.onMouseUp = this.onMouseUp.bind(this);
    this.setChildNodeRef = this.setChildNodeRef.bind(this);
  }

  componentDidMount() {
    const { disabled, useCapture } = this.props;

    if (!disabled) this.addMouseDownEventListener(useCapture);
  }

  componentDidUpdate({ disabled: prevDisabled }) {
    const { disabled, useCapture } = this.props;
    if (prevDisabled !== disabled) {
      if (disabled) {
        this.removeEventListeners();
      } else {
        this.addMouseDownEventListener(useCapture);
      }
    }
  }

  componentWillUnmount() {
    this.removeEventListeners();
  }

  onMouseDown(event) {
    const { useCapture } = this.props;

    const isDescendantOfRoot = this.childNode && this.childNode.contains(event.target);
    if (!isDescendantOfRoot) {
      if (this.removeMouseUp) {
        this.removeMouseUp();
        this.removeMouseUp = null;
      }
      this.removeMouseUp = document.addEventListener('mouseup', this.onMouseUp, {
        capture: useCapture,
      });
    }
  }

  onMouseUp(event) {
    const { onOutsideClick } = this.props;

    const isDescendantOfRoot = this.childNode && this.childNode.contains(event.target);
    if (this.removeMouseUp) {
      this.removeMouseUp();
      this.removeMouseUp = null;
    }

    if (!isDescendantOfRoot) {
      onOutsideClick(event);
    }
  }

  setChildNodeRef(ref) {
    this.childNode = ref;
  }

  addMouseDownEventListener(useCapture) {
    this.removeMouseDown = document.addEventListener('mousedown', this.onMouseDown, {
      capture: useCapture,
    });
  }

  removeEventListeners() {
    if (this.removeMouseDown) this.removeMouseDown();
    if (this.removeMouseUp) this.removeMouseUp();
  }

  render() {
    const { children, display } = this.props;
    return (
      <div
        ref={this.setChildNodeRef}
        style={display && display !== 'block' ? { display } : undefined}
      >
        {children}
      </div>
    );
  }
}

OutsideClick.defaultProps = {
  disabled: false,
  useCapture: true,
  display: 'block',
};

OutsideClick.propTypes = {
  children: PropTypes.node.isRequired,
  /**
   * It takes the relevant clickevent as an arg and this callback function gets triggered
   * when the user clicks anywhere outside of the subtree generated by the DOM node
   */
  onOutsideClick: PropTypes.func.isRequired,
  /**
   * If the disabled prop is true, outside clicks will not be registered
   */
  disabled: PropTypes.bool,
  /**
   * If useCapture is true, the event will be registered in the capturing phase and thus,
   * propagated top-down instead of bottom-up as is the default.
   * See link for more information on (event bubbling vs. capture)[https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture].
   */
  useCapture: PropTypes.bool,
  /**
   * Set display styles for the `<div>` to wrap the subtree defined by `children`
   */
  display: PropTypes.oneOf(['block', 'flex', 'inline', 'inline-block', 'contents']),
};

export default OutsideClick;
