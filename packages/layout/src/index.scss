/*! Design System - Layout v{{version}} */

/*
Grid

The design system provides a 12-column, responsive, flexbox grid to provide structure and align content.

The grid is opt-in and not distributed with the core design system package. It is installed as a separate package:

```
npm install @cmsgov/design-system-layout --save
```

The grid consists of three distinct pieces:

- A **container** adds a maximum width and centers the content
- A **row** enables the flexbox layout and holds between 1-12 **columns**

Style guide: layout.grid
*/

/*
Default behavior

Columns without a set width will automatically layout with equal widths. For example, below are four instances of `.ds-l-col` which are each automatically 25% wide. The columns will automatically wrap when they don't fit a single row.

Markup:
<section class="ds-l-container">
  <div class="ds-l-row">
    <div class="ds-l-col">
      <div class="ds-u-border--2">Auto</div>
    </div>
    <div class="ds-l-col">
      <div class="ds-u-border--2">Auto</div>
    </div>
    <div class="ds-l-col">
      <div class="ds-u-border--2">Auto</div>
    </div>
    <div class="ds-l-col">
      <div class="ds-u-border--2">Auto</div>
    </div>
  </div>
</section>

Style guide: layout.grid.default
*/

/*
Specifying number of columns

Use a column class with a unit to indicate the number of columns to span. There can be 12 columns per row. So, if you want two elements that each span half the row, you would use `.col-6`

Markup:
<section class="ds-l-container">
  <div class="ds-l-row">
    <div class="ds-l-col-6">
      <div class="ds-u-border--2">6 columns</div>
    </div>
    <div class="ds-l-col-6">
      <div class="ds-u-border--2">6 columns</div>
    </div>
  </div>
</section>

Style guide: layout.grid.columns
*/

/*
Responsive classes

Column widths are set in percentages, so theyâ€™re always responsive and will be sized relative to their parent row.

Each column class can include a [breakpoint prefix]({{root}}/guidelines/responsive) (`sm`, `md`, `lg`, `xl`), allowing you to change the column widths based on the viewport width.

In the example below, the cells span:

- 1/6 of the row on `xl` viewports, using `ds-l-xl-col--2`
- 1/4 of the row on `lg` viewports, using `ds-l-lg-col--3`
- 1/3 of the row on `md` viewports, using `ds-l-md-col--4`
- 1/2 of the row on `sm` viewports, using `ds-l-sm-col--6`
- The entire width of the row on viewports smaller than the `sm` breakpoint, using `ds-l-col`

Markup:
<section class="ds-l-container">
  <div class="ds-l-row">
    <div class="ds-l-col ds-l-sm-col--6 ds-l-md-col--4 ds-l-lg-col--3 ds-l-xl-col--2">
      <div class="ds-u-border--2">A</div>
    </div>
    <div class="ds-l-col ds-l-sm-col--6 ds-l-md-col--4 ds-l-lg-col--3 ds-l-xl-col--2">
      <div class="ds-u-border--2">B</div>
    </div>
    <div class="ds-l-col ds-l-sm-col--6 ds-l-md-col--4 ds-l-lg-col--3 ds-l-xl-col--2">
      <div class="ds-u-border--2">C</div>
    </div>
    <div class="ds-l-col ds-l-sm-col--6 ds-l-md-col--4 ds-l-lg-col--3 ds-l-xl-col--2">
      <div class="ds-u-border--2">D</div>
    </div>
    <div class="ds-l-col ds-l-sm-col--6 ds-l-md-col--4 ds-l-lg-col--3 ds-l-xl-col--2">
      <div class="ds-u-border--2">E</div>
    </div>
    <div class="ds-l-col ds-l-sm-col--6 ds-l-md-col--4 ds-l-lg-col--3 ds-l-xl-col--2">
      <div class="ds-u-border--2">F</div>
    </div>
  </div>
</section>

Style guide: layout.grid.responsive
*/

/*
Alignment

Use [flexbox utility classes]({{root}}/utilties/flexbox) to change the alignment of the grid's columns.

Markup:
<section class="ds-l-container">
  <h2 class="ds-h6">Vertical alignment</h2>
  <div class="ds-l-row" style="min-height: 200px">
    <div class="ds-l-col-4 ds-u-fill--primary-alt-lightest ds-u-align-self--start">
      Left (default)
    </div>
    <div class="ds-l-col-4 ds-u-fill--primary-alt-lightest ds-u-align-self--center">
      Center
    </div>
    <div class="ds-l-col-4 ds-u-fill--primary-alt-lightest ds-u-align-self--end">
      Right
    </div>
  </div>
</section>

Style guide: layout.grid.alignment
*/
@import 'container';
@import 'row';
@import 'col';
