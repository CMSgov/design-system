import { FileDescriptor } from './types';
import { flatten, writeFile } from './utility';

const tokenFormat = (tokenType: string, name: string, value: string | unknown) => {
  // double quote strings with commas in them
  if (typeof value === 'string' && value.indexOf(',') > 0) value = `""${value}""`;
  return `${tokenType},${name},${value}\r\n`;
};

/*
 * Accepts an array of file descriptors generated by getFileDescriptors('path')
 * and writes their imported data to filesystem as a comma separated document (csv)
 * with headers
 */
export const exportCsv = (fileDescriptors: FileDescriptor[], outPath: string): number => {
  fileDescriptors.forEach((file) => {
    /*
     * doing this asynchronously with import() makes this code needlessly complex
     * so ignoring this particular linting error here to allow named require.
     * which runs synchronously.
     */
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const importedModule = require(`${file.moduleImportName}`);
    const flattenedModule = flatten(importedModule.default);

    // theme files have a description prop token files do not
    const filename = `${outPath}/${file.exportFileName}.csv`;

    // write header
    let vars = `id,key,value\r\n`;

    Object.entries(flattenedModule).forEach(([name, value]) => {
      vars += tokenFormat(file.fileBaseName, name, value);
    });

    writeFile(filename, vars);
  });
  return 0;
};

export default exportCsv;
