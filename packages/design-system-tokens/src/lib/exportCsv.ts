import { FileDescriptor } from './types';
import { flatten, writeFile } from './utility';

const tokenFormat = (name: string, value: string | unknown) => {
  // double quote strings with commas in them
  if (typeof value === 'string' && value.includes(',')) value = `""${value}""`;
  return `${name},${value}\r\n`;
};

const setVars = (items: Record<string, any>, filename: string) => {
  let vars = '';
  Object.entries(items).forEach(([name, value]) => {
    name = `${filename}-${name}`;
    vars += tokenFormat(name, value);
  });
  return vars;
};

/*
 * Accepts an array of file descriptors generated by getFileDescriptors('path')
 * and writes their imported data to filesystem as a comma separated document (csv)
 * with headers
 */
export const exportCsv = (fileDescriptors: FileDescriptor[], outPath: string): number => {
  fileDescriptors.forEach((file) => {
    /*
     * doing this asynchronously with import() makes this code needlessly complex
     * so ignoring this particular linting error here to allow named require.
     * which runs synchronously.
     */
    const importedModule = require(file.moduleImportName);
    const filename = `${outPath}/${file.exportFileName}.csv`;
    let output = `key,value\r\n`;
    let type = 'tokens';

    if (importedModule.default.description) type = 'theme';

    if (type === 'theme') {
      Object.entries(importedModule.default).forEach(([key]) => {
        if (key === 'description') return;

        const tokenItems = flatten(importedModule.default[key]);
        output += setVars(tokenItems, key);
      });
    } else {
      const tokens = flatten(importedModule.default);
      output += setVars(tokens, file.fileBaseName);
    }

    writeFile(filename, output);
  });
  return 0;
};

export default exportCsv;
