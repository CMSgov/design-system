import { FileDescriptor } from './types';
import { flatten, writeFile } from './utility';

const tokenFormat = (name: string, value: string | unknown) => {
  // double quote strings with commas in them
  if (typeof value === 'string' && value.includes(',')) value = `""${value}""`;
  return `${name},${value}\r\n`;
};

const writeToken = (items: Record<string, any>, filename: string, separator: string) => {
  let vars = '';
  Object.entries(items).forEach(([name, value]) => {
    name = `${filename}${separator}${name}`;
    vars += tokenFormat(name, value);
  });
  return vars;
};

/*
 * Accepts an array of file descriptors generated by getFileDescriptors('path')
 * and writes their imported data to filesystem as a comma separated document (csv)
 * with headers
 */
export const exportCsv = (fileDescriptors: FileDescriptor[], outPath: string): number => {
  let tokenItems =  {}
  let filename = ''
  let tokenOutput = ''

  fileDescriptors.forEach((file) => {
    const importedModule = require(`${file.moduleImportName}`)
    let output = `key,value\r\n`;
    const sep = file.baseName.includes('components') ? '' : '-'

    if (file.parentDirectoryName.includes('tokens')) {
      filename = `${outPath}/cmsds.tokens.csv`
      const tokens = flatten(importedModule.default);
      console.log(JSON.stringify(tokens,null,4))
      tokenOutput += writeToken(tokens, file.baseName, sep);
    } else {
      filename = `${outPath}/${file.baseName}-theme.csv`

      Object.entries(importedModule.default).forEach(([section]) => {
          tokenItems = flatten(importedModule.default[section]);
          output += writeToken(tokenItems, section, sep);
      })

      writeFile(filename, output)
    }
  })

  if (fileDescriptors[0].parentDirectoryName.includes('tokens')) {
    writeFile(filename, tokenOutput)
  }

  return 0
};

export default exportCsv;
