import { FileDescriptor } from './types';
import { writeFile } from './utility';

const tokenFormat = (t: string, k: string, v: string | unknown) => {
  return `${t},${k},${v}\r\n`;
};

/*
 * Accepts an array of file descriptors generated by getFileDescriptors('path')
 * and writes their imported data to filesystem as a comma separated document (csv)
 * with headers
 */
export const exportCsv = (fd: FileDescriptor[], outPath: string): number => {
  fd.forEach((m) => {
    /*
     * doing this asynchronously with import() makes this code needlessly complex
     * so ignoring this particular linting error here to allow named require.
     * which runs synchronously.
     */
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const md = require(`${m.moduleImportName}`);

    // theme files have a description prop token files do not
    if (md.default.description !== undefined) {
      Object.keys(md.default).forEach((k) => {
        if (k === 'description') return;

        const filename = `${outPath}/${m.exportFileName}-${k}.csv`;

        // write header
        let vars = `theme,key,value\r\n`;

        Object.entries(md.default[k]).forEach(([t, v]) => {
          vars += tokenFormat(m.fileBaseName, t, v);
        });

        writeFile(filename, vars);
      });
    } else {
      // it's a token file
      const filename = `${outPath}/${m.exportFileName}.csv`;

      // write header
      let vars = `type,key,value\r\n`;

      Object.entries(md.default).forEach(([t, v]) => {
        vars += tokenFormat(m.fileBaseName, t, v);
      });

      writeFile(filename, vars);
    }
  });
  return 0;
};

export default exportCsv;
