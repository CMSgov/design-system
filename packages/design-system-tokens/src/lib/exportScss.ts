import fs from 'fs';
import { FileDescriptor } from './types';

const tokenFormat = (k: string, v: string | unknown) => {
  return `$${k}: ${v};\n`;
};

const writeScss = (filename: string, vars: string) => {
  try {
    fs.writeFileSync(filename, vars);
    console.log(`:: wrote ${filename}`);
  } catch (err) {
    console.error(`There was an issue writing to ${filename}: ${err}`);
    process.exit(1);
  }
};

/*
 * Accepts an array of file descriptors generated by getFileDescriptors('path')
 * with the properties:
 * {
 *   moduleImportName,
 *   parentDirectoryName,
 *   fileBaseName,
 *   exportFileName
 * }
 * and writes their imported data to filesystem
 */
export const exportScss = (fd: FileDescriptor[], outPath: string): number => {
  fd.forEach((m) => {
    /*
     * doing this asynchronously with import() makes this code needlessly complex
     * so ignoring this particular linting error here to allow named require.
     * which runs synchronously.
     */
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const md = require(`${m.moduleImportName}`);

    // theme files have a description prop token files do not
    if (md.default.description !== undefined) {
      Object.keys(md.default).forEach((k) => {
        if (k === 'description') return;

        const filename = `${outPath}/${m.fileBaseName}-${k}.scss`;
        let vars = '';

        Object.entries(md.default[k]).forEach(([t, v]) => {
          vars += tokenFormat(t, v);
        });

        writeScss(filename, vars);
      });
    } else {
      // it's a token file
      const filename = `${outPath}/tokens-${m.fileBaseName}.scss`;
      let vars = '';

      Object.entries(md.default).forEach(([t, v]) => {
        vars += tokenFormat(t, v);
      });

      writeScss(filename, vars);
    }
  });
  return 0;
};

export default exportScss;
