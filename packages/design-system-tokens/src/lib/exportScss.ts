import { FileDescriptor } from './types';
import { flatten, writeFile } from './utility';

const tokenFormat = (name: string, value: string | unknown) => {
  return `$${name}: ${value};\n`;
};

const tokenFormatWithDefault = (name: string, value: string | unknown) => {
  return `$${name}: ${value} !default;\n`;
};

/*
 * Sets up a list of key/pair values from an object (section) using a formatter
 * function which returns an interpolated string value for use in new sass file
 */
const setVars = (
  items: Record<string, any>,
  section: string,
  formatter: (name: string, value: string) => string = tokenFormat
) => {
  let vars = '';
  Object.entries(items).forEach(([name, value]) => {
    // component and global objects in themes are not prefixed by the token type
    name = section === 'globals' || section === 'components' ? name : `${section}-${name}`;
    vars += formatter(name, value);
  });
  return vars;
};

/*
 * Accepts an array of file descriptors generated by getFileDescriptors('path')
 * and writes their imported data to the filesystem as Sass formatted scss files
 */
export const exportScss = (fileDescriptors: FileDescriptor[], outPath: string): number => {
  fileDescriptors.forEach((file) => {
    const importedModule = require(`${file.moduleImportName}`);
    const filename = `${outPath}/${file.exportFileName}.scss`;
    const type = importedModule.default.description ? 'theme' : 'tokens';
    let output = '';

    if (type === 'theme') {
      Object.entries(importedModule.default).forEach(([key]) => {
        if (key === 'description') return;

        const tokenItems = flatten(importedModule.default[key]);
        /*
         * core scss needs the !default attribute added to every style to
         * allow for overriding in medicare, TODO: get all systems on the
         * same page and remove this
         */
        if (file.parentDirectoryName === 'core') {
          output += setVars(tokenItems, key, tokenFormatWithDefault);
        } else {
          output += setVars(tokenItems, key);
        }
      });
    } else {
      const tokens = flatten(importedModule.default);
      output = setVars(tokens, file.fileBaseName);
    }

    writeFile(filename, output);
  });
  return 0;
};

export default exportScss;
