import { FileDescriptor } from './types';
import { writeFile } from './utility';

const tokenFormat = (name: string, value: string | unknown) => {
  return `$${name}: ${value};\n`;
};

/*
 * Accepts an array of file descriptors generated by getFileDescriptors('path')
 * with the properties:
 * {
 *   moduleImportName,
 *   parentDirectoryName,
 *   fileBaseName,
 *   exportFileName
 * }
 * and writes their imported data to filesystem
 */
export const exportScss = (fileDescriptors: FileDescriptor[], outPath: string): number => {
  fileDescriptors.forEach((file) => {
    /*
     * doing this asynchronously with import() makes this code needlessly complex
     * so ignoring this particular linting error here to allow named require.
     * which runs synchronously.
     */
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const importedModule = require(`${file.moduleImportName}`);

    // theme files have a description prop token files do not
    if (importedModule.default.description !== undefined) {
      Object.keys(importedModule.default).forEach((key) => {
        if (key === 'description') return;

        const filename = `${outPath}/${file.fileBaseName}-${key}.scss`;
        let vars = '';

        Object.entries(importedModule.default[key]).forEach(([name, value]) => {
          vars += tokenFormat(name, value);
        });

        writeFile(filename, vars);
      });
    } else {
      // it's a token file
      const filename = `${outPath}/tokens-${file.fileBaseName}.scss`;
      let vars = '';

      Object.entries(importedModule.default).forEach(([name, value]) => {
        vars += tokenFormat(name, value);
      });

      writeFile(filename, vars);
    }
  });
  return 0;
};

export default exportScss;
