import { FileDescriptor } from './types';
import { flatten } from './utility';
import { writeFile } from './file';

/**
 * Formats an object containing key/value token pairs as a single string containing
 * the formatted values ready to be written to a SCSS file, including line breaks
 *
 * @param items - The object containing the key/value pairs
 * @param prefix - The prefix to be appended to each key on export
 * @param formatter - A function which takes a key, value and returns a formatted key, value string
 * @param separator - The separator between the prefix and key
 * @returns A string which contains all formatted key/value pairs
 */
const formatTokensAsSCSS = (
  items: Record<string, any>,
  prefix: string,
  formatter: (name: string, value: string) => string,
  separator: string
): string => {
  let SCSS = '';
  Object.entries(items).forEach(([name, value]) => {
    // global objects in themes are not prefixed by the token type
    name = prefix === 'global' ? name : `${prefix}${separator}${name}`;
    SCSS += formatter(name, value);
  });
  return SCSS;
};

/**
 * Accepts an array of file descriptors generated by getFileDescriptors('path')
 * and writes their imported data to filesystem as a Sass (SCSS) file
 * Token files are combined into a single file, theme files are written separately.
 *
 * @param fileDescriptors - An array of fileDescriptors generated by getFileDescriptors
 * @param outPath - The output path for the CSV file(s)
 * @returns An exit code based on success writing output
 */
export const exportScss = (fileDescriptors: FileDescriptor[], outPath: string): number => {
  let tokenItems: Record<string, any>;
  let filename = '';
  let tokenOutput = '';

  fileDescriptors.forEach((file) => {
    const importedModule = require(`${file.moduleImportName}`);
    // component files do not need a separator
    const sep = file.baseName.includes('components') ? '' : '-';
    let output = '';

    if (file.parentDirectoryName.includes('tokens')) {
      // we have a token file
      filename = `${outPath}/cmsds.tokens.scss`;
      const tokens = importedModule.default;

      tokenOutput += formatTokensAsSCSS(tokens, file.baseName, (n, v) => `$${n}: ${v};\n`, sep);
    } else {
      // we have a theme file
      filename = `${outPath}/${file.baseName}-theme.scss`;

      Object.entries(importedModule.default).forEach(([section]) => {
        tokenItems = flatten(importedModule.default[section]);
        /*
         * The core theme scss needs the !default attribute added to every style
         * to allow for overriding in medicare,
         * @TODO: get all systems on the same page and remove this
         */
        if (file.baseName.includes('core')) {
          output += formatTokensAsSCSS(
            tokenItems,
            section,
            (n, v) => `$${n}: ${v} !default;\n`,
            sep
          );
        } else {
          output += formatTokensAsSCSS(tokenItems, section, (n, v) => `$${n}: ${v};\n`, sep);
        }
      });

      writeFile(filename, output);
    }
  });

  if (fileDescriptors[0].parentDirectoryName.includes('tokens')) {
    writeFile(filename, tokenOutput);
  }

  return 0;
};

export default exportScss;
