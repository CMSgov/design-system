import * as Tokens from '../../tokens';
import * as Types from '../../lib/types';

const makeTheme = <T extends Types.ThemeTokens>(value: T) => {
  return value;
};

const DefaultTheme = makeTheme({
  description: 'Default CMSDS Core Theme',
  color: {
    'color-white': Tokens.color.white,
    'color-base': Tokens.color['granite-900'],
    'color-black': Tokens.color.black,
    'color-gray-dark': Tokens.color['granite-800'],
    'color-gray': Tokens.color['granite-700'],
    'color-gray-medium': Tokens.color['granite-600'],
    'color-gray-light': Tokens.color['granite-300'],
    'color-gray-lighter': Tokens.color['granite-100'],
    'color-gray-lightest': Tokens.color['granite-50'],
    'color-gray-warm-dark': Tokens.color['granite-700'],
    'color-gray-warm-light': Tokens.color['granite-50'], // same as lightest?
    'color-gray-cool-light': Tokens.color['ocean-50'],
    'color-primary': Tokens.color['ocean-500'],
    'color-primary-darker': Tokens.color['ocean-700'],
    'color-primary-darkest': Tokens.color['ocean-800'],
    'color-primary-alt': Tokens.color['sky-500'],
    'color-primary-alt-dark': Tokens.color['sky-700'],
    'color-primary-alt-darkest': Tokens.color['sky-800'],
    'color-primary-alt-light': Tokens.color['sky-300'],
    'color-primary-alt-lightest': Tokens.color['sky-50'],
    'color-red': Tokens.color['rose-500'],
    'color-red-dark': Tokens.color['rose-600'],
    'color-red-darker': Tokens.color['rose-700'],
    'color-red-darkest': Tokens.color['rose-800'],
    'color-red-light': Tokens.color['rose-400'],
    'color-red-lighter': Tokens.color['rose-200'],
    'color-red-lightest': Tokens.color['rose-50'],
    'color-gold': Tokens.color['goldenrod-500'],
    'color-gold-dark': Tokens.color['goldenrod-600'],
    'color-gold-darker': Tokens.color['goldenrod-700'],
    'color-gold-darkest': Tokens.color['goldenrod-800'],
    'color-gold-light': Tokens.color['goldenrod-400'],
    'color-gold-lighter': Tokens.color['goldenrod-200'],
    'color-gold-lightest': Tokens.color['goldenrod-50'],
    'color-green': Tokens.color['spring-500'],
    'color-green-dark': Tokens.color['spring-600'],
    'color-green-darker': Tokens.color['spring-700'],
    'color-green-darkest': Tokens.color['spring-800'],
    'color-green-light': Tokens.color['spring-400'],
    'color-green-lighter': Tokens.color['spring-200'],
    'color-green-lightest': Tokens.color['spring-50'],
    'color-cool-blue': Tokens.color['dark-sky-700'],
    'color-cool-blue-light': Tokens.color['dark-sky-500'],
    'color-cool-blue-lighter': Tokens.color['dark-sky-300'],
    'color-cool-blue-lightest': Tokens.color['dark-sky-50'],
    'color-muted-inverse': Tokens.color['granite-200'],
    'color-focus': Tokens.color['dark-sky-500'],
    'color-focus-inverse': Tokens.color['sky-300'],
    'focus-color': Tokens.color['goldenrod-300'],
    'focus-color-inverse': Tokens.color['goldenrod-300'],
    'focus-border-inverse': Tokens.color['goldenrod-800'],
    'color-focus-light': Tokens.color.white,
    'color-focus-dark': Tokens.color['orchid-500'],
    'color-visited': Tokens.color['windsor-500'],
    // below all reference colors used above, possible remapping in scss
    'color-error': Tokens.color['rose-500'],
    'color-error-dark': Tokens.color['rose-600'],
    'color-error-darker': Tokens.color['rose-700'],
    'color-error-darkest': Tokens.color['rose-800'],
    'color-error-light': Tokens.color['rose-400'],
    'color-error-lighter': Tokens.color['rose-200'],
    'color-error-lightest': Tokens.color['rose-50'],
    'color-warn': Tokens.color['goldenrod-500'],
    'color-warn-dark': Tokens.color['goldenrod-600'],
    'color-warn-darker': Tokens.color['goldenrod-700'],
    'color-warn-darkest': Tokens.color['goldenrod-800'],
    'color-warn-light': Tokens.color['goldenrod-400'],
    'color-warn-lighter': Tokens.color['goldenrod-200'],
    'color-warn-lightest': Tokens.color['goldenrod-50'],
    'color-success': Tokens.color['spring-500'],
    'color-success-dark': Tokens.color['spring-600'],
    'color-success-darker': Tokens.color['spring-700'],
    'color-success-darkest': Tokens.color['spring-800'],
    'color-success-light': Tokens.color['spring-400'],
    'color-success-lighter': Tokens.color['spring-200'],
    'color-success-lightest': Tokens.color['spring-50'],
    'color-muted': Tokens.color['granite-700'],
    'color-base-inverse': Tokens.color.white,
    'color-background': Tokens.color.white,
    'color-background-inverse': Tokens.color['ocean-800'],
    'color-background-dialog': Tokens.color.white,
    'border-color': Tokens.color['granite-100'],
    'border-color-dark': Tokens.color['granite-800'],
    'border-color-inverse': Tokens.color.white,
  },
  spacing: { ...Tokens.spacing },
});

export default DefaultTheme;
