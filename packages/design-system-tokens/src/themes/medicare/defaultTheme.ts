import { color, spacer } from '../../tokens';
import { makeTheme, HexColorTokens } from '../../lib/types';

const description = 'Default Medicare.gov Theme';

const themeColors: HexColorTokens = {
  'teal-700': color['teal-700'],
  'teal-500': color['teal-500'],
  'teal-300': color['teal-300'],
  'teal-100': color['teal-100'],
  'blue-700': color['lapis-700'],
  'blue-500': color['lapis-500'],
  'blue-300': color['lapis-300'],
  'blue-100': color['lapis-100'],
  'black-700': color['granite-700'],
  'black-500': color['granite-500'],
  'black-300': color['granite-300'],
  'black-200': color['granite-200'],
  'black-100': color['granite-100'],
  'black-050': color['granite-50'],
  'yellow-700': color['goldenrod-700'],
  'yellow-500': color['goldenrod-500'],
  'yellow-300': color['goldenrod-300'],
  'yellow-100': color['goldenrod-100'],
  'red-700': color['crimson-700'],
  'red-500': color['crimson-500'],
  'red-300': color['crimson-300'],
  'red-100': color['crimson-100'],
  white: color.white,
  base: color['granite-800'],
  black: color.black,
  gray: color['granite-700'],
  'gray-dark': color['granite-800'],
  'gray-darker': color['granite-900'],
  'gray-medium': color['granite-600'],
  'gray-light': color['granite-200'],
  'gray-lighter': color['granite-100'],
  'gray-lightest': color['granite-50'],
  'gray-warm-dark': color['granite-700'],
  'gray-warm-light': color['granite-50'], // same as lightest?
  'gray-cool-light': color['ocean-50'],
  primary: color['teal-500'],
  'primary-light': color['teal-300'],
  'primary-lightest': color['teal-100'],
  'primary-dark': color['teal-700'],
  'primary-darker': color['ocean-800'],
  'primary-darkest': color['ocean-900'],
  'primary-alt': color['lapis-500'],
  'primary-alt-dark': color['lapis-700'],
  'primary-alt-darker': color['lapis-800'],
  'primary-alt-darkest': color['sky-900'],
  'primary-alt-light': color['sky-200'],
  'primary-alt-lightest': color['sky-50'],
  secondary: color['lapis-500'],
  'secondary-dark': color['lapis-500'],
  'secondary-darker': color['lapis-600'],
  'secondary-darkest': color['lapis-700'],
  'secondary-light': color['lapis-300'],
  'secondary-lightest': color['lapis-100'],
  red: color['rose-500'],
  'red-dark': color['rose-600'],
  'red-darker': color['rose-700'],
  'red-darkest': color['rose-800'],
  'red-light': color['rose-400'],
  'red-lighter': color['rose-200'],
  'red-lightest': color['rose-50'],
  gold: color['goldenrod-500'],
  'gold-dark': color['goldenrod-600'],
  'gold-darker': color['goldenrod-700'],
  'gold-darkest': color['goldenrod-800'],
  'gold-light': color['goldenrod-400'],
  'gold-lighter': color['goldenrod-200'],
  'gold-lightest': color['goldenrod-50'],
  green: color['spring-500'],
  'green-dark': color['spring-600'],
  'green-darker': color['spring-700'],
  'green-darkest': color['spring-800'],
  'green-light': color['spring-400'],
  'green-lighter': color['spring-200'],
  'green-lightest': color['spring-50'],
  'cool-blue': color['dark-sky-700'],
  'cool-blue-light': color['dark-sky-500'],
  'cool-blue-lighter': color['dark-sky-300'],
  'cool-blue-lightest': color['dark-sky-50'],
  'muted-inverse': color['granite-200'],
  focus: color['dark-sky-500'],
  'focus-inverse': color['sky-300'],
  'focus-color': color['goldenrod-300'],
  'focus-color-inverse': color['goldenrod-300'],
  'focus-border-inverse': color['goldenrod-800'],
  'focus-light': color.white,
  'focus-dark': color['orchid-500'],
  visited: color['crimson-800'],
  // below all reference colors used above, possible remapping in scss
  error: color['crimson-500'],
  'error-dark': color['crimson-600'],
  'error-darker': color['crimson-700'],
  'error-darkest': color['crimson-800'],
  'error-light': color['crimson-400'],
  'error-lighter': color['crimson-200'],
  'error-lightest': color['crimson-50'],
  warn: color['goldenrod-500'],
  'warn-dark': color['goldenrod-600'],
  'warn-darker': color['goldenrod-700'],
  'warn-darkest': color['goldenrod-800'],
  'warn-light': color['goldenrod-400'],
  'warn-lighter': color['goldenrod-200'],
  'warn-lightest': color['goldenrod-50'],
  success: color['spring-500'],
  'success-dark': color['spring-600'],
  'success-darker': color['spring-700'],
  'success-darkest': color['spring-800'],
  'success-light': color['spring-400'],
  'success-lighter': color['spring-200'],
  'success-lightest': color['spring-50'],
  muted: color['granite-700'],
  'base-inverse': color.white,
  background: color.white,
  'background-inverse': color['teal-500'],
  'background-dialog': color.white,
  'border-color': color['granite-100'],
  'border-color-dark': color['granite-800'],
  'border-color-inverse': color.white,
};

const components = {
  'button-style-example': color.white,
  'button-spacing-top': spacer['2'],
  'dropdown-padding-left': spacer['4'],
};

const shadow = {
  focus: `inset 0 0 0 1px ${themeColors.base}`,
  'focus-inverse': `inset 0 0 0 1px ${themeColors.base}`,
  'focus-link': `0 3px ${themeColors.base}`,
  'focus-link-inverse': `0 3px ${themeColors['focus-border-inverse']}`,
};

const DefaultTheme = makeTheme({
  description,
  color: themeColors,
  spacer,
  components,
  shadow,
});

export default DefaultTheme;
