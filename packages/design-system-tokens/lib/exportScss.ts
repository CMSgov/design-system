import * as fs from 'fs';
import * as Types from './types';

const tokenFormat = (k: string, v: string | unknown) => {
  return `$${k}: ${v};\n`;
};

const writeScss = (fn: string, vars: string) => {
  try {
    fs.writeFileSync(fn, vars);
    console.log(`:: wrote ${fn}`);
  } catch (err) {
    console.error(`There was an issue writing to ${fn}: ${err}`);
    process.exit(1);
  }
};

// Accepts an array of file descriptors generated by collectAllFiles('path')
// with the properties:
// {
//   m: moduleImportName,
//   pd: parentDirectoryName,
//   bn: fileBaseName,
//   efn: exportFileName
// }
// and writes their imported data to filesystem
//
export const exportScss = (fd: Types.FileDescriptor[], outPath: string): number => {
  fd.forEach((m) => {
    // doing this asynchronously with import() makes this code needlessly complex
    // so ignoring this particular linting error here to allow named require.
    // which runs synchronously.
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const md = require(`../${m.m}`);

    // theme files have a description prop token files do not
    //
    if (md.default.description !== undefined) {
      Object.keys(md.default).forEach((k) => {
        if (k === 'description') return;

        const fn = `${outPath}/${m.bn}-${k}.scss`;
        let vars = '';

        Object.entries(md.default[k]).forEach(([t, v]) => {
          vars += tokenFormat(t, v);
        });

        writeScss(fn, vars);
      });
    } else {
      // it's a token file
      const fn = `${outPath}/tokens-${m.bn}.scss`;
      let vars = '';

      Object.entries(md.default).forEach(([t, v]) => {
        vars += tokenFormat(t, v);
      });

      writeScss(fn, vars);
    }
  });
  return 0;
};

export default exportScss;
