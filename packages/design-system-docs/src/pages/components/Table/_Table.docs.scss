/*
Table

Tables show tabular data in columns and rows.

@status Draft

@uswds https://designsystem.digital.gov/components/tables/

Markup: table.example.html

Style guide: components.table
*/

/*
Table with multi headers and a caption

Markup: table-complex.example.html

Style guide: components.table.complex
*/

/*
`<Table>`

`Table` is a container component that contains `TableCaption`, `TableHead` and `TableBody` as children,
as well as `TableRow` and `TableCell` for the table content. These components mostly follow ordinary HTML table semantics, but also include some additional
responsive features including horizontal scrolling and vertically stacked rows.

@react-example Table.example.jsx

@responsive

@react-props Table.jsx

Style guide: components.table.react
*/

/*
`<TableCaption>`

`TableCaption` renders the `<caption>` element.

@react-props TableCaption.jsx

Style guide: components.table.react-tablecaption
*/

/*
`<TableHead>`

`TableHead` renders the `<thead>` element and will typically contain `TableRow` elements to define table columns.

@react-props TableHead.jsx

Style guide: components.table.react-tablehead
*/

/*
`<TableBody>`

`TableBody` renders the `<tbody>` element and will typically contain `TableRow` elements to define table data.

@react-props TableBody.jsx

Style guide: components.table.react-tablebody
*/

/*
`<TableRow>`

`TableRow` renders a `<tr>` element.

@react-props TableRow.jsx

Style guide: components.table.react-tablerow
*/

/*
`<TableCell>`

`TableCell` dynamically renders a `<th>` or `<td>` element based on the parent component or user specified `component` prop. By default `TableCell` will automatically render a `<th>` element if the parent component is `TableHead`, otherwise it will render a `<td>` element.

@react-props TableCell.jsx

Style guide: components.table.react-tablecell
*/

/*
---

### When to use

- When you need tabular information, such as statistical data.
- When users need to compare sets of information.

### When to consider alternatives

- Depending on the type of content, consider using other presentation formats such as definition lists or hierarchical lists.
- If you're writing out name / value pairs, there's often a more compact way compared to using a table.

### Usage

- Right-align numerical data in tables. You can use a [text alignment utility class]({{root}}/utilities/text-align) for this. This makes it easier to scan and compare values.

### Accessibility

- Tables can have two levels of headers. Each header cell should have `scope="col"` or `scope="row"`. [Learn more about the "scope" attribute.](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-scope)
- Complex tables are tables with more than two levels of headers. Each header should be given a unique `id` and each data cell should have a `headers` attribute with each related header cellâ€™s `id` listed.
- When adding a title to a table, include it in a `<caption>` tag inside of the `<table>` element.

### Customization

The following Sass variables can be overridden to theme table fields:

- `$table-header-background-color`
- `$table-striped-background-color`
- `$table-striped-header-background-color`
- `$table-stacked-header-max-width`

### Learn more

- [W3C Web Accessibility Tutorial \- Table Concepts](https://www.w3.org/WAI/tutorials/tables/)
- [Design Better Data Tables](https://medium.com/mission-log/design-better-data-tables-430a30a00d8c)

Style guide: components.table.guidance
*/
