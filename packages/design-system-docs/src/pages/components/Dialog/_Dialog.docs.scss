/*
Modal dialog

@analytics

The dialog component can be used to focus a user's attention on a single piece of content, without taking them to a new screen. Please use with caution; view our guidance for more details.

Markup: dialog.example.html

Style guide: components.dialog
*/

/*
Dialog size variants

Apply one of the size modifier classes to the `ds-c-dialog` element to change the dialog width.
- `.ds-c-dialog--narrow`
- `.ds-c-dialog--wide`
- `.ds-c-dialog--full`

Markup: dialog-size.example.html

Style guide: components.dialog.size
*/

/*
`<Dialog />`

@react-example Dialog.example.jsx

@react-props Dialog.jsx

Style guide: components.dialog.react
*/

/*
Analytics props

<table class="ds-c-table ds-c-table--compact">
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="ds-u-font-weight--bold">onComponentDidMount</code></td>
      <td><code>bool, or object</code></td>
      <td>
        <p>Track modal dialog opened event</p>
      </td>
    </tr>
    <tr>
      <td><code class="ds-u-font-weight--bold">onComponentWillUnmount</code></td>
      <td><code>bool, or object</code></td>
      <td>
        <p>Track modal dialog closed event</p>
      </td>
    </tr>
  </tbody>
</table>

<h4>Analytics event object</h4>

<table class="ds-c-table ds-c-table--compact">
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="ds-u-font-weight--bold">event_name</code></td>
      <td><code>string</code></td>
      <td>onComponentDidMount: <code>'modal_impression'</code>, or onComponentWillUnmount: <code>'modal_closed'</code></td>
      <td>
        <p>When provided, override text to display as the event name</p>
      </td>
    </tr>
    <tr>
      <td><code class="ds-u-font-weight--bold">event_type</code></td>
      <td><code>string</code></td>
      <td><code>'ui interaction'</code></td>
      <td>
        <p>When provided, override text to display as the event type</p>
      </td>
    </tr>
    <tr>
      <td><code class="ds-u-font-weight--bold">ga_eventAction</code></td>
      <td><code>string</code></td>
      <td>onComponentDidMount: <code>'modal impression'</code>, or onComponentWillUnmount: <code>'closed modal'</code></td>
      <td>
        <p>When provided, override text to display as the event action</p>
      </td>
    </tr>
    <tr>
      <td><code class="ds-u-font-weight--bold">ga_eventCategory</code></td>
      <td><code>string</code></td>
      <td><code>'ui components'</code></td>
      <td>
        <p>When provided, override text to display as the event category</p>
      </td>
    </tr>
    <tr>
      <td><code class="ds-u-font-weight--bold">ga_eventLabel</code></td>
      <td><code>string</code></td>
      <td>Dialog prop: <code>heading or title</code></td>
      <td>
        <p>When provided, override text to display as the event label</p>
      </td>
    </tr>
    <tr>
      <td>
        <code class="ds-u-font-weight--bold">ga_eventType</code>
      </td>
      <td><code>string</code></td>
      <td>cmsds</td>
      <td>
        <p>When provided, override text to display as the event type</p>
      </td>
    </tr>
    <tr>
      <td>
        <code class="ds-u-font-weight--bold">ga_eventValue</code>
      </td>
      <td><code>string</code></td>
      <td></td>
      <td>
        <p>When provided, override text to display as the event value</p>
      </td>
    </tr>
    <tr>
      <td><code class="ds-u-font-weight--bold">heading</code></td>
      <td><code>string</code></td>
      <td>Dialog prop: <code>heading or title</code></td>
      <td>
        <p>When provided, override text to display as the heading</p>
      </td>
    </tr>
  </tbody>
</table>

Style guide: components.dialog.analytics
*/

/*
---

### Related patterns

- [Alert]({{root}}/components/alert)

### Usage

- `<Dialog>` makes use of the `<AriaModal>` component maintained by [react-aria-modal docs on Github](https://github.com/davidtheclark/react-aria-modal). The above documented props are only those directly exposed by the `<Dialog>` component, but you can pass props specific to `<AriaModal>` here as well, e.g. you can set the [`scrollDisabled`](https://github.com/davidtheclark/react-aria-modal#scrolldisabled) prop if you'd like to enable scrolling behind the modal window.

### Accessibility

#### Keyboard support

- `Enter` or `Space` to select the highlighted item.
- `Tab` to move the focus sequentially through the list of focusable items.
- `Shift + Tab` to move the focus sequentially through the list of focusable items in reversed order.

#### Focus Management

- When the modal is opened, the entire modal is the default focus state. Most screen readers will announce the entire dialog content.
- Focus is trapped within the modal and users can then navigate through the dialog actions with the keyboard.
- Escape will close the modal. To disable exiting when users press the Escape key, set the `escapeExits` prop to `false`
- When the modal closes, focus returns to the element that was focused just before the modal is activated
- To place the focus inside of the dialog on activating the modal, set the dialog focus using the `initialFocus` prop with boolean prop `focusDialog` set to `false`

### Learn more

- [Making an accessible dialog box](https://www.nczonline.net/blog/2013/02/12/making-an-accessible-dialog-box/)
- [GOV.UK modal dialog boxes discussion](https://paper.dropbox.com/doc/Modal-dialog-boxes-jbsTPoITg37IIc6ybjetM)
- [Overuse of Overlays: How to Avoid Misusing Lightboxes](https://www.nngroup.com/articles/overuse-of-overlays/)
- [Using ARIA role=dialog to implement a modal dialog box](https://www.w3.org/WAI/GL/wiki/Using_ARIA_role%3Ddialog_to_implement_a_modal_dialog_box)

Style guide: components.dialog.guidance
*/

/*
Google Analytics

**Analytics event tracking is disabled by default.**

### Enable event tracking

- Import and set the `setDialogSendsAnalytics` feature flag to `true` in your application's entry file:

```JSX
import { setDialogSendsAnalytics } from "@cmsgov/<design-system-package>";
setDialogSendsAnalytics(true);
```
On applications where the page has `utag` loaded, the data goes to Tealium which allows it to route to Google Analytics or the currently approved data analytics tools.

### Disable event tracking

- Pass the `onComponentDidMount` prop set to `false` to the component:
- Pass the `onComponentWillUnmount` prop set to `false` to the component:

```JSX
analytics={
  {
    onComponentDidMount: {false},
    onComponentWillUnmount: {false}
  }
}
```
### Override  event tracking

- Pass changes via any of the [available analytics props](#components.alert.analytics).

Style guide: components.dialog.guidance-analytics
*/
