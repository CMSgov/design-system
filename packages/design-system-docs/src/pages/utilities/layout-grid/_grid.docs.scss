/*
Layout grid

Use the flexible grid system to structure and align content. The grid is responsive, powered by flexbox, and based on a twelve-column grid system.

The grid consists of three distinct pieces:

- **Containers** add a maximum width and centers the content
- **Rows** enable the flexbox layout and contains the columns
- **Columns** determine the number of columns an item will span across, out of a possible 12 per row.

@weight -1

Style guide: utilities.grid
*/

/*
Default behavior

Columns without a set width will automatically layout with equal widths. The columns will automatically wrap when they don't fit a single row.

Markup: grid-default.example.html

Style guide: utilities.grid.default
*/

/*
Specifying number of columns

Specify the number of columns (1-12) to span using `.ds-l-col--*` classes. These classes will span `*` columns. So, if you want two elements that each span half the row, you would use `.ds-l-col--6`

Markup: grid-number-col.example.html

Style guide: utilities.grid.columns
*/

/*
Natural width columns

Use a `.ds-l-col--auto` class to size a column to the natural width of its content.

Markup: grid-natural-width.example.html

Style guide: utilities.grid.column-auto
*/

/*
Nested grids

Markup: grid-nested.example.html

Style guide: utilities.grid.nested
*/

/*
Offsetting columns

Offset columns using the [margin auto utility class]({{root}}/utilities/margin):

Markup: grid-offset.example.html

Style guide: utilities.grid.offset
*/

/*
Alignment

Align columns horizontally or vertically using [flexbox utility classes]({{root}}/utilities/flexbox). To align columns horizontally, use the `justify-content` utility class. To align columns vertically, use the `align-items` utility class.

Markup: grid-alignment.example.html

Style guide: utilities.grid.alignment
*/

/*
Form rows

Use a `.ds-l-form-row` class to tighten the column spacing when laying out form fields in a grid.

Markup: grid-forms.example.html

Style guide: utilities.grid.form-row
*/

/*
Responsive grids

@responsive

Use a [breakpoint prefix]({{root}}/guidelines/responsive) to change the column widths based on the viewport width.

Responsive format: `.ds-l-[breakpoint]-col--*`

In the example below, the cells span:

- 6 cells per row on `xl` viewports, using `.ds-l-xl-col--2`
- 4 cells per row on `lg` viewports, using `.ds-l-lg-col--3`
- 3 cells per row on `md` viewports, using `.ds-l-md-col--4`
- 2 cells per row on `sm` viewports, using `.ds-l-sm-col--6`
- The entire width of the row on viewports smaller than the `sm` breakpoint, using `.ds-l-col--12`

Markup: grid-responsive.example.html

Style guide: utilities.grid.responsive
*/

/*
---

### When to use

- Almost always use a grid layout â€” visitors can read more quickly on pages that use grids. Choose a single grid system for your entire site.

### When to consider alternatives

- Avoid mixing this grid and other grid systems.

### Usage

- Choose a 12-column grid with flexible column widths and fixed gutters.
- Avoid text lines longer than 75 characters. Place text in narrower columns to keep text lines from becoming too wide or use the [measure utility classes]({{root}}/utilities/measure).

### Accessibility

- Low-vision users should be able to increase the size of the text by up to 200 percent without breaking the layout.
- The DOM order and visual presentation of content should be consistent, in order to not break keyboard navigation. This means you should avoid changing the flexbox `order` property of the grid columns.

### Customization

The following Sass variables can be overridden to customize the grid:

- `$grid-columns`
- `$grid-gutter-width`

### Learn more

- [A Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)
- [Flexbox & the keyboard navigation disconnect](https://tink.uk/flexbox-the-keyboard-navigation-disconnect/)

Style guide: utilities.grid.guidance
*/
