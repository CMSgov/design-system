[
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Accordion",
    "methods": [],
    "props": {
      "bordered": {
        "defaultValue": null,
        "description": "Applies a border to the accordion content.",
        "name": "bordered",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Accordion/Accordion.tsx",
          "name": "AccordionProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Accordion/Accordion.tsx",
            "name": "AccordionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class to be applied to the outer `<div>` that contains all accordion items.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Accordion/Accordion.tsx",
          "name": "AccordionProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Accordion/Accordion.tsx",
            "name": "AccordionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "AccordionItem",
    "methods": [],
    "props": {
      "buttonClassName": {
        "defaultValue": null,
        "description": "Class to be applied to the header `<button>` of an accordion item.",
        "name": "buttonClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "Class to be applied to the content `<div>` tag of an accordion item.",
        "name": "contentClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultOpen": {
        "defaultValue": null,
        "description": "Boolean to expand the accordion.",
        "name": "defaultOpen",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "heading": {
        "defaultValue": null,
        "description": "Text for the accordion item heading.",
        "name": "heading",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "headingLevel": {
        "defaultValue": {
          "value": "2"
        },
        "description": "Heading type to override default `<h2>`.",
        "name": "headingLevel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"2\" | \"1\" | \"3\" | \"4\" | \"5\" | \"6\""
        }
      },
      "id": {
        "defaultValue": null,
        "description": "If not provided, a unique id will be automatically generated and used.",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "isControlledOpen": {
        "defaultValue": null,
        "description": "Sets the accordion panel's open state. Use this in combination with `onChange`\nfor a controlled accordion; otherwise, set `defaultOpen`.",
        "name": "isControlledOpen",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback function that's invoked when a controlled accordion panel is selected or deselected.",
        "name": "onChange",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "closeIcon": {
        "defaultValue": {
          "value": "(\n      <RemoveIcon\n        className=\"ds-c-accordion__button-icon\"\n        title={t('accordion.close')}\n        ariaHidden={false}\n      />\n    )"
        },
        "description": "Icon to overwrite default close icon",
        "name": "closeIcon",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "openIcon": {
        "defaultValue": {
          "value": "(\n      <AddIcon\n        className=\"ds-c-accordion__button-icon\"\n        title={t('accordion.open')}\n        ariaHidden={false}\n      />\n    )"
        },
        "description": "Icon to overwrite default open icon",
        "name": "openIcon",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Alert",
    "methods": [],
    "props": {
      "alertRef": {
        "defaultValue": null,
        "description": "Access a reference to the `alert` `div` element",
        "name": "alertRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
          "name": "BaseAlertProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
            "name": "BaseAlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "autoFocus": {
        "defaultValue": null,
        "description": "Sets the focus on Alert during the first mount",
        "name": "autoFocus",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
          "name": "BaseAlertProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
            "name": "BaseAlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The alert's body content",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
          "name": "BaseAlertProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
            "name": "BaseAlertProps"
          },
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
          "name": "BaseAlertProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
            "name": "BaseAlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "heading": {
        "defaultValue": null,
        "description": "Text for the alert heading",
        "name": "heading",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
          "name": "BaseAlertProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
            "name": "BaseAlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "headingId": {
        "defaultValue": null,
        "description": "Optional id used to link the `aria-labelledby` attribute to the heading. If not provided, a unique id will be automatically generated and used.",
        "name": "headingId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
          "name": "BaseAlertProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
            "name": "BaseAlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "headingLevel": {
        "defaultValue": {
          "value": "2"
        },
        "description": "Heading type to override default `<h2>`.",
        "name": "headingLevel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
          "name": "BaseAlertProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
            "name": "BaseAlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "AlertHeadingLevel"
        }
      },
      "hideIcon": {
        "defaultValue": null,
        "description": "Boolean to hide the `Alert` icon",
        "name": "hideIcon",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
          "name": "BaseAlertProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
            "name": "BaseAlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "role": {
        "defaultValue": {
          "value": "region"
        },
        "description": "ARIA `role`, defaults to 'region'",
        "name": "role",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
          "name": "BaseAlertProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
            "name": "BaseAlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "AlertRole"
        }
      },
      "weight": {
        "defaultValue": null,
        "description": "A string corresponding to the `Alert` weight classes (`lightweight`)",
        "name": "weight",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
          "name": "BaseAlertProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
            "name": "BaseAlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"lightweight\""
        }
      },
      "variation": {
        "defaultValue": null,
        "description": "A string corresponding to the `Alert` variation classes (`error`, `warn`, `success`)",
        "name": "variation",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
          "name": "BaseAlertProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Alert/Alert.tsx",
            "name": "BaseAlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "AlertVariation"
        }
      },
      "analytics": {
        "defaultValue": null,
        "description": "Analytics events tracking is enabled by default. Set this value to `false` to\ndisable tracking for this component instance.",
        "name": "analytics",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "analyticsLabelOverride": {
        "defaultValue": null,
        "description": "An override for the dynamic content sent to analytics services. By default this\ncontent comes from the heading.\n\nIn cases where this component’s heading may contain **sensitive information**,\nuse this prop to override what is sent to analytics.",
        "name": "analyticsLabelOverride",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "analyticsEventTypeOverride": {
        "defaultValue": null,
        "description": "If you need the `event_type` to be overridden for your use case, you can provide\nan alternate string here. Suggested values can be found in the EventType enum.",
        "name": "analyticsEventTypeOverride",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onAnalyticsEvent": {
        "defaultValue": null,
        "description": "Optional callback that will intercept analytics events for this component.\nIf none is specified, the design system will use the default analytics\nfunction, which can be overwritten globally with `setDefaultAnalyticsFunction`.",
        "name": "onAnalyticsEvent",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: AnalyticsEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Autocomplete",
    "methods": [],
    "props": {
      "ariaClearLabel": {
        "defaultValue": null,
        "description": "Screen reader-specific label for the Clear search `<button>`. Intended to provide a longer, more descriptive explanation of the button's behavior.",
        "name": "ariaClearLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autoCompleteLabel": {
        "defaultValue": {
          "value": "off"
        },
        "description": "Control the `TextField` autocomplete attribute. Defaults to \"off\" to support accessibility. [Read more.](https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion)",
        "name": "autoCompleteLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Must contain a `TextField` component",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          },
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root element.\nUseful for adding utility classes.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearInputOnBlur": {
        "defaultValue": {
          "value": "true"
        },
        "description": "When set to `false`, do not clear the input when the input element loses focus.",
        "name": "clearInputOnBlur",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clearInputText": {
        "defaultValue": null,
        "description": "Text rendered on the page if `clearInput` prop is passed. Default is \"Clear search\".",
        "name": "clearInputText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "clearSearchButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Removes the Clear search button when set to `false`",
        "name": "clearSearchButton",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "focusTrigger": {
        "defaultValue": null,
        "description": "Used to focus child `TextField` on `componentDidMount()`",
        "name": "focusTrigger",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique id to be passed to the child `TextField`. If no id is passed as a prop,\nthe `Autocomplete` component will auto-generate one. This prop was provided in cases\nwhere an id might need to be passed to multiple components, such as the `htmlFor`\nattribute on a label and the id of an input.",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "getA11yStatusMessage": {
        "defaultValue": null,
        "description": "Customize the default status messages announced to screen reader users via aria-live when autocomplete results are populated. [Read more on downshift docs.](https://github.com/paypal/downshift#geta11ystatusmessage)",
        "name": "getA11yStatusMessage",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(options: A11yStatusMessageOptions<any>) => string"
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "Access a reference to the child `TextField`'s `input` element",
        "name": "inputRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "itemToString": {
        "defaultValue": {
          "value": "(item): string => (item ? item.name : '')"
        },
        "description": "Used to determine the string value for the selected item (which is used to compute the `inputValue`). [Read more on downshift docs.](https://github.com/paypal/downshift#itemtostring)",
        "name": "itemToString",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(item: any) => string"
        }
      },
      "items": {
        "defaultValue": null,
        "description": "Array of objects used to populate the suggestion list that appears below the input as users type. This array of objects is intended for an async data callback, and should conform to the prescribed shape to avoid errors.",
        "name": "items",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "AutocompleteItems[]"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Adds a heading to the top of the autocomplete list. This can be used to convey to the user that they're required to select an option from the autocomplete list.",
        "name": "label",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelId": {
        "defaultValue": null,
        "description": "A unique `id` to be used on the child `TextField` label tag",
        "name": "labelId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Can be called when the `items` array is being fetched remotely, or will be delayed for more than 1-2 seconds.",
        "name": "loading",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loadingMessage": {
        "defaultValue": null,
        "description": "Message users will see when the `loading` prop is passed to `Autocomplete`.",
        "name": "loadingMessage",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "noResultsMessage": {
        "defaultValue": null,
        "description": "Message users will see when the `items` array returns empty and the `loading` prop is passed to `<Autocomplete />`.",
        "name": "noResultsMessage",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when the user selects an item and the selected item has changed. Called with the item that was selected and the new state. [Read more on downshift docs.](https://github.com/paypal/downshift#onchange)",
        "name": "onChange",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onInputValueChange": {
        "defaultValue": null,
        "description": "Called when the child `TextField` value changes. Returns a String `inputValue`. [Read more on downshift docs.](https://github.com/paypal/downshift#oninputvaluechange)",
        "name": "onInputValueChange",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
          "name": "AutocompleteProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Autocomplete/Autocomplete.tsx",
            "name": "AutocompleteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(inputValue: string, stateAndHelpers: ControllerStateAndHelpers<any>) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Badge",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Label text or HTML.",
        "name": "children",
        "parent": {
          "fileName": "design-system/node_modules/@types/react/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/Badge/Badge.tsx",
            "name": "BadgeProps"
          },
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root badge element.\nUseful for adding utility classes.",
        "name": "className",
        "parent": {
          "fileName": "design-system/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/Badge/Badge.tsx",
            "name": "BadgeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Sets the font size of the Badge. Only supports 'big'",
        "name": "size",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Badge/Badge.tsx",
          "name": "BadgeProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Badge/Badge.tsx",
            "name": "BadgeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"big\""
        }
      },
      "variation": {
        "defaultValue": null,
        "description": "A string corresponding to the badge-component variation classes",
        "name": "variation",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Badge/Badge.tsx",
          "name": "BadgeProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Badge/Badge.tsx",
            "name": "BadgeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BadgeVariation"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Button",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Label text or HTML",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root button element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "href": {
        "defaultValue": null,
        "description": "When provided, the root component will render as an `<a>` element\nrather than `button`.",
        "name": "href",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "Access a reference to the `button` or `a` element",
        "name": "inputRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ButtonRef"
        }
      },
      "isAlternate": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Applies the alternate color to a Button. By default, Button\nuses the `main` color.",
        "name": "isAlternate",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Returns the [`SyntheticEvent`](https://facebook.github.io/react/docs/events.html).\nNot called when the Button is disabled.",
        "name": "onClick",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onDark": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Defines a color palette best used when Button is placed on a dark\nbackground-color. By default, Button uses a light color palette.",
        "name": "onDark",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ButtonSize"
        }
      },
      "type": {
        "defaultValue": {
          "value": "button"
        },
        "description": "Button [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) attribute",
        "name": "type",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"button\" | \"submit\" | \"reset\""
        }
      },
      "variation": {
        "defaultValue": null,
        "description": "A string corresponding to Button variation classes.",
        "name": "variation",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ButtonVariation"
        }
      },
      "analytics": {
        "defaultValue": null,
        "description": "Analytics events tracking is enabled by default. Set this value to `false` to\ndisable tracking for this component instance.",
        "name": "analytics",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "analyticsLabelOverride": {
        "defaultValue": null,
        "description": "An override for the dynamic content sent to analytics services. By default this\ncontent comes from the heading.\n\nIn cases where this component’s heading may contain **sensitive information**,\nuse this prop to override what is sent to analytics.",
        "name": "analyticsLabelOverride",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "analyticsEventTypeOverride": {
        "defaultValue": null,
        "description": "If you need the `event_type` to be overridden for your use case, you can provide\nan alternate string here. Suggested values can be found in the EventType enum.",
        "name": "analyticsEventTypeOverride",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onAnalyticsEvent": {
        "defaultValue": null,
        "description": "Optional callback that will intercept analytics events for this component.\nIf none is specified, the design system will use the default analytics\nfunction, which can be overwritten globally with `setDefaultAnalyticsFunction`.",
        "name": "onAnalyticsEvent",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: AnalyticsEvent) => void"
        }
      },
      "analyticsParentHeading": {
        "defaultValue": null,
        "description": "If needed for analytics, pass heading text of parent component of button.",
        "name": "analyticsParentHeading",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsParentDataProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsParentDataProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "analyticsParentType": {
        "defaultValue": null,
        "description": "If needed for analytics, pass type of parent component of button.",
        "name": "analyticsParentType",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsParentDataProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsParentDataProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "ChoiceList",
    "methods": [],
    "props": {
      "choices": {
        "defaultValue": null,
        "description": "Array of [`Choice`]({{root}}/components/choice/#components.choice.react) data objects to be rendered.",
        "name": "choices",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
          "name": "BaseChoiceListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
            "name": "BaseChoiceListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ChoiceProps[]"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
          "name": "BaseChoiceListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
            "name": "BaseChoiceListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables the entire field.",
        "name": "disabled",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
          "name": "BaseChoiceListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
            "name": "BaseChoiceListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hint": {
        "defaultValue": null,
        "description": "Additional hint text to display",
        "name": "hint",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
          "name": "BaseChoiceListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
            "name": "BaseChoiceListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "requirementLabel": {
        "defaultValue": null,
        "description": "Text showing the requirement (\"Required\", \"Optional\", etc.). See [Required and Optional Fields]({{root}}/guidelines/forms/#required-and-optional-fields).",
        "name": "requirementLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
          "name": "BaseChoiceListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
            "name": "BaseChoiceListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "Applies the \"inverse\" UI theme",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
          "name": "BaseChoiceListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
            "name": "BaseChoiceListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label for the field",
        "name": "label",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
          "name": "BaseChoiceListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
            "name": "BaseChoiceListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the `FormLabel`.",
        "name": "labelClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
          "name": "BaseChoiceListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
            "name": "BaseChoiceListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "The field's `name` attribute",
        "name": "name",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
          "name": "BaseChoiceListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
            "name": "BaseChoiceListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "Called anytime any choice is blurred",
        "name": "onBlur",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
          "name": "BaseChoiceListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
            "name": "BaseChoiceListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onComponentBlur": {
        "defaultValue": null,
        "description": "Called when any choice is blurred and the focus does not land on one\nof the other choices inside this component (i.e., when the whole\ncomponent loses focus)",
        "name": "onComponentBlur",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
          "name": "BaseChoiceListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
            "name": "BaseChoiceListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
          "name": "BaseChoiceListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
            "name": "BaseChoiceListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Sets the size of the checkbox or radio button",
        "name": "size",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
          "name": "BaseChoiceListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
            "name": "BaseChoiceListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\""
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Sets the type to render `checkbox` fields or `radio` buttons",
        "name": "type",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
          "name": "BaseChoiceListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/ChoiceList.tsx",
            "name": "BaseChoiceListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ChoiceListType"
        }
      },
      "labelId": {
        "defaultValue": null,
        "description": "A unique `id` to be used on the field label. If one isn't provided, a unique ID\nwill be generated.",
        "name": "labelId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "Enable the error state by providing an error message.",
        "name": "errorMessage",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorMessageClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the error message",
        "name": "errorMessageClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "The ID of the error message applied to this field.",
        "name": "errorId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "textClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the label text.",
        "name": "textClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorPlacement": {
        "defaultValue": null,
        "description": "Location of the error message relative to the field input",
        "name": "errorPlacement",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"bottom\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Choice",
    "methods": [],
    "props": {
      "checked": {
        "defaultValue": null,
        "description": "Sets the input's `checked` state. Use this in combination with `onChange`\nfor a controlled component; otherwise, set `defaultChecked`.",
        "name": "checked",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "checkedChildren": {
        "defaultValue": null,
        "description": "Content to be shown when the choice is checked. See\n**Checked children and the expose within pattern** on\nthe Guidance tab for detailed instructions.",
        "name": "checkedChildren",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "uncheckedChildren": {
        "defaultValue": null,
        "description": "Content to be shown when the choice is not checked",
        "name": "uncheckedChildren",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root `div` element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inputClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the `input` element.",
        "name": "inputClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label text or HTML.",
        "name": "label",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the `FormLabel`.",
        "name": "labelClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultChecked": {
        "defaultValue": null,
        "description": "Sets the initial `checked` state. Use this for an uncontrolled component;\notherwise, use the `checked` property.",
        "name": "defaultChecked",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "",
        "name": "errorMessage",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorMessageClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the error message",
        "name": "errorMessageClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "Access a reference to the `input` element",
        "name": "inputRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "hint": {
        "defaultValue": null,
        "description": "Additional hint text to display below the choice's label",
        "name": "hint",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique ID to be used for the input field, as well as the label's\n`for` attribute. A unique ID will be generated if one isn't provided.",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "requirementLabel": {
        "defaultValue": null,
        "description": "Text showing the requirement (\"Required\", \"Optional\", etc.). See [Required and Optional Fields]({{root}}/guidelines/forms/#required-and-optional-fields).",
        "name": "requirementLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "Applies the \"inverse\" UI theme",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\""
        }
      },
      "name": {
        "defaultValue": null,
        "description": "The `input` field's `name` attribute",
        "name": "name",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "",
        "name": "onBlur",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: ChangeEvent<HTMLInputElement>) => any"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Sets the type to render `checkbox` fields or `radio` buttons",
        "name": "type",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ChoiceType"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The `input` `value` attribute",
        "name": "value",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
          "name": "ChoiceProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/ChoiceList/Choice.tsx",
            "name": "ChoiceProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ChoiceValue"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "SingleInputDateField",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": null,
        "description": "The `input` field's `name` attribute",
        "name": "name",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
          "name": "SingleInputDateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
            "name": "SingleInputDateFieldProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "Called anytime any date input is blurred",
        "name": "onBlur",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
          "name": "SingleInputDateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
            "name": "SingleInputDateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: FocusEvent<HTMLInputElement, Element>) => any"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called anytime any date input is changed. This function is called with two arguments.\nThe first argument should be used to update whatever state your application uses to\nsupply back to this component's `value` prop in a _controlled component_ pattern.\n@param updatedValue - The input's new value\n@param formattedValue - The input's new value with date formatting applied, included\nfor convenience. Do not use this value as the component's `value` prop. An appropriate\nuse for this value would be to run date-validation checks against it.",
        "name": "onChange",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
          "name": "SingleInputDateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
            "name": "SingleInputDateFieldProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(updatedValue: string, formattedValue: string) => any"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Sets the input's `value`. Use in combination with an `onChange` handler to implement\na _controlled component_ pattern. This component expects the `value` to match\nwhatever string the user types (i.e., the first argument provided to your `onChange`\nhandler).",
        "name": "value",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
          "name": "SingleInputDateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
            "name": "SingleInputDateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultMonth": {
        "defaultValue": null,
        "description": "The initial month to show in the calendar picker. If not provided, defaults to the\nmonth of the currently selected date.",
        "name": "defaultMonth",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
          "name": "SingleInputDateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
            "name": "SingleInputDateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "fromDate": {
        "defaultValue": null,
        "description": "Earliest day to start month navigation in the calendar picker.\n(This does not restrict dates entered manually.)",
        "name": "fromDate",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
          "name": "SingleInputDateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
            "name": "SingleInputDateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "fromMonth": {
        "defaultValue": null,
        "description": "Earliest month to start month navigation in the calendar picker.\n(This does not restrict dates entered manually.)",
        "name": "fromMonth",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
          "name": "SingleInputDateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
            "name": "SingleInputDateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "fromYear": {
        "defaultValue": null,
        "description": "Earliest year to start month navigation in the calendar picker.\n(This does not restrict dates entered manually.)",
        "name": "fromYear",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
          "name": "SingleInputDateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
            "name": "SingleInputDateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "toDate": {
        "defaultValue": null,
        "description": "Latest day to end month navigation in the calendar picker.\n(This does not restrict dates entered manually.)",
        "name": "toDate",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
          "name": "SingleInputDateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
            "name": "SingleInputDateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "toMonth": {
        "defaultValue": null,
        "description": "Latest month to end month navigation in the calendar picker.\n(This does not restrict dates entered manually.)",
        "name": "toMonth",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
          "name": "SingleInputDateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
            "name": "SingleInputDateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "toYear": {
        "defaultValue": null,
        "description": "Latest year to end month navigation in the calendar picker.\n(This does not restrict dates entered manually.)",
        "name": "toYear",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
          "name": "SingleInputDateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/SingleInputDateField.tsx",
            "name": "SingleInputDateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorPlacement": {
        "defaultValue": null,
        "description": "Location of the error message relative to the field input",
        "name": "errorPlacement",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"bottom\""
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique `id` for the field element. Useful for referencing the field from\nother components with `aria-describedby`.",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label for the field.",
        "name": "label",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the field label",
        "name": "labelClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "labelId": {
        "defaultValue": null,
        "description": "A unique `id` to be used on the field label. If one isn't provided, a unique ID\nwill be generated.",
        "name": "labelId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "Enable the error state by providing an error message.",
        "name": "errorMessage",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorMessageClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the error message",
        "name": "errorMessageClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "The ID of the error message applied to this field.",
        "name": "errorId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "hint": {
        "defaultValue": null,
        "description": "Additional hint text to display",
        "name": "hint",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "Set to `true` to apply the \"inverse\" theme",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "requirementLabel": {
        "defaultValue": null,
        "description": "Text showing the requirement (ie. \"Optional\", or \"Required\").\nIn most cases, this should be used to indicate which fields are optional.\nSee the [form guidelines]({{root}}/guidelines/forms/) for more info.",
        "name": "requirementLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "textClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the label text.",
        "name": "textClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "MultiInputDateField",
    "methods": [],
    "props": {
      "autoComplete": {
        "defaultValue": null,
        "description": "Adds `autocomplete` attributes `bday-day`, `bday-month` and `bday-year` to the corresponding `<MultiInputDateField>` inputs",
        "name": "autoComplete",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dateFormatter": {
        "defaultValue": null,
        "description": "Optional method to format the `input` field values. If this\nmethod is provided, the returned value will be passed as a second argument\nto the `onBlur` and `onChange` callbacks. This method receives an object as\nits only argument, in the shape of: `{ day, month, year }`\n\nBy default `dateFormatter` will be set to the `defaultDateFormatter` function, which prevents days/months more than 2 digits & years more than 4 digits.",
        "name": "dateFormatter",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "The primary label, rendered above the individual month/day/year fields",
        "name": "label",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelId": {
        "defaultValue": null,
        "description": "A unique ID to be used for the MultiInputDateField label. If one isn't provided, a unique ID will be generated.",
        "name": "labelId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "requirementLabel": {
        "defaultValue": null,
        "description": "Text showing the requirement (\"Required\", \"Optional\", etc.). See [Required and Optional Fields]({{root}}/guidelines/forms/#required-and-optional-fields).",
        "name": "requirementLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "Called anytime any date input is blurred",
        "name": "onBlur",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onComponentBlur": {
        "defaultValue": null,
        "description": "Called when any date input is blurred and the focus does not land on one\nof the other date inputs inside this component (i.e., when the whole\ncomponent loses focus)",
        "name": "onComponentBlur",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called anytime any date input is changed",
        "name": "onChange",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "dayLabel": {
        "defaultValue": null,
        "description": "Label for the day field",
        "name": "dayLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "dayName": {
        "defaultValue": null,
        "description": "`name` for the day `input` field",
        "name": "dayName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "dayDefaultValue": {
        "defaultValue": null,
        "description": "Initial value for the day `input` field. Use this for an uncontrolled\ncomponent; otherwise, use the `dayValue` property.",
        "name": "dayDefaultValue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DateFieldDayDefaultValue"
        }
      },
      "dayFieldRef": {
        "defaultValue": null,
        "description": "Access a reference to the day `input`",
        "name": "dayFieldRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "dayInvalid": {
        "defaultValue": null,
        "description": "Apply error styling to the day `input`",
        "name": "dayInvalid",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dayValue": {
        "defaultValue": null,
        "description": "Sets the day input's `value`. Use this in combination with `onChange`\nfor a controlled component; otherwise, set `dayDefaultValue`.",
        "name": "dayValue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DateFieldDayValue"
        }
      },
      "monthLabel": {
        "defaultValue": null,
        "description": "Label for the month field",
        "name": "monthLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "monthName": {
        "defaultValue": null,
        "description": "`name` for the month `input` field",
        "name": "monthName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "monthDefaultValue": {
        "defaultValue": null,
        "description": "Initial value for the month `input` field. Use this for an uncontrolled\ncomponent; otherwise, use the `monthValue` property.",
        "name": "monthDefaultValue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DateFieldMonthDefaultValue"
        }
      },
      "monthFieldRef": {
        "defaultValue": null,
        "description": "Access a reference to the month `input`",
        "name": "monthFieldRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "monthInvalid": {
        "defaultValue": null,
        "description": "Apply error styling to the month `input`",
        "name": "monthInvalid",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "monthValue": {
        "defaultValue": null,
        "description": "Sets the month input's `value`. Use this in combination with `onChange`\nfor a controlled component; otherwise, set `monthDefaultValue`.",
        "name": "monthValue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DateFieldMonthValue"
        }
      },
      "yearDefaultValue": {
        "defaultValue": null,
        "description": "Initial value for the year `input` field. Use this for an uncontrolled\ncomponent; otherwise, use the `yearValue` property.",
        "name": "yearDefaultValue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DateFieldYearDefaultValue"
        }
      },
      "yearFieldRef": {
        "defaultValue": null,
        "description": "Access a reference to the year `input`",
        "name": "yearFieldRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "yearInvalid": {
        "defaultValue": null,
        "description": "Apply error styling to the year `input`",
        "name": "yearInvalid",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "yearLabel": {
        "defaultValue": null,
        "description": "Label for the year `input` field",
        "name": "yearLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "yearName": {
        "defaultValue": null,
        "description": "`name` for the year field",
        "name": "yearName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "yearValue": {
        "defaultValue": null,
        "description": "Sets the year input's `value`. Use this in combination with `onChange`\nfor a controlled component; otherwise, set `yearDefaultValue`.",
        "name": "yearValue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
          "name": "DateFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/MultiInputDateField.tsx",
            "name": "DateFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DateFieldYearValue"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique `id` for the field element. Useful for referencing the field from\nother components with `aria-describedby`.",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "Enable the error state by providing an error message.",
        "name": "errorMessage",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorMessageClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the error message",
        "name": "errorMessageClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "The ID of the error message applied to this field.",
        "name": "errorId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "hint": {
        "defaultValue": null,
        "description": "Additional hint text to display",
        "name": "hint",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "Set to `true` to apply the \"inverse\" theme",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "textClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the label text.",
        "name": "textClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorPlacement": {
        "defaultValue": null,
        "description": "Location of the error message relative to the field input",
        "name": "errorPlacement",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"bottom\""
        }
      },
      "labelClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the field label",
        "name": "labelClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "DateInput",
    "methods": [],
    "props": {
      "autoComplete": {
        "defaultValue": null,
        "description": "Adds `autocomplete` attributes `bday-day`, `bday-month` and `bday-year` to the corresponding `<DateInput>` inputs",
        "name": "autoComplete",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root fieldset element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "dateFormatter": {
        "defaultValue": null,
        "description": "Optional method to format the `input` field values. If this\nmethod is provided, the returned value will be passed as a second argument\nto the `onBlur` and `onChange` callbacks. This method receives an object as\nits only argument, in the shape of: `{ day, month, year }`\nBy default `dateFormatter` will be set to the `defaultDateFormatter` function, which prevents days/months more than 2 digits & years more than 4 digits.",
        "name": "dateFormatter",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables all three input fields.",
        "name": "disabled",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "Applies the \"inverse\" UI theme",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "labelId": {
        "defaultValue": null,
        "description": "A unique ID applied to the DateField label.",
        "name": "labelId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "Called anytime any date input is blurred",
        "name": "onBlur",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onComponentBlur": {
        "defaultValue": null,
        "description": "Called when any date input is blurred and the focus does not land on one\nof the other date inputs inside this component (i.e., when the whole\ncomponent loses focus)",
        "name": "onComponentBlur",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called anytime any date input is changed",
        "name": "onChange",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "dayLabel": {
        "defaultValue": null,
        "description": "Label for the day field",
        "name": "dayLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "dayName": {
        "defaultValue": null,
        "description": "`name` for the day `input` field",
        "name": "dayName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "dayDefaultValue": {
        "defaultValue": null,
        "description": "Initial value for the day `input` field. Use this for an uncontrolled\ncomponent; otherwise, use the `dayValue` property.",
        "name": "dayDefaultValue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DateInputDayDefaultValue"
        }
      },
      "dayFieldRef": {
        "defaultValue": null,
        "description": "Access a reference to the day `input`",
        "name": "dayFieldRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "MutableRefObject<any> | ((...args: any[]) => any)"
        }
      },
      "dayInvalid": {
        "defaultValue": null,
        "description": "Apply error styling to the day `input`",
        "name": "dayInvalid",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dayValue": {
        "defaultValue": null,
        "description": "Sets the day input's `value`. Use this in combination with `onChange`\nfor a controlled component; otherwise, set `dayDefaultValue`.",
        "name": "dayValue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DateInputDayValue"
        }
      },
      "monthLabel": {
        "defaultValue": null,
        "description": "Label for the month field",
        "name": "monthLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "monthName": {
        "defaultValue": null,
        "description": "`name` for the month `input` field",
        "name": "monthName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "monthDefaultValue": {
        "defaultValue": null,
        "description": "Initial value for the month `input` field. Use this for an uncontrolled\ncomponent; otherwise, use the `monthValue` property.",
        "name": "monthDefaultValue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DateInputMonthDefaultValue"
        }
      },
      "monthFieldRef": {
        "defaultValue": null,
        "description": "Access a reference to the month `input`",
        "name": "monthFieldRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "MutableRefObject<any> | ((...args: any[]) => any)"
        }
      },
      "monthInvalid": {
        "defaultValue": null,
        "description": "Apply error styling to the month `input`",
        "name": "monthInvalid",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "monthValue": {
        "defaultValue": null,
        "description": "Sets the month input's `value`. Use this in combination with `onChange`\nfor a controlled component; otherwise, set `monthDefaultValue`.",
        "name": "monthValue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DateInputMonthValue"
        }
      },
      "yearDefaultValue": {
        "defaultValue": null,
        "description": "Initial value for the year `input` field. Use this for an uncontrolled\ncomponent; otherwise, use the `yearValue` property.",
        "name": "yearDefaultValue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DateInputYearDefaultValue"
        }
      },
      "yearFieldRef": {
        "defaultValue": null,
        "description": "Access a reference to the year `input`",
        "name": "yearFieldRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "MutableRefObject<any> | ((...args: any[]) => any)"
        }
      },
      "yearInvalid": {
        "defaultValue": null,
        "description": "Apply error styling to the year `input`",
        "name": "yearInvalid",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "yearLabel": {
        "defaultValue": null,
        "description": "Label for the year `input` field",
        "name": "yearLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "yearName": {
        "defaultValue": null,
        "description": "`name` for the year field",
        "name": "yearName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "yearValue": {
        "defaultValue": null,
        "description": "Sets the year input's `value`. Use this in combination with `onChange`\nfor a controlled component; otherwise, set `yearDefaultValue`.",
        "name": "yearValue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/DateField/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DateInputYearValue"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Dialog",
    "methods": [],
    "props": {
      "actions": {
        "defaultValue": null,
        "description": "Buttons or other HTML to be rendered in the \"actions\" bar\nat the bottom of the dialog.",
        "name": "actions",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "actionsClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the actions container.",
        "name": "actionsClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "alert": {
        "defaultValue": null,
        "description": "If `true`, the modal will receive a role of `alertdialog`, instead of its\ndefault `dialog`. The `alertdialog` role should only be used when an\nalert, error, or warning occurs.",
        "name": "alert",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaCloseLabel": {
        "defaultValue": null,
        "description": "Aria label for the close button",
        "name": "ariaCloseLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "backdropClickExits": {
        "defaultValue": null,
        "description": "Pass `true` to have the dialog close when its backdrop pseudo-element is clicked",
        "name": "backdropClickExits",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root dialog element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeButtonSize": {
        "defaultValue": null,
        "description": "Size of the close button. See [Button component]({{root}}/components/button/#components.button.react)",
        "name": "closeButtonSize",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DialogCloseButtonSize"
        }
      },
      "closeButtonText": {
        "defaultValue": null,
        "description": "For internationalization purposes, the text for the \"Close\" button must be\npassed in as a prop.",
        "name": "closeButtonText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "closeButtonVariation": {
        "defaultValue": {
          "value": "ghost"
        },
        "description": "Variation string to be applied to close button component. See [Button component]({{root}}/components/button/#components.button.react)",
        "name": "closeButtonVariation",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ButtonVariation"
        }
      },
      "closeIcon": {
        "defaultValue": {
          "value": "<CloseIcon />"
        },
        "description": "The icon to display as part of the close button",
        "name": "closeIcon",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "headerClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the header, which wraps the heading and\nclose button.",
        "name": "headerClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "heading": {
        "defaultValue": null,
        "description": "The Dialog's heading, to be rendered in the header alongside the close button.",
        "name": "heading",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the dialog element",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onEnter": {
        "defaultValue": null,
        "description": "This function is called after the modal opens",
        "name": "onEnter",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onExit": {
        "defaultValue": null,
        "description": "This function needs to handles the state change of exiting (or deactivating) the modal.\nMaybe it's just a wrapper around `setState()`; or maybe you use some more involved\nFlux-inspired state management — whatever the case, this module leaves the state\nmanagement up to you instead of making assumptions.\nThat also makes it easier to create your own \"close modal\" buttons; because you\nhave the function that closes the modal right there, written by you, at your disposal.",
        "name": "onExit",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element>) => void"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The Dialog's size parameter.",
        "name": "size",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
          "name": "BaseDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dialog/Dialog.tsx",
            "name": "BaseDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DialogSize"
        }
      },
      "analytics": {
        "defaultValue": null,
        "description": "Analytics events tracking is enabled by default. Set this value to `false` to\ndisable tracking for this component instance.",
        "name": "analytics",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "analyticsLabelOverride": {
        "defaultValue": null,
        "description": "An override for the dynamic content sent to analytics services. By default this\ncontent comes from the heading.\n\nIn cases where this component’s heading may contain **sensitive information**,\nuse this prop to override what is sent to analytics.",
        "name": "analyticsLabelOverride",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "analyticsEventTypeOverride": {
        "defaultValue": null,
        "description": "If you need the `event_type` to be overridden for your use case, you can provide\nan alternate string here. Suggested values can be found in the EventType enum.",
        "name": "analyticsEventTypeOverride",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onAnalyticsEvent": {
        "defaultValue": null,
        "description": "Optional callback that will intercept analytics events for this component.\nIf none is specified, the design system will use the default analytics\nfunction, which can be overwritten globally with `setDefaultAnalyticsFunction`.",
        "name": "onAnalyticsEvent",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: AnalyticsEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Drawer",
    "methods": [],
    "props": {
      "ariaLabel": {
        "defaultValue": null,
        "description": "Gives more context to screen readers on the Drawer close button.",
        "name": "ariaLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeButtonText": {
        "defaultValue": null,
        "description": "",
        "name": "closeButtonText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "footerBody": {
        "defaultValue": null,
        "description": "",
        "name": "footerBody",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "footerTitle": {
        "defaultValue": null,
        "description": "",
        "name": "footerTitle",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "hasFocusTrap": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Enables focus trap functionality within Drawer.",
        "name": "hasFocusTrap",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "heading": {
        "defaultValue": null,
        "description": "Text for the Drawer heading. Required because the `heading` will be focused on mount.",
        "name": "heading",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "headingId": {
        "defaultValue": null,
        "description": "A unique `id` to be used on heading element to label multiple instances of Drawer.",
        "name": "headingId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "headingLevel": {
        "defaultValue": {
          "value": "3"
        },
        "description": "Heading type to override default `<h3>`",
        "name": "headingLevel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"2\" | \"1\" | \"3\" | \"4\" | \"5\""
        }
      },
      "headingRef": {
        "defaultValue": null,
        "description": "Ref to heading element",
        "name": "headingRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "MutableRefObject<any>"
        }
      },
      "isHeaderSticky": {
        "defaultValue": null,
        "description": "Enables \"sticky\" position of Drawer header element.",
        "name": "isHeaderSticky",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isFooterSticky": {
        "defaultValue": null,
        "description": "Enables \"sticky\" position of Drawer footer element.",
        "name": "isFooterSticky",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onCloseClick": {
        "defaultValue": null,
        "description": "",
        "name": "onCloseClick",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element>) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "A link that triggers the visibility of a drawer",
    "displayName": "DrawerToggle",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Label text or HTML\nDrawerToggle content.",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/DrawerToggle.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root button element.\nAdditional classes for the toggle button anchor element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/DrawerToggle.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "href": {
        "defaultValue": null,
        "description": "When provided, the root component will render as an `<a>` element\nrather than `button`.",
        "name": "href",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "Access a reference to the `button` or `a` element",
        "name": "inputRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ButtonRef"
        }
      },
      "isAlternate": {
        "defaultValue": null,
        "description": "Applies the alternate color to a Button. By default, Button\nuses the `main` color.",
        "name": "isAlternate",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Returns the [`SyntheticEvent`](https://facebook.github.io/react/docs/events.html).\nNot called when the Button is disabled.",
        "name": "onClick",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onDark": {
        "defaultValue": null,
        "description": "Defines a color palette best used when Button is placed on a dark\nbackground-color. By default, Button uses a light color palette.",
        "name": "onDark",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ButtonSize"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Button [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) attribute",
        "name": "type",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"button\" | \"submit\" | \"reset\""
        }
      },
      "variation": {
        "defaultValue": null,
        "description": "A string corresponding to Button variation classes.",
        "name": "variation",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ButtonVariation"
        }
      },
      "analytics": {
        "defaultValue": null,
        "description": "Analytics events tracking is enabled by default. Set this value to `false` to\ndisable tracking for this component instance.",
        "name": "analytics",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "analyticsLabelOverride": {
        "defaultValue": null,
        "description": "An override for the dynamic content sent to analytics services. By default this\ncontent comes from the heading.\n\nIn cases where this component’s heading may contain **sensitive information**,\nuse this prop to override what is sent to analytics.",
        "name": "analyticsLabelOverride",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "analyticsEventTypeOverride": {
        "defaultValue": null,
        "description": "If you need the `event_type` to be overridden for your use case, you can provide\nan alternate string here. Suggested values can be found in the EventType enum.",
        "name": "analyticsEventTypeOverride",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onAnalyticsEvent": {
        "defaultValue": null,
        "description": "Optional callback that will intercept analytics events for this component.\nIf none is specified, the design system will use the default analytics\nfunction, which can be overwritten globally with `setDefaultAnalyticsFunction`.",
        "name": "onAnalyticsEvent",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: AnalyticsEvent) => void"
        }
      },
      "analyticsParentHeading": {
        "defaultValue": null,
        "description": "If needed for analytics, pass heading text of parent component of button.",
        "name": "analyticsParentHeading",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsParentDataProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsParentDataProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "analyticsParentType": {
        "defaultValue": null,
        "description": "If needed for analytics, pass type of parent component of button.",
        "name": "analyticsParentType",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsParentDataProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsParentDataProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "drawerOpen": {
        "defaultValue": null,
        "description": "Determines if Drawer is open or closed.\nThis value is used to re-focus the toggle that opened the drawer when the drawer closes.",
        "name": "drawerOpen",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/DrawerToggle.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Adds `display: inline` to the DrawerToggle.",
        "name": "inline",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/DrawerToggle.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showDrawer": {
        "defaultValue": null,
        "description": "This function is called with an id that the toggle generates.\nIt can be used in implementing the Drawer for keeping track of which drawer the toggle controls.",
        "name": "showDrawer",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/DrawerToggle.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(string: any) => any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Dropdown",
    "methods": [],
    "props": {
      "ariaLabel": {
        "defaultValue": null,
        "description": "Adds `aria-label` attribute. When using `aria-label`, `label` should be empty string.",
        "name": "ariaLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Used to define custom dropdown options (i.e. option groups). When using the `children` prop, `options` should be an empty list.",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          },
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Sets the initial selected state. Use this for an uncontrolled component;\notherwise, use the `value` property.",
        "name": "defaultValue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DropdownDefaultValue"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables the entire field.",
        "name": "disabled",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fieldClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the select element",
        "name": "fieldClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autoFocus": {
        "defaultValue": null,
        "description": "Sets the focus on the select during the first mount",
        "name": "autoFocus",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique ID to be used for the `select` element. If one isn't provided, a unique ID will be generated.  /**\nAdditional hint text to display",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "Access a reference to the `select` element",
        "name": "inputRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "Applies the \"inverse\" UI theme",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "The field's `name` attribute",
        "name": "name",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "options": {
        "defaultValue": null,
        "description": "The list of options to be rendered. Provide an empty list if using custom options via the `children` prop.",
        "name": "options",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": true,
        "type": {
          "name": "DropdownOptions[]"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "",
        "name": "onBlur",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "requirementLabel": {
        "defaultValue": null,
        "description": "Text showing the requirement (\"Required\", \"Optional\", etc.). See [Required and Optional Fields]({{root}}/guidelines/forms/#required-and-optional-fields).",
        "name": "requirementLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Sets the max-width of the input either to `'small'` or `'medium'`.",
        "name": "size",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DropdownSize"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Sets the field's `value`. Use this in combination with `onChange`\nfor a controlled component; otherwise, set `defaultValue`.",
        "name": "value",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
          "name": "BaseDropdownProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Dropdown/Dropdown.tsx",
            "name": "BaseDropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DropdownValue"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label for the field.",
        "name": "label",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelId": {
        "defaultValue": null,
        "description": "A unique `id` to be used on the field label. If one isn't provided, a unique ID\nwill be generated.",
        "name": "labelId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "Enable the error state by providing an error message.",
        "name": "errorMessage",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorMessageClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the error message",
        "name": "errorMessageClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "The ID of the error message applied to this field.",
        "name": "errorId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "hint": {
        "defaultValue": null,
        "description": "Additional hint text to display",
        "name": "hint",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "textClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the label text.",
        "name": "textClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorPlacement": {
        "defaultValue": null,
        "description": "Location of the error message relative to the field input",
        "name": "errorPlacement",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"bottom\""
        }
      },
      "labelClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the field label",
        "name": "labelClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "FilterChip",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id for filter chip button. If not provided, a unique id will be automatically generated and used.",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FilterChip/FilterChip.tsx",
          "name": "FilterChipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FilterChip/FilterChip.tsx",
            "name": "FilterChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class to be applied to the outer `<div>` that contains filter chip button.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FilterChip/FilterChip.tsx",
          "name": "FilterChipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FilterChip/FilterChip.tsx",
            "name": "FilterChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Text for the filter chip.",
        "name": "label",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FilterChip/FilterChip.tsx",
          "name": "FilterChipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FilterChip/FilterChip.tsx",
            "name": "FilterChipProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "ariaClearLabel": {
        "defaultValue": null,
        "description": "Labels filter action, i.e., \"Remove.\" For screenreader support.",
        "name": "ariaClearLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FilterChip/FilterChip.tsx",
          "name": "FilterChipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FilterChip/FilterChip.tsx",
            "name": "FilterChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onDelete": {
        "defaultValue": null,
        "description": "Function to call when filter chip is dismissed.",
        "name": "onDelete",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FilterChip/FilterChip.tsx",
          "name": "FilterChipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FilterChip/FilterChip.tsx",
            "name": "FilterChipProps"
          }
        ],
        "required": true,
        "type": {
          "name": "() => void"
        }
      },
      "useAlternateIcon": {
        "defaultValue": null,
        "description": "Use alternate thinner close icon in place of standard.",
        "name": "useAlternateIcon",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FilterChip/FilterChip.tsx",
          "name": "FilterChipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FilterChip/FilterChip.tsx",
            "name": "FilterChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Sets the size of the chip to larger version.",
        "name": "size",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FilterChip/FilterChip.tsx",
          "name": "FilterChipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FilterChip/FilterChip.tsx",
            "name": "FilterChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"big\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "FormLabel",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Label text or HTML.",
        "name": "children",
        "parent": {
          "fileName": "design-system/node_modules/@types/react/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          },
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          },
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique `id` for the label element. Useful for referencing the label from\nother components with `aria-describedby`.",
        "name": "id",
        "parent": {
          "fileName": "design-system/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "component": {
        "defaultValue": {
          "value": "label"
        },
        "description": "The root HTML element used to render the label",
        "name": "component",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "FormLabelComponent"
        }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "Enable the error state by providing an error message.",
        "name": "errorMessage",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorMessageClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the error message",
        "name": "errorMessageClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "The ID of the error message applied to this field.",
        "name": "errorId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fieldId": {
        "defaultValue": null,
        "description": "The ID of the field this label is for. This is used for the label's `for`\nattribute and any related ARIA attributes, such as for the error message.",
        "name": "fieldId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "hint": {
        "defaultValue": null,
        "description": "Additional hint text to display",
        "name": "hint",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "Set to `true` to apply the \"inverse\" theme",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "requirementLabel": {
        "defaultValue": null,
        "description": "Text showing the requirement (ie. \"Optional\", or \"Required\").\nIn most cases, this should be used to indicate which fields are optional.\nSee the [form guidelines]({{root}}/guidelines/forms/) for more info.",
        "name": "requirementLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "textClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the label text.",
        "name": "textClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "This hook contains business logic for how an input field relates to its label\nand wrapping container element. It takes a component's props and generates\nthe specialized set of props for its label, field, wrapper element, and\npossible detached \"bottom error\". While the order and structure of those\nelements are different between components and are specific to their\nimplementation, much of the logic for prop/attribute generation is consistent\nbetween components. The hook will return the relevant information as\nproperties of an object:\n\n  - labelProps:   Props to be applied to a `FormLabel` (where we get the name)\n  - fieldProps:   Props to be applied to the field (a.k.a., the input)\n  - wrapperProps: Props to be applied to the wrapping element\n  - bottomError:  A rendered React element representing a bottom-placed error\n  - errorId:      The id (string) of the error-message element, in case we\n                  need to reference it (currently only necessary to support\n                  the FormControl component, which this hook aims to replace)\n\nNote that while it's helpful now to abstract away this logic behind a shared\nhook, that may not always be the case. The first step in creating this hook\nwas to allow an alternative to `FormControl` that allowed for more freedom in\nhow the component's individual elements were structured at to get rid of the\ndichotomy it imposes on components where their implementation must be split\nbetween an inner and outer component.",
    "displayName": "useFormLabel",
    "methods": [],
    "props": {
      "labelComponent": {
        "defaultValue": null,
        "description": "The root HTML element used to render the field label",
        "name": "labelComponent",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "UseFormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "UseFormLabelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "\"label\" | \"legend\""
        }
      },
      "wrapperIsFieldset": {
        "defaultValue": null,
        "description": "",
        "name": "wrapperIsFieldset",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "UseFormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "UseFormLabelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorPlacement": {
        "defaultValue": null,
        "description": "Location of the error message relative to the field input",
        "name": "errorPlacement",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"bottom\""
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique `id` for the field element. Useful for referencing the field from\nother components with `aria-describedby`.",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label for the field.",
        "name": "label",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the field label",
        "name": "labelClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "labelId": {
        "defaultValue": null,
        "description": "A unique `id` to be used on the field label. If one isn't provided, a unique ID\nwill be generated.",
        "name": "labelId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "Enable the error state by providing an error message.",
        "name": "errorMessage",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorMessageClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the error message",
        "name": "errorMessageClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "The ID of the error message applied to this field.",
        "name": "errorId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "hint": {
        "defaultValue": null,
        "description": "Additional hint text to display",
        "name": "hint",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "Set to `true` to apply the \"inverse\" theme",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "requirementLabel": {
        "defaultValue": null,
        "description": "Text showing the requirement (ie. \"Optional\", or \"Required\").\nIn most cases, this should be used to indicate which fields are optional.\nSee the [form guidelines]({{root}}/guidelines/forms/) for more info.",
        "name": "requirementLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "textClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the label text.",
        "name": "textClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "HelpDrawer",
    "methods": [],
    "props": {
      "ariaLabel": {
        "defaultValue": null,
        "description": "Gives more context to screen readers on the Drawer close button.",
        "name": "ariaLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeButtonText": {
        "defaultValue": null,
        "description": "",
        "name": "closeButtonText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "footerBody": {
        "defaultValue": null,
        "description": "",
        "name": "footerBody",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "footerTitle": {
        "defaultValue": null,
        "description": "",
        "name": "footerTitle",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "hasFocusTrap": {
        "defaultValue": null,
        "description": "Enables focus trap functionality within Drawer.",
        "name": "hasFocusTrap",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "heading": {
        "defaultValue": null,
        "description": "Text for the Drawer heading. Required because the `heading` will be focused on mount.",
        "name": "heading",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "headingId": {
        "defaultValue": null,
        "description": "A unique `id` to be used on heading element to label multiple instances of Drawer.",
        "name": "headingId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "headingLevel": {
        "defaultValue": null,
        "description": "Heading type to override default `<h3>`",
        "name": "headingLevel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"2\" | \"1\" | \"3\" | \"4\" | \"5\""
        }
      },
      "headingRef": {
        "defaultValue": null,
        "description": "Ref to heading element",
        "name": "headingRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "MutableRefObject<any>"
        }
      },
      "isHeaderSticky": {
        "defaultValue": null,
        "description": "Enables \"sticky\" position of Drawer header element.",
        "name": "isHeaderSticky",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isFooterSticky": {
        "defaultValue": null,
        "description": "Enables \"sticky\" position of Drawer footer element.",
        "name": "isFooterSticky",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onCloseClick": {
        "defaultValue": null,
        "description": "",
        "name": "onCloseClick",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element>) => void"
        }
      },
      "analytics": {
        "defaultValue": null,
        "description": "Analytics events tracking is enabled by default. Set this value to `false` to\ndisable tracking for this component instance.",
        "name": "analytics",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "analyticsLabelOverride": {
        "defaultValue": null,
        "description": "An override for the dynamic content sent to analytics services. By default this\ncontent comes from the heading.\n\nIn cases where this component’s heading may contain **sensitive information**,\nuse this prop to override what is sent to analytics.",
        "name": "analyticsLabelOverride",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "analyticsEventTypeOverride": {
        "defaultValue": null,
        "description": "If you need the `event_type` to be overridden for your use case, you can provide\nan alternate string here. Suggested values can be found in the EventType enum.",
        "name": "analyticsEventTypeOverride",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onAnalyticsEvent": {
        "defaultValue": null,
        "description": "Optional callback that will intercept analytics events for this component.\nIf none is specified, the design system will use the default analytics\nfunction, which can be overwritten globally with `setDefaultAnalyticsFunction`.",
        "name": "onAnalyticsEvent",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: AnalyticsEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "A link that triggers the visibility of a help drawer",
    "displayName": "HelpDrawerToggle",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Label text or HTML\nDrawerToggle content.",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/DrawerToggle.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root button element.\nAdditional classes for the toggle button anchor element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/DrawerToggle.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Returns the [`SyntheticEvent`](https://facebook.github.io/react/docs/events.html).\nNot called when the Button is disabled.",
        "name": "onClick",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "variation": {
        "defaultValue": null,
        "description": "A string corresponding to Button variation classes.",
        "name": "variation",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ButtonVariation"
        }
      },
      "analytics": {
        "defaultValue": null,
        "description": "Analytics events tracking is enabled by default. Set this value to `false` to\ndisable tracking for this component instance.",
        "name": "analytics",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "analyticsLabelOverride": {
        "defaultValue": null,
        "description": "An override for the dynamic content sent to analytics services. By default this\ncontent comes from the heading.\n\nIn cases where this component’s heading may contain **sensitive information**,\nuse this prop to override what is sent to analytics.",
        "name": "analyticsLabelOverride",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "analyticsEventTypeOverride": {
        "defaultValue": null,
        "description": "If you need the `event_type` to be overridden for your use case, you can provide\nan alternate string here. Suggested values can be found in the EventType enum.",
        "name": "analyticsEventTypeOverride",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onAnalyticsEvent": {
        "defaultValue": null,
        "description": "Optional callback that will intercept analytics events for this component.\nIf none is specified, the design system will use the default analytics\nfunction, which can be overwritten globally with `setDefaultAnalyticsFunction`.",
        "name": "onAnalyticsEvent",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsOverrideProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsOverrideProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: AnalyticsEvent) => void"
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Adds `display: inline` to the DrawerToggle.",
        "name": "inline",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/DrawerToggle.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "Access a reference to the `button` or `a` element",
        "name": "inputRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ButtonRef"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ButtonSize"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Button [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) attribute",
        "name": "type",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"button\" | \"submit\" | \"reset\""
        }
      },
      "href": {
        "defaultValue": null,
        "description": "When provided, the root component will render as an `<a>` element\nrather than `button`.",
        "name": "href",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "isAlternate": {
        "defaultValue": null,
        "description": "Applies the alternate color to a Button. By default, Button\nuses the `main` color.",
        "name": "isAlternate",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onDark": {
        "defaultValue": null,
        "description": "Defines a color palette best used when Button is placed on a dark\nbackground-color. By default, Button uses a light color palette.",
        "name": "onDark",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
          "name": "CommonButtonProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Button/Button.tsx",
            "name": "CommonButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "analyticsParentHeading": {
        "defaultValue": null,
        "description": "If needed for analytics, pass heading text of parent component of button.",
        "name": "analyticsParentHeading",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsParentDataProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsParentDataProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "analyticsParentType": {
        "defaultValue": null,
        "description": "If needed for analytics, pass type of parent component of button.",
        "name": "analyticsParentType",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
          "name": "AnalyticsParentDataProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/types.ts",
            "name": "AnalyticsParentDataProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "showDrawer": {
        "defaultValue": null,
        "description": "This function is called with an id that the toggle generates.\nIt can be used in implementing the Drawer for keeping track of which drawer the toggle controls.",
        "name": "showDrawer",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Drawer/DrawerToggle.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(string: any) => any"
        }
      },
      "helpDrawerOpen": {
        "defaultValue": null,
        "description": "Whether or not the Help Drawer controlled by this toggle is open or closed.\nThis value is used to re-focus the toggle that opened the drawer when the drawer closes.",
        "name": "helpDrawerOpen",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/HelpDrawer/HelpDrawerToggle.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon to be included at the end of the toggle's text",
        "name": "icon",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/HelpDrawer/HelpDrawerToggle.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "IdleTimeout",
    "methods": [],
    "props": {
      "closeButtonText": {
        "defaultValue": {
          "value": "Close"
        },
        "description": "The text for the dialog's 'close' button",
        "name": "closeButtonText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
          "name": "IdleTimeoutProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
            "name": "IdleTimeoutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "continueSessionText": {
        "defaultValue": {
          "value": "Continue session"
        },
        "description": "The text for the 'continue session' button in warning dialog.",
        "name": "continueSessionText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
          "name": "IdleTimeoutProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
            "name": "IdleTimeoutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "heading": {
        "defaultValue": {
          "value": "Are you still there?"
        },
        "description": "The heading text for the warning dialog.",
        "name": "heading",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
          "name": "IdleTimeoutProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
            "name": "IdleTimeoutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "endSessionButtonText": {
        "defaultValue": {
          "value": "Logout"
        },
        "description": "The text for the button that ends the session in warning dialog.",
        "name": "endSessionButtonText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
          "name": "IdleTimeoutProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
            "name": "IdleTimeoutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "endSessionUrl": {
        "defaultValue": {
          "value": "/logout"
        },
        "description": "The URL to direct to when the user intentionally ends the session.",
        "name": "endSessionUrl",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
          "name": "IdleTimeoutProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
            "name": "IdleTimeoutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "formatMessage": {
        "defaultValue": {
          "value": "(timeTilTimeout: number): React.ReactNode => {\n  const unitOfTime = timeTilTimeout === 1 ? 'minute' : 'minutes';\n\n  return (\n    <p>\n      You&apos;ve been inactive for a while.\n      <br />\n      Your session will end in{' '}\n      <strong>\n        {timeTilTimeout} {unitOfTime}\n      </strong>\n      .\n      <br />\n      <br />\n      Select &quot;Continue session&quot; below if you want more time.\n    </p>\n  );\n}"
        },
        "description": "A formatting function that returns the string to be used in the warning modal.\nThe formatting function is provided the timeTilTimeout (in minutes).",
        "name": "formatMessage",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
          "name": "IdleTimeoutProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
            "name": "IdleTimeoutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(timeTilTimeout: number) => ReactNode"
        }
      },
      "onSessionContinue": {
        "defaultValue": null,
        "description": "Optional function that is called when the user chooses to keep the session alive. This function is called by the 'continue session' button or the 'close' button.\nThe IdleTimeout component will reset the countdown internally.",
        "name": "onSessionContinue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
          "name": "IdleTimeoutProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
            "name": "IdleTimeoutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onSessionForcedEnd": {
        "defaultValue": null,
        "description": "Optional function that is called when the session is manually ended by user.\nIf not provided, the behavior of `onTimeout` will be used.",
        "name": "onSessionForcedEnd",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
          "name": "IdleTimeoutProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
            "name": "IdleTimeoutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onTimeout": {
        "defaultValue": null,
        "description": "Function that is called when the timeout countdown reaches zero.",
        "name": "onTimeout",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
          "name": "IdleTimeoutProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
            "name": "IdleTimeoutProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "showSessionEndButton": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Describes if the button to manually end session should be shown in the warning dialog.",
        "name": "showSessionEndButton",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
          "name": "IdleTimeoutProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
            "name": "IdleTimeoutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "timeToTimeout": {
        "defaultValue": null,
        "description": "Defines the amount of minutes of idle activity until the session is timed out",
        "name": "timeToTimeout",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
          "name": "IdleTimeoutProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
            "name": "IdleTimeoutProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "timeToWarning": {
        "defaultValue": null,
        "description": "Defines the amount of minutes of idle activity that will trigger the warning message.",
        "name": "timeToWarning",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
          "name": "IdleTimeoutProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeout.tsx",
            "name": "IdleTimeoutProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "IdleTimeoutDialog",
    "methods": [],
    "props": {
      "closeButtonText": {
        "defaultValue": null,
        "description": "The text for the dialog's 'close' button",
        "name": "closeButtonText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
          "name": "IdleTimeoutDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
            "name": "IdleTimeoutDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "continueSessionText": {
        "defaultValue": null,
        "description": "The text for the 'continue session' button in warning dialog.",
        "name": "continueSessionText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
          "name": "IdleTimeoutDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
            "name": "IdleTimeoutDialogProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "heading": {
        "defaultValue": null,
        "description": "The heading text for the warning dialog.",
        "name": "heading",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
          "name": "IdleTimeoutDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
            "name": "IdleTimeoutDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "endSessionButtonText": {
        "defaultValue": null,
        "description": "The text for the button that ends the session in warning dialog.",
        "name": "endSessionButtonText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
          "name": "IdleTimeoutDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
            "name": "IdleTimeoutDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "endSessionUrl": {
        "defaultValue": null,
        "description": "",
        "name": "endSessionUrl",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
          "name": "IdleTimeoutDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
            "name": "IdleTimeoutDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "message": {
        "defaultValue": null,
        "description": "The message text for the warning dialog.\nNote that using the token `<timeToTimeout>` will be replaced in the message text with the number of minutes until timeout.",
        "name": "message",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
          "name": "IdleTimeoutDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
            "name": "IdleTimeoutDialogProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Function that is called when the user select the 'close' button for the dialog",
        "name": "onClose",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
          "name": "IdleTimeoutDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
            "name": "IdleTimeoutDialogProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onSessionContinue": {
        "defaultValue": null,
        "description": "Function that is called when the user chooses to keep the session alive.\nThe IdleTimeout component will reset the countdown internally.",
        "name": "onSessionContinue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
          "name": "IdleTimeoutDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
            "name": "IdleTimeoutDialogProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onSessionForcedEnd": {
        "defaultValue": null,
        "description": "Optional function that is called when the session is manually ended by user.\nIf not provided, the behavior of `onTimeout` will be used.",
        "name": "onSessionForcedEnd",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
          "name": "IdleTimeoutDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
            "name": "IdleTimeoutDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "showSessionEndButton": {
        "defaultValue": null,
        "description": "Describes if the button to manually end session should be shown",
        "name": "showSessionEndButton",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
          "name": "IdleTimeoutDialogProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/IdleTimeout/IdleTimeoutDialog.tsx",
            "name": "IdleTimeoutDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "InlineError",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/InlineError/InlineError.tsx",
          "name": "InlineErrorProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/InlineError/InlineError.tsx",
            "name": "InlineErrorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/InlineError/InlineError.tsx",
          "name": "InlineErrorProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/InlineError/InlineError.tsx",
            "name": "InlineErrorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/InlineError/InlineError.tsx",
          "name": "InlineErrorProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/InlineError/InlineError.tsx",
            "name": "InlineErrorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "MonthPicker",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": null,
        "description": "The `input` field's `name` attribute",
        "name": "name",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "@deprecated - This is now deprecated in favor of the global language setting. See guides/internationalization\n@hide-prop [Deprecated]\n\nA [BCP 47 language tag](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation)\nfor month name localization. For example: Passing `es-US` as a value\nwill render month names in Spanish.",
        "name": "locale",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "buttonVariation": {
        "defaultValue": null,
        "description": "Variation string to be applied to buttons. See [Button component]({{root}}/components/button/#components.button.react)",
        "name": "buttonVariation",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ButtonVariation"
        }
      },
      "disabledMonths": {
        "defaultValue": null,
        "description": "Array of month numbers, where `1` is January, and any month included\nis disabled for selection.",
        "name": "disabledMonths",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number[]"
        }
      },
      "selectedMonths": {
        "defaultValue": null,
        "description": "Array of month numbers, where `1` is January, and any month included\nis selected. This will render a read-only field. If the field should\nbe mutable, use `defaultSelectedMonths`.",
        "name": "selectedMonths",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number[]"
        }
      },
      "defaultSelectedMonths": {
        "defaultValue": null,
        "description": "Array of month numbers, where `1` is January, and any month included\nis selected by default. Sets the initial checked state for the 12 month\ncheckboxes. Use this for an uncontrolled component; otherwise, use the\n`selectedMonths` property.",
        "name": "defaultSelectedMonths",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number[]"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback function that's invoked when a month's checked state is changed.\nNote: This callback is not called when a month is selected or deselected\nvia the \"Select all\" or \"Clear all\" buttons – use the `onSelectAll` and\n`onClearAll` event handlers for those instances.",
        "name": "onChange",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: ChangeEvent<HTMLInputElement>) => any"
        }
      },
      "onSelectAll": {
        "defaultValue": null,
        "description": "",
        "name": "onSelectAll",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => any"
        }
      },
      "onClearAll": {
        "defaultValue": null,
        "description": "",
        "name": "onClearAll",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => any"
        }
      },
      "selectAllText": {
        "defaultValue": null,
        "description": "The text for the \"Select all\" button for internationalization",
        "name": "selectAllText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearAllText": {
        "defaultValue": null,
        "description": "The text for the \"Clear all\" button for internationalization",
        "name": "clearAllText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/MonthPicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorPlacement": {
        "defaultValue": null,
        "description": "Location of the error message relative to the field input",
        "name": "errorPlacement",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"bottom\""
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique `id` for the field element. Useful for referencing the field from\nother components with `aria-describedby`.",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label for the field.",
        "name": "label",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the field label",
        "name": "labelClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "labelId": {
        "defaultValue": null,
        "description": "A unique `id` to be used on the field label. If one isn't provided, a unique ID\nwill be generated.",
        "name": "labelId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "Enable the error state by providing an error message.",
        "name": "errorMessage",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorMessageClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the error message",
        "name": "errorMessageClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "The ID of the error message applied to this field.",
        "name": "errorId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "hint": {
        "defaultValue": null,
        "description": "Additional hint text to display",
        "name": "hint",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "Set to `true` to apply the \"inverse\" theme",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "requirementLabel": {
        "defaultValue": null,
        "description": "Text showing the requirement (ie. \"Optional\", or \"Required\").\nIn most cases, this should be used to indicate which fields are optional.\nSee the [form guidelines]({{root}}/guidelines/forms/) for more info.",
        "name": "requirementLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "textClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the label text.",
        "name": "textClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {
      "param": "locale locale for generating month names\nshort whether to return short month names",
      "return": "array of month names"
    },
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "Generates an array of month names according to the given or default locale",
    "displayName": "getMonthNames",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Pagination",
    "methods": [],
    "props": {
      "ariaLabel": {
        "defaultValue": null,
        "description": "Defines `aria-label` on wrapping Pagination element. Since this exists on a `<nav>` element, the word \"navigation\" should be omitted from this label. Optional.",
        "name": "ariaLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class to be applied to parent `<nav>` element of Pagination component. Optional.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "compact": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Renders compact layout. Optional.",
        "name": "compact",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "currentPage": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Defines active page in Pagination. Optional.",
        "name": "currentPage",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isNavigationHidden": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines if navigation is hidden when current page is the first or last of Pagination page set. Optional.",
        "name": "isNavigationHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onPageChange": {
        "defaultValue": null,
        "description": "A callback function used to handle state changes.",
        "name": "onPageChange",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(evt: MouseEvent<Element, MouseEvent>, page: number) => void"
        }
      },
      "renderHref": {
        "defaultValue": null,
        "description": "Defines application-specific routing in url for links.",
        "name": "renderHref",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(page: number) => string"
        }
      },
      "startLabelText": {
        "defaultValue": null,
        "description": "Sets custom label on start navigation. Added for language support. Optional.",
        "name": "startLabelText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "startAriaLabel": {
        "defaultValue": null,
        "description": "Sets custom ARIA label on start navigation. Added for language support. Label structure should be the equivalent of: Previous Page. Optional.",
        "name": "startAriaLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "endLabelText": {
        "defaultValue": null,
        "description": "Sets custom label on end navigation. Added for language support. Optional.",
        "name": "endLabelText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "endAriaLabel": {
        "defaultValue": null,
        "description": "Sets custom ARIA label on end navigation. Added for language support. Label structure should be the equivalent of: Next Page. Optional.",
        "name": "endAriaLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "totalPages": {
        "defaultValue": null,
        "description": "Sets total number of pages in Pagination component.",
        "name": "totalPages",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Review",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "`Review` component's body content.",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
          "name": "ReviewProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
            "name": "ReviewProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
          "name": "ReviewProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
            "name": "ReviewProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "editAriaLabel": {
        "defaultValue": null,
        "description": "Optional label to give screenreaders longer, more descriptive text to\nexplain the context of an edit link.",
        "name": "editAriaLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
          "name": "ReviewProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
            "name": "ReviewProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "editContent": {
        "defaultValue": null,
        "description": "An optional node in place of the edit link. If this defined, no edit link will be shown.",
        "name": "editContent",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
          "name": "ReviewProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
            "name": "ReviewProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "editHref": {
        "defaultValue": null,
        "description": "Href for the edit link. If this is undefined, no edit link will be shown.",
        "name": "editHref",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
          "name": "ReviewProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
            "name": "ReviewProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "editText": {
        "defaultValue": null,
        "description": "",
        "name": "editText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
          "name": "ReviewProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
            "name": "ReviewProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "heading": {
        "defaultValue": null,
        "description": "",
        "name": "heading",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
          "name": "ReviewProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
            "name": "ReviewProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "headingLevel": {
        "defaultValue": {
          "value": "3"
        },
        "description": "Heading type to override default `<h3>`.",
        "name": "headingLevel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
          "name": "ReviewProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
            "name": "ReviewProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReviewHeadingLevel"
        }
      },
      "onEditClick": {
        "defaultValue": null,
        "description": "An optional function that is executed on edit link click. The event and\nprops.editHref value are passed to this function.",
        "name": "onEditClick",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
          "name": "ReviewProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Review/Review.tsx",
            "name": "ReviewProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "SkipNav",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Skip nav label",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/SkipNav/SkipNav.tsx",
          "name": "SkipNavProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/SkipNav/SkipNav.tsx",
            "name": "SkipNavProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "href": {
        "defaultValue": null,
        "description": "The anchor or target for the link (where the link will jump the user to)",
        "name": "href",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/SkipNav/SkipNav.tsx",
          "name": "SkipNavProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/SkipNav/SkipNav.tsx",
            "name": "SkipNavProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "An onClick handler used for manually setting focus on the content.\nSometimes it's necessary to manually set focus, like when an app uses hash\nrouting and element-id links will be mistaken for routes.",
        "name": "onClick",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/SkipNav/SkipNav.tsx",
          "name": "SkipNavProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/SkipNav/SkipNav.tsx",
            "name": "SkipNavProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Spinner",
    "methods": [],
    "props": {
      "aria-valuetext": {
        "defaultValue": null,
        "description": "The text announced to screen readers",
        "name": "aria-valuetext",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Spinner/Spinner.tsx",
          "name": "SpinnerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Spinner/Spinner.tsx",
            "name": "SpinnerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the spinner element.\nUseful for adding utility classes.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Spinner/Spinner.tsx",
          "name": "SpinnerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Spinner/Spinner.tsx",
            "name": "SpinnerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "Applies the inverse theme styling",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Spinner/Spinner.tsx",
          "name": "SpinnerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Spinner/Spinner.tsx",
            "name": "SpinnerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "filled": {
        "defaultValue": null,
        "description": "Adds a background behind the spinner for extra contrast",
        "name": "filled",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Spinner/Spinner.tsx",
          "name": "SpinnerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Spinner/Spinner.tsx",
            "name": "SpinnerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "role": {
        "defaultValue": {
          "value": "status"
        },
        "description": "Landmark role so the spinner can receive keyboard focus",
        "name": "role",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Spinner/Spinner.tsx",
          "name": "SpinnerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Spinner/Spinner.tsx",
            "name": "SpinnerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Smaller or larger variant",
        "name": "size",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Spinner/Spinner.tsx",
          "name": "SpinnerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Spinner/Spinner.tsx",
            "name": "SpinnerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SpinnerSize"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "StepList",
    "methods": [],
    "props": {
      "steps": {
        "defaultValue": null,
        "description": "An array of [step objects]({{root}}/patterns/step-list/#patterns.step-list.step-object) that contain\ntext, state, [link/button URLs]({{root}}/patterns/step-list/#patterns.step-list.buttons) and other info needed to render steps.",
        "name": "steps",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
          "name": "StepListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
            "name": "StepListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "StepObject[]"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "When provided, this will render the passed in component for all link elements. This is useful when\nintegrating with React Router's `<Link>` or using your own custom component.\nIf more specific control is needed, each `step` object also accepts a `component` prop.",
        "name": "component",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
          "name": "StepListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
            "name": "StepListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "keyof IntrinsicElements | ComponentType<StepLinkComponentProps>"
        }
      },
      "showSubSubSteps": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether or not to render a substep's substeps.",
        "name": "showSubSubSteps",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
          "name": "StepListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
            "name": "StepListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onStepLinkClick": {
        "defaultValue": null,
        "description": "Function called when a step's Edit, Start, or Resume button/link is\nclicked. The step's `href` property will be passed as a parameter.",
        "name": "onStepLinkClick",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
          "name": "StepListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
            "name": "StepListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(href?: string, stepId?: string) => any"
        }
      },
      "completedText": {
        "defaultValue": {
          "value": "Completed"
        },
        "description": "",
        "name": "completedText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
          "name": "StepListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
            "name": "StepListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "editText": {
        "defaultValue": {
          "value": "Edit"
        },
        "description": "",
        "name": "editText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
          "name": "StepListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
            "name": "StepListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "resumeText": {
        "defaultValue": {
          "value": "Resume"
        },
        "description": "",
        "name": "resumeText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
          "name": "StepListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
            "name": "StepListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "startText": {
        "defaultValue": {
          "value": "Start"
        },
        "description": "",
        "name": "startText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
          "name": "StepListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
            "name": "StepListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "actionsLabelText": {
        "defaultValue": {
          "value": "Primary actions for %{step}"
        },
        "description": "A template string for the aria-label describing a step's actions where\nthe substring `%{step}` is replaced with that step's `heading`.",
        "name": "actionsLabelText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
          "name": "StepListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
            "name": "StepListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "substepsLabelText": {
        "defaultValue": {
          "value": "Secondary actions for %{step}"
        },
        "description": "A template string for the aria-label describing a step's substeps where\nthe substring `%{step}` is replaced with that step's `heading`.",
        "name": "substepsLabelText",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
          "name": "StepListProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/StepList/StepList.tsx",
            "name": "StepListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Table",
    "methods": [],
    "props": {
      "borderless": {
        "defaultValue": null,
        "description": "Applies the borderless variation of the table.",
        "name": "borderless",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The table contents, usually `TableCaption`, `TableHead` and `TableBody`.",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
            "name": "TableProps"
          },
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root table element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "compact": {
        "defaultValue": null,
        "description": "Applies the compact variation of the table.",
        "name": "compact",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "scrollable": {
        "defaultValue": null,
        "description": "Applies a horizontal scrollbar and scrollable notice on `TableCaption` when the `Table`'s contents exceed the container width.",
        "name": "scrollable",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "scrollableNotice": {
        "defaultValue": {
          "value": "(\n      <Alert className=\"ds-c-table__scroll-alert\" role=\"status\">\n        <p className=\"ds-c-alert__text\">Scroll using arrow keys to see more</p>\n      </Alert>\n    )"
        },
        "description": "Additional text or content to display when the horizontal scrollbar is visible to give the user notice of the scroll behavior.\nThis prop will only be used when the `Table` `scrollable` prop is set and the table width is wider than the viewport.",
        "name": "scrollableNotice",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "stackable": {
        "defaultValue": null,
        "description": "A stackable variation of the table.\nWhen `stackable` is set, `id` or `headers` prop is required in `Table`",
        "name": "stackable",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "stackableBreakpoint": {
        "defaultValue": {
          "value": "sm"
        },
        "description": "Applies responsive styles to vertically stacked rows at different viewport sizes.",
        "name": "stackableBreakpoint",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TableStackableBreakpoint"
        }
      },
      "striped": {
        "defaultValue": null,
        "description": "A striped variation of the table.",
        "name": "striped",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "warningDisabled": {
        "defaultValue": null,
        "description": "Disables the warning message on development console when a responsive stackable table cell does not contain an `id` or `headers`.\nIt's recommended that accessibility with screen readers is tested to ensure the stacked table meets the requirement.",
        "name": "warningDisabled",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "TableBody",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The table body contents, usually `TableRow`.",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableBody.tsx",
          "name": "TableBodyProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableBody.tsx",
            "name": "TableBodyProps"
          },
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "TableCaption",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The table caption contents.",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCaption.tsx",
          "name": "TableCaptionProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCaption.tsx",
            "name": "TableCaptionProps"
          },
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the caption element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCaption.tsx",
          "name": "TableCaptionProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCaption.tsx",
            "name": "TableCaptionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "_id": {
        "defaultValue": null,
        "description": "@hide-prop This gets passed from the parent `Table` component when the table `scrollable` prop is set.",
        "name": "_id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCaption.tsx",
          "name": "TableCaptionProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCaption.tsx",
            "name": "TableCaptionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "_scrollActive": {
        "defaultValue": null,
        "description": "@hide-prop This gets passed from the parent `Table` component when the table `scrollable` prop is set.",
        "name": "_scrollActive",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCaption.tsx",
          "name": "TableCaptionProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCaption.tsx",
            "name": "TableCaptionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "_scrollableNotice": {
        "defaultValue": null,
        "description": "@hide-prop This gets passed from the parent `Table` component when the table `scrollable` prop is set.",
        "name": "_scrollableNotice",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCaption.tsx",
          "name": "TableCaptionProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCaption.tsx",
            "name": "TableCaptionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "TableCell",
    "methods": [],
    "props": {
      "align": {
        "defaultValue": {
          "value": "left"
        },
        "description": "Set the text-align on the table cell content. Options: left, center, right.",
        "name": "align",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
          "name": "TableCellProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
            "name": "TableCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TableCellAlign"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The table cell contents.",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
          "name": "TableCellProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
            "name": "TableCellProps"
          },
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "When provided, this will render the passed in component as the HTML element.\nIf this prop is undefined, it renders a `<th>` element if the parent component is `TableHead`,\notherwise, it renders a `<td>` element.",
        "name": "component",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
          "name": "TableCellProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
            "name": "TableCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TableCellComponent"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the row element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
          "name": "TableCellProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
            "name": "TableCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "headers": {
        "defaultValue": null,
        "description": "`TableCell` must define a `headers` prop for stackable tables with a `<td>` element.\nThe `headers` prop associates header and data cells for screen readers.\n`headers` consist of a list of space-separated ids that each correspond to a `<td>` element.\n[Read more about the headers attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#Attributes).",
        "name": "headers",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
          "name": "TableCellProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
            "name": "TableCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "`TableCell` must define an `id` prop for stackable tables with a `<th>` element.\nThe `id` prop associates header and data cells for screen readers.",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
          "name": "TableCellProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
            "name": "TableCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "scope": {
        "defaultValue": null,
        "description": "If this prop is undefined, the component sets a scope attribute of `col` when the parent\ncomponent is `TableHead` to identify the header cell is a header for a column.",
        "name": "scope",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
          "name": "TableCellProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
            "name": "TableCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TableCellScope"
        }
      },
      "stackedClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the stacked Title element.",
        "name": "stackedClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
          "name": "TableCellProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
            "name": "TableCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "stackedTitle": {
        "defaultValue": null,
        "description": "Table data cell's corresponding header title, this stacked title is displayed as the row header\nwhen a responsive table is vertically stacked.",
        "name": "stackedTitle",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
          "name": "TableCellProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
            "name": "TableCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "_isTableHeadChild": {
        "defaultValue": null,
        "description": "@hide-prop This gets set from the parent `TableHead` component",
        "name": "_isTableHeadChild",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
          "name": "TableCellProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableCell.tsx",
            "name": "TableCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "TableHead",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The table head contents, usually `TableRow`.",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableHead.tsx",
          "name": "TableHeadProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableHead.tsx",
            "name": "TableHeadProps"
          },
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "TableRow",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The table row contents, usually `TableCell`.",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableRow.tsx",
          "name": "TableRowProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableRow.tsx",
            "name": "TableRowProps"
          },
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "_isTableHeadChild": {
        "defaultValue": null,
        "description": "@hide-prop This gets set from the parent `TableHead`",
        "name": "_isTableHeadChild",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Table/TableRow.tsx",
          "name": "TableRowProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Table/TableRow.tsx",
            "name": "TableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Tabs",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Must only contain `TabPanel` components",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "defaultSelectedId": {
        "defaultValue": null,
        "description": "Sets the initial selected `TabPanel` state. If this isn't set, the first\n`TabPanel` will be selected.",
        "name": "defaultSelectedId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback function that's invoked when the selected tab is changed.\n`(selectedId, prevSelectedId) => void`",
        "name": "onChange",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(selectedId: string, prevSelectedId: string) => any"
        }
      },
      "tablistClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the component wrapping the tabs",
        "name": "tablistClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "TabPanel",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique `id`, to be used on the rendered panel element.",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "selected": {
        "defaultValue": {
          "value": "false"
        },
        "description": "",
        "name": "selected",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "tab": {
        "defaultValue": null,
        "description": "The associated tab's label. Only applicable when the panel is a\nchild of `Tabs`.",
        "name": "tab",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "tabClassName": {
        "defaultValue": null,
        "description": "Additional classes for the associated tab. Only applicable when the panel\nis a child of `Tabs`.",
        "name": "tabClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "tabHref": {
        "defaultValue": null,
        "description": "The associated tab's `href`. Only applicable when the panel is a\nchild of `Tabs`.",
        "name": "tabHref",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "tabId": {
        "defaultValue": null,
        "description": "The `id` of the associated `Tab`. Used for the `aria-labelledby` attribute.",
        "name": "tabId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tabs/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "TextField",
    "methods": [],
    "props": {
      "ariaLabel": {
        "defaultValue": null,
        "description": "Apply an `aria-label` to the text field to provide additional\ncontext to assistive devices.",
        "name": "ariaLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Sets the initial value. Use this for an uncontrolled component; otherwise,\nuse the `value` property.",
        "name": "defaultValue",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TextFieldDefaultValue"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fieldClassName": {
        "defaultValue": null,
        "description": "",
        "name": "fieldClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autoFocus": {
        "defaultValue": null,
        "description": "",
        "name": "autoFocus",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique `id` to be used on the text field.",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "Access a reference to the `input` or `textarea` element",
        "name": "inputRef",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "requirementLabel": {
        "defaultValue": null,
        "description": "Text showing the requirement (\"Required\", \"Optional\", etc.). See [Required and Optional Fields]({{root}}/guidelines/forms/#required-and-optional-fields).",
        "name": "requirementLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "Applies the \"inverse\" UI theme",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "labelMask": {
        "defaultValue": null,
        "description": "Applies date format masking to the input value entered\nand renders to a text field above the input.\nPassing `true` to `valueOnly` will return just the\nformatted value entered.",
        "name": "labelMask",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(rawInput: string, valueOnly?: boolean) => string"
        }
      },
      "mask": {
        "defaultValue": null,
        "description": "Apply formatting to the field that's unique to the value\nyou expect to be entered. Depending on the mask, the\nfield's appearance and functionality may be affected.",
        "name": "mask",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TextFieldMask"
        }
      },
      "multiline": {
        "defaultValue": null,
        "description": "Whether or not the text field is a multiline text field",
        "name": "multiline",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "numeric": {
        "defaultValue": null,
        "description": "Sets `inputMode`, `type`, and `pattern` to improve accessibility and consistency for number fields. Use this prop instead of `type=\"number\"`, see [here](https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/) for more information.",
        "name": "numeric",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "",
        "name": "onBlur",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "pattern": {
        "defaultValue": null,
        "description": "@hide-prop HTML `input` [pattern](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefpattern).",
        "name": "pattern",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "rows": {
        "defaultValue": null,
        "description": "Optionally specify the number of visible text lines for the field. Only\napplicable if this is a multiline field.",
        "name": "rows",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TextFieldRows"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Set the max-width of the input either to `'small'` or `'medium'`.",
        "name": "size",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TextFieldSize"
        }
      },
      "type": {
        "defaultValue": {
          "value": "text"
        },
        "description": "HTML `input` [type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#<input>_types) attribute. If you are using `type=number` please use the numeric prop instead.",
        "name": "type",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Sets the input's `value`. Use this in combination with `onChange`\nfor a controlled component; otherwise, set `defaultValue`.",
        "name": "value",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
          "name": "BaseTextFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextField.tsx",
            "name": "BaseTextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TextFieldValue"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root element.",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label for the field.",
        "name": "label",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelId": {
        "defaultValue": null,
        "description": "A unique `id` to be used on the field label. If one isn't provided, a unique ID\nwill be generated.",
        "name": "labelId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "Enable the error state by providing an error message.",
        "name": "errorMessage",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorMessageClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the error message",
        "name": "errorMessageClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "The ID of the error message applied to this field.",
        "name": "errorId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "hint": {
        "defaultValue": null,
        "description": "Additional hint text to display",
        "name": "hint",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "textClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the label text.",
        "name": "textClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
          "name": "FormLabelProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/FormLabel.tsx",
            "name": "FormLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorPlacement": {
        "defaultValue": null,
        "description": "Location of the error message relative to the field input",
        "name": "errorPlacement",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"bottom\""
        }
      },
      "labelClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the field label",
        "name": "labelClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/FormLabel/useFormLabel.tsx",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "`<TextInput>` is an internal component used by `<TextField>`, which wraps it and handles shared form UI like labels, error messages, etc\n`<TextInput>` is also exported for advanced design system use cases, where the internal component can be leveraged to build custom form components\nAs an internal component, it's subject to more breaking changes. Exercise caution using `<TextInput>` outside of those special cases",
    "displayName": "TextInput",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "A unique `id` to be used on the text field.",
        "name": "id",
        "parent": {
          "fileName": "design-system/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "design-system/node_modules/@types/react/index.d.ts",
          "name": "InputHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ChangeEventHandler<HTMLInputElement> & ((...args: any[]) => any)"
        }
      },
      "pattern": {
        "defaultValue": null,
        "description": "@hide-prop HTML `input` [pattern](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefpattern).",
        "name": "pattern",
        "parent": {
          "fileName": "design-system/node_modules/@types/react/index.d.ts",
          "name": "InputHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Sets the initial value. Use this for an uncontrolled component; otherwise,\nuse the `value` property.",
        "name": "defaultValue",
        "parent": {
          "fileName": "design-system/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(string | number | readonly string[]) & TextInputDefaultValue"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "",
        "name": "onBlur",
        "parent": {
          "fileName": "design-system/node_modules/@types/react/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "FocusEventHandler<HTMLInputElement> & ((...args: any[]) => any)"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "design-system/node_modules/@types/react/index.d.ts",
          "name": "InputHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "parent": {
          "fileName": "design-system/node_modules/@types/react/index.d.ts",
          "name": "InputHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "HTML `input` [type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#<input>_types) attribute. If you are using `type=number` please use the numeric prop instead.",
        "name": "type",
        "parent": {
          "fileName": "design-system/node_modules/@types/react/index.d.ts",
          "name": "InputHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "HTMLInputTypeAttribute & string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Sets the input's `value`. Use this in combination with `onChange`\nfor a controlled component; otherwise, set `defaultValue`.",
        "name": "value",
        "parent": {
          "fileName": "design-system/node_modules/@types/react/index.d.ts",
          "name": "InputHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "design-system/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          },
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(string | number | readonly string[]) & TextInputValue"
        }
      },
      "ariaLabel": {
        "defaultValue": null,
        "description": "Apply an `aria-label` to the text field to provide additional\ncontext to assistive devices.",
        "name": "ariaLabel",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "The ID of the error message applied to the Select field.",
        "name": "errorId",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "errorMessage": {
        "defaultValue": null,
        "description": "",
        "name": "errorMessage",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorPlacement": {
        "defaultValue": null,
        "description": "Location of the error message relative to the field input",
        "name": "errorPlacement",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "TextInputErrorPlacement"
        }
      },
      "fieldClassName": {
        "defaultValue": null,
        "description": "Additional classes to be added to the field element",
        "name": "fieldClassName",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "Applies the \"inverse\" UI theme",
        "name": "inversed",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "multiline": {
        "defaultValue": null,
        "description": "Whether or not the text field is a multiline text field",
        "name": "multiline",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "numeric": {
        "defaultValue": null,
        "description": "Sets `inputMode`, `type`, and `pattern` to improve accessibility and consistency for number fields. Use this prop instead of `type=\"number\"`, see [here](https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/) for more information.",
        "name": "numeric",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rows": {
        "defaultValue": null,
        "description": "Optionally specify the number of visible text lines for the field. Only\napplicable if this is a multiline field.",
        "name": "rows",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "TextInputRows"
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "",
        "name": "inputRef",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(...args: any[]) => any"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Set the max-width of the input either to `'small'` or `'medium'`.",
        "name": "size",
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/TextField/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "TextInputSize"
        }
      }
    }
  },
  {
    "tags": {
      "param": "value",
      "returns": ""
    },
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "Returns the value with additional masking characters, or the same value back if invalid numeric string",
    "displayName": "maskValue",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "value\nmask",
      "returns": ""
    },
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "Remove mask characters from value, or the same value back if invalid numeric string",
    "displayName": "unmaskValue",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "Currency mask is a little different, we need to modify the incoming content to strip\nout any commas or dollar signs before evaluating it via the Intl.NumberFormat function.",
    "displayName": "CURRENCY_MASK",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "activeClassName": {
        "defaultValue": null,
        "description": "Classes applied to the tooltip trigger when the tooltip is active",
        "name": "activeClassName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaLabel": {
        "defaultValue": null,
        "description": "Helpful description of the tooltip for screenreaders",
        "name": "ariaLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Tooltip trigger content",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classes applied to the tooltip trigger",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeButtonLabel": {
        "defaultValue": null,
        "description": "Configurable text for the aria-label of the tooltip's close button",
        "name": "closeButtonLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "component": {
        "defaultValue": {
          "value": "button"
        },
        "description": "When provided, will render the passed in component for the tooltip trigger. Typically will be a `button`, `a`, or rarely an `input` element.",
        "name": "component",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "contentHeading": {
        "defaultValue": null,
        "description": "Heading for the tooltip content. This will show above 'title' content and inline with 'closeButton' if closeButton is set",
        "name": "contentHeading",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "dialog": {
        "defaultValue": null,
        "description": "Tooltip that behaves like a dialog, i.e. a tooltip that only appears on click, traps focus, and contains interactive content. For more information, see Deque's [tooltip dialog documentation](https://dequeuniversity.com/library/aria/tooltip-dialog)",
        "name": "dialog",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "`id` applied to tooltip body container element. If not provided, a unique id will be automatically generated and used.",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "interactiveBorder": {
        "defaultValue": {
          "value": "15"
        },
        "description": "Sets the size of the invisible border around interactive tooltips that prevents it from immediately hiding when the cursor leaves the tooltip.",
        "name": "interactiveBorder",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "offset": {
        "defaultValue": {
          "value": "[0, 5]"
        },
        "description": "Applies `skidding` and `distance` offsets to the tooltip relative to the trigger. See the [`popperjs` docs](https://popper.js.org/docs/v2/modifiers/popper-offsets/) for more info.",
        "name": "offset",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "[number, number]"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when the tooltip is hidden",
        "name": "onClose",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => any"
        }
      },
      "onOpen": {
        "defaultValue": null,
        "description": "Called when the tooltip is shown",
        "name": "onOpen",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => any"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "top"
        },
        "description": "Placement of the tooltip body relative to the trigger. See the [`popperjs` docs](https://popper.js.org/docs/v2/constructors/#options) for more info.",
        "name": "placement",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "maxWidth": {
        "defaultValue": {
          "value": "300px"
        },
        "description": "`maxWidth` styling applied to the tooltip body",
        "name": "maxWidth",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "showCloseButton": {
        "defaultValue": null,
        "description": "Determines if close button is shown in tooltip. It is recommended that the close button is only used if `dialog=true`",
        "name": "showCloseButton",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Content inside the tooltip body or popover. If contains interactive elements use the `dialog` prop.",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "transitionDuration": {
        "defaultValue": {
          "value": "250"
        },
        "description": "Duration of the `react-transition-group` CSSTransition. See the [`timeout` option](http://reactcommunity.org/react-transition-group/transition#Transition-prop-timeout) for more info.",
        "name": "transitionDuration",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "zIndex": {
        "defaultValue": {
          "value": "9999"
        },
        "description": "`zIndex` styling applied to the tooltip body",
        "name": "zIndex",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "TooltipIcon",
    "methods": [],
    "props": {
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Tooltip/TooltipIcon.tsx",
          "name": "TooltipIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Tooltip/TooltipIcon.tsx",
            "name": "TooltipIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "UsaBanner",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root `section` element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/UsaBanner/UsaBanner.tsx",
          "name": "UsaBannerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/UsaBanner/UsaBanner.tsx",
            "name": "UsaBannerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique ID to be applied to the banner content. A unique ID will be generated if one isn't provided.",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/UsaBanner/UsaBanner.tsx",
          "name": "UsaBannerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/UsaBanner/UsaBanner.tsx",
            "name": "UsaBannerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "@deprecated - This is now deprecated in favor of the global language setting. See guides/internationalization\n@hide-prop [Deprecated]\n\nThe language the USA Banner will be presented in.",
        "name": "locale",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/UsaBanner/UsaBanner.tsx",
          "name": "UsaBannerProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/UsaBanner/UsaBanner.tsx",
            "name": "UsaBannerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Language"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "VerticalNav",
    "methods": [],
    "props": {
      "ariaNavLabel": {
        "defaultValue": null,
        "description": "An optional arial label for the `<nav>` element in this component.\nThis prop is necessary when there is more than one nav element on a page.",
        "name": "ariaNavLabel",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
          "name": "VerticalNavProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
            "name": "VerticalNavProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classes to be added to the root element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
          "name": "VerticalNavProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
            "name": "VerticalNavProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "collapsed": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether or not the menu is in a collapsed state",
        "name": "collapsed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
          "name": "VerticalNavProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
            "name": "VerticalNavProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "When provided, this will render the passed in component for all `VerticalNavItem`s. This is useful when\nintegrating with React Router's `<Link>` or using your own custom component.\nIf more specific control is needed, each `VerticalNavItem` object also accepts a `component` prop.",
        "name": "component",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
          "name": "VerticalNavProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
            "name": "VerticalNavProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "selectedId": {
        "defaultValue": null,
        "description": "The `id` of the selected `VerticalNavItem`. This will also set the\n`selected` prop on the item's parents.",
        "name": "selectedId",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
          "name": "VerticalNavProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
            "name": "VerticalNavProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
          "name": "VerticalNavProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
            "name": "VerticalNavProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "items": {
        "defaultValue": null,
        "description": "An array of [`VerticalNavItem`]({{root}}/components/vertical-nav/#components.vertical-nav.VerticalNavItem) data objects",
        "name": "items",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
          "name": "VerticalNavProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
            "name": "VerticalNavProps"
          }
        ],
        "required": true,
        "type": {
          "name": "VerticalNavItemProps[]"
        }
      },
      "nested": {
        "defaultValue": null,
        "description": "Indicates this list is nested within another nav item.",
        "name": "nested",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
          "name": "VerticalNavProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
            "name": "VerticalNavProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onLinkClick": {
        "defaultValue": null,
        "description": "Called when one of the nav links is clicked, with the following arguments:\n[`SyntheticEvent`](https://facebook.github.io/react/docs/events.html),\n`id`, `url`",
        "name": "onLinkClick",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
          "name": "VerticalNavProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/VerticalNav/VerticalNav.tsx",
            "name": "VerticalNavProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(evt: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element>, id: string, url: string) => any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "SvgIcon",
    "methods": [],
    "props": {
      "ariaHidden": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The elements that make up the SVG",
        "name": "children",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "AddIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "AlertCircleIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "ArrowsStacked",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "ArrowIcon",
    "methods": [],
    "props": {
      "direction": {
        "defaultValue": null,
        "description": "",
        "name": "direction",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/ArrowIcon.tsx",
          "name": "ArrowIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/ArrowIcon.tsx",
            "name": "ArrowIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ArrowIconDirectionType"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "BuildingCircleIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "CalendarIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "CheckCircleIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "CheckIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "CloseIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "CloseIconThin",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "DownloadIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "ExternalLinkIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "HhsLogo",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "ImageIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "InfoCircleIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "InfoCircleIconThin",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "LockCircleIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "LockIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "MenuIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "MenuIconThin",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "MinusCircleIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "NextIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "PdfIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "PlusCircleIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "RemoveIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "StarIcon",
    "methods": [],
    "props": {
      "isFilled": {
        "defaultValue": null,
        "description": "",
        "name": "isFilled",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/StarIcon.tsx",
          "name": "StarIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/StarIcon.tsx",
            "name": "StarIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "UsaFlagIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "UsaLogo",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "WarningIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "WhiteHouseLogo",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to be added to the svg element",
        "name": "className",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A custom `id` attribute for the SVG",
        "name": "id",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The descriptive name for the SVG icon",
        "name": "title",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inversed": {
        "defaultValue": null,
        "description": "If `true` sets inverse fill color.",
        "name": "inversed",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "Describes the value of the `aria-hidden` attribute on the SVG. Defaulted to true with the assumption that most icons are decorative.\nIf the icon does not have any associated label text, set this to `false` and ensure a `title` is provided for improved accessibility.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Long-text description of any SVG. Use for complex icons, otherwise `title` prop will suffice.",
        "name": "description",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "A string describing the viewbox of the SVG.\n\nIt is recommended that the icon is centered and fill up the default viewport size.\nSee [this blog post](https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844) for further explanation on viewBox and how to use it.",
        "name": "viewBox",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
          "name": "SvgIconProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/Icons/SvgIcon.tsx",
            "name": "SvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "Use existing window.utag.link function to send analytics events. If the function does not\nexist right away, try again after TIMEOUT milliseconds until we've reached MAX_RETRIES.",
    "displayName": "sendAnalytics",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "sendLinkEvent",
    "methods": [],
    "props": {
      "event_name": {
        "defaultValue": null,
        "description": "",
        "name": "event_name",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
          "name": "AnalyticsEvent"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
            "name": "AnalyticsEvent"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "event_type": {
        "defaultValue": null,
        "description": "",
        "name": "event_type",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
          "name": "AnalyticsEvent"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
            "name": "AnalyticsEvent"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "event_category": {
        "defaultValue": null,
        "description": "",
        "name": "event_category",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
          "name": "AnalyticsEvent"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
            "name": "AnalyticsEvent"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "event_action": {
        "defaultValue": null,
        "description": "",
        "name": "event_action",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
          "name": "AnalyticsEvent"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
            "name": "AnalyticsEvent"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "event_label": {
        "defaultValue": null,
        "description": "",
        "name": "event_label",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
          "name": "AnalyticsEvent"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
            "name": "AnalyticsEvent"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "Allows applications to override the default `onAnalyticsEvent` function\nacross the whole system. To override it for a single component instance,\nuse the `onAnalyticsEvent` prop instead.",
    "displayName": "setDefaultAnalyticsFunction",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "defaultAnalyticsFunction",
    "methods": [],
    "props": {
      "event_name": {
        "defaultValue": null,
        "description": "",
        "name": "event_name",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
          "name": "AnalyticsEvent"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
            "name": "AnalyticsEvent"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "event_type": {
        "defaultValue": null,
        "description": "",
        "name": "event_type",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
          "name": "AnalyticsEvent"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
            "name": "AnalyticsEvent"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "event_category": {
        "defaultValue": null,
        "description": "",
        "name": "event_category",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
          "name": "AnalyticsEvent"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
            "name": "AnalyticsEvent"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "event_action": {
        "defaultValue": null,
        "description": "",
        "name": "event_action",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
          "name": "AnalyticsEvent"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
            "name": "AnalyticsEvent"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "event_label": {
        "defaultValue": null,
        "description": "",
        "name": "event_label",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
          "name": "AnalyticsEvent"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/events.ts",
            "name": "AnalyticsEvent"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "Use this hook to retrieve rendered content for use in analytics events.\nIt accepts `onMount` and `onUnmount` event handlers, which will be called\nwith the rendered textContent of the desired element. It grabs text content\nfrom the first element that has it, in order of the returned refs array.\nIn the example below, it will favor content from `headingRef` (first ref)\nbut will fall back to `bodyRef` (second ref) if no content is found:\n\nconst [headingRef, bodyRef] = useAnalyticsContent({\n  onMount: (content: string | undefined) => {\n    if (!content) {\n      console.error('No content found for [component-name] analytics event');\n      return;\n    }\n    sendLinkEvent({\n      event_name: 'alert_impression',\n      event_type: EventType.UI_INTERACTION,\n      ga_eventAction: 'alert impression',\n      ga_eventCategory: EventCategory.UI_COMPONENTS,\n      ga_eventLabel: content,\n      heading: content,\n      type: variation,\n    });\n  }\n})\n\nreturn (\n  <div>\n    <h1 ref={headingRef}>Hello World</h1>\n    <p ref={bodyRef}>\n      I'm some body text\n    </p>\n  </div>\n)",
    "displayName": "useAnalyticsContent",
    "methods": [],
    "props": {
      "componentName": {
        "defaultValue": null,
        "description": "Optional name of component for error messages",
        "name": "componentName",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/useAnalyticsContent.ts",
          "name": "UseAnalyticsContentProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/useAnalyticsContent.ts",
            "name": "UseAnalyticsContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onMount": {
        "defaultValue": null,
        "description": "",
        "name": "onMount",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/useAnalyticsContent.ts",
          "name": "UseAnalyticsContentProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/useAnalyticsContent.ts",
            "name": "UseAnalyticsContentProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(content?: string) => any"
        }
      },
      "onUnmount": {
        "defaultValue": null,
        "description": "",
        "name": "onUnmount",
        "parent": {
          "fileName": "design-system/packages/design-system/src/components/analytics/useAnalyticsContent.ts",
          "name": "UseAnalyticsContentProps"
        },
        "declarations": [
          {
            "fileName": "design-system/packages/design-system/src/components/analytics/useAnalyticsContent.ts",
            "name": "UseAnalyticsContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(content?: string) => any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "setInlineErrorIconDisplay",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "setErrorPlacementDefault",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "setAlertSendsAnalytics",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "setButtonSendsAnalytics",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "setDialogSendsAnalytics",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "setHelpDrawerSendsAnalytics",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "setLanguage",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "",
    "displayName": "getTranslations",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "Because language strings can contain region subtags, we need a way to compare\njust the language portion of two language strings. This function compares two\nlocale strings that may or may not contain subtags according to IETF BCP 47.\nThe second string defaults to our globally set language.",
    "displayName": "languageMatches",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "Falls back to a more generic locale if the more specific one isn't\navailable in this browser. Testing platforms tend to have only a\nfew locales.",
    "displayName": "fallbackLocale",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "Returns the translation for a given key for a given language. For most\nuse cases, the `t` function will be more appropriate, where the language\nis not a required parameter. Use this when you need a translation from\na specific language.",
    "displayName": "translate",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "Returns the translation for a given key in the currently set language.",
    "displayName": "t",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "packages/design-system/src/components/index.ts",
    "description": "Returns a translation function bound to a specific language.\n\nNote that we don't want to use this to create the default `t` function\nbecause it will bind with whatever the default language is AT THAT TIME,\nso if the global language changes after we call this function,\ntranslations coming out if it wouldn't pick up on the change.",
    "displayName": "tWithLanguage",
    "methods": [],
    "props": {}
  }
]