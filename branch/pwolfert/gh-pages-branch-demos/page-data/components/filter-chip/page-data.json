{
    "componentChunkName": "component---src-components-info-page-tsx",
    "path": "/components/filter-chip",
    "result": {"data":{"mdx":{"id":"e89fffb2-99f0-578c-bcb2-0162aa44f6ea","frontmatter":{"title":"Filter Chip","status":"draft","relatedUswdsGuidance":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Filter Chip\",\n  \"status\": \"draft\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar StorybookExample = makeShortcode(\"StorybookExample\");\nvar PropTable = makeShortcode(\"PropTable\");\nvar ComponentThemeOptions = makeShortcode(\"ComponentThemeOptions\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Filter Chips are used to display dismissible filter chips\"), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"<FilterChip>\")), mdx(StorybookExample, {\n    componentName: \"filterChip\",\n    sourceFilePath: \"components/FilterChip/FilterChip.tsx\",\n    storyId: \"components-filter-chip--multiple-chips\",\n    mdxType: \"StorybookExample\"\n  }), mdx(\"h3\", null, \"Props\"), mdx(PropTable, {\n    componentName: \"FilterChip\",\n    mdxType: \"PropTable\"\n  }), mdx(\"h2\", null, \"Guidance\"), mdx(\"h3\", null, \"When to use\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use to clearly indicate to the user what filters have been applied to a set of results and provide a quick and easy way to remove a selected filter\")), mdx(\"h3\", null, \"When to consider alternatives\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When many filter chips would be displayed and available screen real estate is limited\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When a badge is sufficient in place of a filter chip\")), mdx(\"h3\", null, \"Usage\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not mix badges and filter chip as it can be confusing to the user\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not use filter chip when a badge is sufficient, i.e., when none of the tags are removable\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Filter chips should be short and not wrap to the second line\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Allow adequate spacing (at least 8px) between each filter chip, as much as the design will allow.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The colors of the Filter Chip can be overriden using the Sass variables listed below, but should not be overriden with colors outside of the color palette.\")), mdx(\"h3\", null, \"Accessibility\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Enter\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Backspace\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Delete\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Spacebar\"), \" will remove the tag when it is in focus\")), mdx(\"h2\", null, \"Customization\"), mdx(\"p\", null, \"The following Sass variables can be overridden to customize FilterChip components:\"), mdx(ComponentThemeOptions, {\n    theme: \"core\",\n    componentname: \"filter-chip\",\n    mdxType: \"ComponentThemeOptions\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#filterchip","title":"<FilterChip>","items":[{"url":"#props","title":"Props"}]},{"url":"#guidance","title":"Guidance","items":[{"url":"#when-to-use","title":"When to use"},{"url":"#when-to-consider-alternatives","title":"When to consider alternatives"},{"url":"#usage","title":"Usage"},{"url":"#accessibility","title":"Accessibility"}]},{"url":"#customization","title":"Customization"}]}}},"pageContext":{"id":"e89fffb2-99f0-578c-bcb2-0162aa44f6ea"}},
    "staticQueryHashes": ["1050346478","2862643552"]}