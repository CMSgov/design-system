{
    "componentChunkName": "component---src-components-info-page-tsx",
    "path": "/components/autocomplete",
    "result": {"data":{"mdx":{"id":"4eed2787-f3d0-5661-9f8f-305371a830f6","frontmatter":{"title":"Autocomplete","status":null,"intro":"Autocompletes allow users to enter any combination of letters, numbers, or symbols of their choosing (unless otherwise restricted), and receive one or more suggested matches in a list below the input.","core":{"githubLink":"design-system/src/components/Autocomplete","sketchLink":"7y3WZY8","storybookLink":"components-autocomplete--default"},"healthcare":{"sketchLink":"ZOZk4rx","storybookLink":null,"githubLink":null},"medicare":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Autocomplete\",\n  \"intro\": \"Autocompletes allow users to enter any combination of letters, numbers, or symbols of their choosing (unless otherwise restricted), and receive one or more suggested matches in a list below the input.\",\n  \"core\": {\n    \"githubLink\": \"design-system/src/components/Autocomplete\",\n    \"sketchLink\": \"7y3WZY8\",\n    \"storybookLink\": \"components-autocomplete--default\"\n  },\n  \"healthcare\": {\n    \"sketchLink\": \"ZOZk4rx\"\n  }\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar StorybookExample = makeShortcode(\"StorybookExample\");\nvar PropTable = makeShortcode(\"PropTable\");\nvar ComponentThemeOptions = makeShortcode(\"ComponentThemeOptions\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"<Autocomplete>\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Autocomplete\"), \" component is a parent component that adds autocomplete functionality to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TextField\"), \" component.\"), mdx(StorybookExample, {\n    componentName: \"autocomplete\",\n    storyId: \"components-autocomplete--default\",\n    minHeight: 500,\n    mdxType: \"StorybookExample\"\n  }), mdx(\"h3\", null, \"Props\"), mdx(PropTable, {\n    componentName: \"Autocomplete\",\n    mdxType: \"PropTable\"\n  }), mdx(\"h3\", null, \"Autocomplete Items\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    className: \"ds-u-font-weight--bold\"\n  }, \"id\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", null, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Unique identifier for this item\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    className: \"ds-u-font-weight--bold\"\n  }, \"name\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", null, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Displayed value of the item. May alternatively provide a \", mdx(\"code\", null, \"children\"), \" value\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    className: \"ds-u-font-weight--bold\"\n  }, \"children\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", null, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Custom React node as an alternative to a string-only \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"name\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    className: \"ds-u-font-weight--bold\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", null, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Additional classes to be added to the root element. Useful for adding utility classes.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    className: \"ds-u-font-weight--bold\"\n  }, \"isResult\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", null, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether this item should be counted as one of the results for the purpose of announcing the result count to screen readers\")))), mdx(\"h2\", null, \"Guidance\"), mdx(\"h3\", null, \"When to use\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you are returning results from a known domain like a database of zip codes or a taxonomy of keywords\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you have a list of options that would cause a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/design-system/branch/pwolfert/new-button-migration-docs/components/dropdown/\"\n  }, \"dropdown\"), \" to be unusually long\")), mdx(\"h3\", null, \"When to consider alternatives\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When users are choosing from a specific set of options. Consider \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/design-system/branch/pwolfert/new-button-migration-docs/components/checkbox\"\n  }, \"checkboxes\"), \", \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/design-system/branch/pwolfert/new-button-migration-docs/components/radio/\"\n  }, \"radio buttons\"), \", or a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/design-system/branch/pwolfert/new-button-migration-docs/components/dropdown/\"\n  }, \"dropdown\"), \" in these cases.\")), mdx(\"h3\", null, \"Usage\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Autocomplete>\"), \" makes use of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Downshift>\"), \" component, maintained by Paypal: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/paypal/downshift\"\n  }, \"Downshift docs on Github\"), \". The above documented props are only those directly exposed by the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Autocomplete>\"), \" component, but you can pass props specific to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Downshift>\"), \" here as well, e.g. you can set the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/downshift-js/downshift#inputvalue\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"inputValue\")), \" prop if you'd like to provide an initial value to the component or control the input more directly.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We continue to use the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.1/examples/combobox/aria1.0pattern/combobox-autocomplete-list.html\"\n  }, \"ARIA 1.0 Combobox With List Autocomplete\"), \" pattern. This decision was made ensures good compatibility with assistive devices (JAWS, NVDA, VoiceOver). This was done because the ARIA 1.1 markup pattern triggers a different behavior on containers with a role=\\\"combobox\\\" attribute.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don't use placeholder text in autocomplete fields. Try to write a descriptive label that identifies what the user is searching for. People who have cognitive or visual disabilities have additional problems with placeholder text.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The length of the text field provides a hint to users as to how much text to write. Do not ask users to write paragraphs of text in this component; use a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"textarea\"), \" instead.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/design-system/branch/pwolfert/new-button-migration-docs/patterns/forms/\"\n  }, \"View the \\\"Forms\\\" guidelines for additional guidance and best practices.\"))), mdx(\"h3\", null, \"Accessibility\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Autocomplete>\"), \" component has taken special care to ensure accessibility for screenreader devices. It announces the number of results based on \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"items\"), \" matches with the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"inputValue\"), \" string. The component also reads out the name of each list item when users arrow up or down.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Autocomplete>\"), \" allows developers to add hint text in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<label>\"), \" element. This hint \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<span>\"), \" is added to the markup by passing a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"String\"), \" into the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hint\"), \" prop.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Autocomplete>\"), \" has a button (styled visually as a link) to clear the search, and refocus the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<input>\"), \" element. This resets the local state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"selectedItem\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"null\"), \", and will re-read the label and screenreader hint text.\")), mdx(\"h3\", null, \"Focus Management\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Autocomplete>\"), \" has a new Boolean prop called \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"focusTrigger\"), \". Adding this prop will set keyboard focus on the internal \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Textfield>\"), \". Focus is set immediately when the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"componentDidMount()\"), \" lifecycle method fires.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In most cases, this isn't needed. It's useful when components are added dynamically, after the application has been rendered. All major screen readers (JAWS, NVDA, VoiceOver) have been tested with this feature, and announce the new input correctly.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instances that contain the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"focusTrigger\"), \" prop may fire Downshift's \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/paypal/downshift#oninputvaluechange\"\n  }, \"onInputValueChange\"), \" method, causing the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"inputValue\"), \" to be set back to an empty string. In these cases, you may want to access Downshift's \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/paypal/downshift#statereducer\"\n  }, \"state reducer\"), \" and manage your component's local state for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"blur\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"click\"), \" events.\")), mdx(\"h2\", null, \"Customization\"), mdx(\"p\", null, \"The following Sass variables can be overridden to customize Autocomplete components:\"), mdx(ComponentThemeOptions, {\n    componentname: \"autocomplete\",\n    mdxType: \"ComponentThemeOptions\"\n  }), mdx(\"h2\", null, \"Text Input Options\"), mdx(ComponentThemeOptions, {\n    componentname: \"text-input\",\n    mdxType: \"ComponentThemeOptions\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#autocomplete","title":"<Autocomplete>","items":[{"url":"#props","title":"Props"},{"url":"#autocomplete-items","title":"Autocomplete Items"}]},{"url":"#guidance","title":"Guidance","items":[{"url":"#when-to-use","title":"When to use"},{"url":"#when-to-consider-alternatives","title":"When to consider alternatives"},{"url":"#usage","title":"Usage"},{"url":"#accessibility","title":"Accessibility"},{"url":"#focus-management","title":"Focus Management"}]},{"url":"#customization","title":"Customization"},{"url":"#text-input-options","title":"Text Input Options"}]}}},"pageContext":{"id":"4eed2787-f3d0-5661-9f8f-305371a830f6"}},
    "staticQueryHashes": ["1050346478","3750824424"]}