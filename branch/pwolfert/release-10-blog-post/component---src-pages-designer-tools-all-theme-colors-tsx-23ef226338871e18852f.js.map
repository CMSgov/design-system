{"version":3,"file":"component---src-pages-designer-tools-all-theme-colors-tsx-23ef226338871e18852f.js","mappings":"6TAmBA,MAGMA,EAAiBC,OAAOC,KAAKC,EAAAA,GAAAA,KAAAA,OA6DnC,MAtD4BC,KAC1BC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,WAAS,EAACC,oBAAoB,KAAIC,SAAA,EACvCC,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CAAAF,SAAC,sBACdC,EAAAA,EAAAA,KAACE,EAAAA,EAAS,CAAAH,UACRJ,EAAAA,EAAAA,MAACQ,EAAAA,EAAQ,CAAAJ,SAAA,EACPC,EAAAA,EAAAA,KAACI,EAAAA,EAAS,CAACC,MAAM,MAAMC,GAAG,aAAYP,SAAC,eAGtCR,OAAOgB,QAAQC,GAAQC,KAAIC,IAAA,IAAEC,EAAUC,GAAUF,EAAA,OAChDV,EAAAA,EAAAA,KAACI,EAAAA,EAAS,CAACC,MAAM,MAAMC,GAAIK,EAASZ,SACjCa,EAAUC,aAD6BF,EAE9B,UAIlBX,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CAAAf,SACPT,EAAemB,KAAKM,IACnBpB,EAAAA,EAAAA,MAACQ,EAAAA,EAAQ,CAAAJ,SAAA,EACPC,EAAAA,EAAAA,KAACI,EAAAA,EAAS,CAACY,QAAQ,aAAaC,aAAa,mBAAkBlB,UAC7DC,EAAAA,EAAAA,KAAA,QAAMkB,UAAU,4BAA2BnB,SAAEgB,MAE9CxB,OAAOgB,QAAQC,GAAQC,KAAIU,IAA4B,IAA1BR,EAAUC,GAAUO,EAChD,MAAMC,GAAQC,EAAAA,EAAAA,IAAmBV,EAAuBI,GAClDO,EAAiC,CACrCC,gBAAiBH,GAEbI,GAAYC,EAAAA,EAAAA,IAAcL,EAnCzB,4BADD,qBAqCAM,GAAiCC,EAAAA,EAAAA,IAAmBP,GACtD,CAAC,EACD,CACEQ,MAAOJ,EACPK,WAAY,eAEZC,GAAmBC,EAAAA,EAAAA,IAA6BX,GAEtD,OACEpB,EAAAA,EAAAA,KAACI,EAAAA,EAAS,CACRY,QAASL,EACTM,aAAcL,EAAUC,YACxBmB,MAAOV,EAAUvB,UAGjBC,EAAAA,EAAAA,KAAA,QAAMkB,UAAU,6BAA6Bc,MAAON,EAAU3B,SAC3D+B,KAHEnB,EAKK,MA5BHI,UCnBvB,MAtBoCL,IAA4B,IAA3B,SAAEuB,GAAoBvB,EAEzD,OACEV,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,CACLC,YAAa,CACXC,MAAO,oBAETH,SAAUA,EACVI,KAAK,mBACLC,MARU,OASVC,WAAS,EAAAxC,UAETJ,EAAAA,EAAAA,MAAA6C,EAAAA,SAAA,CAAAzC,SAAA,EACEC,EAAAA,EAAAA,KAACyC,EAAAA,EAAM,CAAA1C,UACLC,EAAAA,EAAAA,KAAA,QAAM0C,KAAK,SAASC,QAAQ,yBAE9B3C,EAAAA,EAAAA,KAACN,EAAmB,QAEf,C","sources":["webpack://@cmsgov/cms-design-system-docs/./src/components/designer-tools/AllThemesColorTable.tsx","webpack://@cmsgov/cms-design-system-docs/./src/pages/designer-tools/all-theme-colors.tsx"],"sourcesContent":["import type * as React from 'react';\nimport themes from '../../../../../themes.json';\nimport {\n  ThemeName,\n  getThemeColorValue,\n  themeTokens,\n  getSystemColorTokenFromValue,\n} from '../../helpers/themeTokens';\nimport {\n  Table,\n  TableCaption,\n  TableHead,\n  TableRow,\n  TableBody,\n  TableCell,\n} from '@cmsgov/design-system';\nimport { hexHasTransparency, pickTextColor } from 'design-system-tokens/src/lib/colorUtils';\nimport { HexValue } from 'design-system-tokens/src/lib/types';\n\nconst DARK_TEXT = 'var(--color-base)';\nconst LIGHT_TEXT = 'var(--color-base-inverse)';\n\nconst colorTokenKeys = Object.keys(themeTokens.core.color);\n\n/**\n * Used to show a set of related colors. It's a collection of `ColorExampleRow`\n * items. Note that this does not show a special transparency background to\n * support semi-transparent colors like the `ColorRamps` component does.\n */\nconst AllThemesColorTable = () => (\n  <Table stackable stackableBreakpoint=\"md\">\n    <TableCaption>All theme colors</TableCaption>\n    <TableHead>\n      <TableRow>\n        <TableCell scope=\"col\" id=\"token-name\">\n          Token name\n        </TableCell>\n        {Object.entries(themes).map(([themeKey, themeData]) => (\n          <TableCell scope=\"col\" id={themeKey} key={themeKey}>\n            {themeData.displayName}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      {colorTokenKeys.map((tokenKey) => (\n        <TableRow key={tokenKey}>\n          <TableCell headers=\"token-name\" stackedTitle=\"All theme colors\">\n            <code className=\"c-color-example-row__name\">{tokenKey}</code>\n          </TableCell>\n          {Object.entries(themes).map(([themeKey, themeData]) => {\n            const value = getThemeColorValue(themeKey as ThemeName, tokenKey);\n            const cellStyle: React.CSSProperties = {\n              backgroundColor: value,\n            };\n            const textColor = pickTextColor(value as HexValue, LIGHT_TEXT, DARK_TEXT);\n            const codeStyle: React.CSSProperties = hexHasTransparency(value as HexValue)\n              ? {}\n              : {\n                  color: textColor,\n                  background: 'transparent',\n                };\n            const tokenDisplayName = getSystemColorTokenFromValue(value);\n\n            return (\n              <TableCell\n                headers={themeKey}\n                stackedTitle={themeData.displayName}\n                style={cellStyle}\n                key={themeKey}\n              >\n                <code className=\"c-color-example-row__value\" style={codeStyle}>\n                  {tokenDisplayName}\n                </code>\n              </TableCell>\n            );\n          })}\n        </TableRow>\n      ))}\n    </TableBody>\n  </Table>\n);\n\nexport default AllThemesColorTable;\n","import Layout from '../../components/layout/Layout';\nimport { Helmet } from 'react-helmet';\nimport { MdxQuery } from '../../helpers/graphQLTypes';\nimport AllThemesColorTable from '../../components/designer-tools/AllThemesColorTable';\n\nconst DesignerToolThemeColorsPage = ({ location }: MdxQuery) => {\n  const theme = 'core';\n  return (\n    <Layout\n      frontmatter={{\n        title: 'All theme colors',\n      }}\n      location={location}\n      slug=\"all-theme-colors\"\n      theme={theme}\n      fullWidth\n    >\n      <>\n        <Helmet>\n          <meta name=\"robots\" content=\"noindex, nofollow\" />\n        </Helmet>\n        <AllThemesColorTable />\n      </>\n    </Layout>\n  );\n};\n\nexport default DesignerToolThemeColorsPage;\n"],"names":["colorTokenKeys","Object","keys","themeTokens","AllThemesColorTable","_jsxs","Table","stackable","stackableBreakpoint","children","_jsx","TableCaption","TableHead","TableRow","TableCell","scope","id","entries","themes","map","_ref","themeKey","themeData","displayName","TableBody","tokenKey","headers","stackedTitle","className","_ref2","value","getThemeColorValue","cellStyle","backgroundColor","textColor","pickTextColor","codeStyle","hexHasTransparency","color","background","tokenDisplayName","getSystemColorTokenFromValue","style","location","Layout","frontmatter","title","slug","theme","fullWidth","_Fragment","Helmet","name","content"],"sourceRoot":""}