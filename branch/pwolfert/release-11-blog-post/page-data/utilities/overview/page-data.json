{"componentChunkName":"component---src-components-page-templates-info-page-tsx","path":"/utilities/overview/","result":{"data":{"mdx":{"id":"8cd8247a-2dcd-507d-83d9-a53fbd39f847","frontmatter":{"title":"Utilities overview","intro":null,"core":null,"healthcare":null,"medicare":null},"slug":"utilities/overview","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Utilities overview\",\n  \"order\": -10\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\nconst EmbeddedExample = makeShortcode(\"EmbeddedExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `A utility class modifies a single trait, typically a single CSS property. To apply a trait, or a combination of traits to an element, add the corresponding utility class directly to the HTML element.`), mdx(\"p\", null, `Together, they can form a variety of UI patterns. You won't always want to use combinations of utilities to generate more complicated patterns, but the option is there. Once you've identified a set of traits that seem to be reused a lot, it's a good time to consider turning those into a component.`), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `Format:`), ` `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `.ds-u-[NAME]`)), mdx(EmbeddedExample, {\n    mdxType: \"EmbeddedExample\"\n  }, mdx(\"div\", {\n    className: \"ds-u-fill--secondary ds-u-padding--3\"\n  }, mdx(\"p\", {\n    className: \"ds-u-margin--0 ds-u-color--white ds-u-text-align--center\"\n  }, \"Hello world\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{}}},"pageContext":{"id":"8cd8247a-2dcd-507d-83d9-a53fbd39f847"}},"staticQueryHashes":["3481578012"]}