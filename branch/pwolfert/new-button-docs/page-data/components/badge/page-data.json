{
    "componentChunkName": "component---src-components-info-page-tsx",
    "path": "/components/badge",
    "result": {"data":{"mdx":{"id":"770e928b-d3af-52e7-b978-a77d07b493c4","frontmatter":{"title":"Badge","status":null,"relatedUswdsGuidance":"components/tag/"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Badge\",\n  \"relatedUswdsGuidance\": \"components/tag/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar StorybookExample = makeShortcode(\"StorybookExample\");\nvar PropTable = makeShortcode(\"PropTable\");\nvar ComponentThemeOptions = makeShortcode(\"ComponentThemeOptions\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Badges hold small amounts of information and draw attention to new or important content.\"), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"<Badge>\")), mdx(StorybookExample, {\n    componentName: \"badge\",\n    sourceFilePath: \"components/Badge/Badge.tsx\",\n    storyId: \"components-badge--default\",\n    mdxType: \"StorybookExample\"\n  }), mdx(\"h3\", null, \"Props\"), mdx(PropTable, {\n    componentName: \"Badge\",\n    mdxType: \"PropTable\"\n  }), mdx(\"h2\", null, \"Guidance\"), mdx(\"h3\", null, \"When to use\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To draw attention to new, important content on a page that might otherwise be missed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To filter results with one or more tags.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To indicate the number of new or unread items within a container. For example, to indicate the number of unread messages within a person\\u2019s inbox.\")), mdx(\"h3\", null, \"When to consider alternatives\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When users are likely to confuse a badge with a button. For example, when the badge appears in the same area of the page as buttons.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To call attention to new or updated content, consider changing the background color of the object itself or experiment with changing the font weight.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When users already expect content to be updated frequently. For example, on a site dedicated to breaking news. In this case placing the new content at the top may be enough.\")), mdx(\"h3\", null, \"Usage\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don\\u2019t overdo it \\u2014 if everything on a page is called out as important, nothing is important.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Users may confuse badges as buttons. Always conduct usability testing to make sure your particular implementation is not causing frustration.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don\\u2019t mix interactive and static badges on your site. Once you establish a pattern for how badges behave, users will expect that behavior every time.\")), mdx(\"h3\", null, \"Accessibility\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When badges are used to call out new content that is dynamically loaded onto a page, be sure to use \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\"\n  }, \"ARIA live regions\"), \" to alert screen readers of the change.\")), mdx(\"h2\", null, \"Customization\"), mdx(\"p\", null, \"The following Sass variables can be overridden to customize Badge components:\"), mdx(ComponentThemeOptions, {\n    componentname: \"badge\",\n    mdxType: \"ComponentThemeOptions\"\n  }), mdx(\"h3\", null, \"Future research\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Further usability testing should be done to ensure badges aren't being confused with buttons. Further iteration can be done with sizing and colors if there is confusion.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#badge","title":"<Badge>"},{"url":"#guidance","title":"Guidance"},{"url":"#customization","title":"Customization"}]}}},"pageContext":{"id":"770e928b-d3af-52e7-b978-a77d07b493c4"}},
    "staticQueryHashes": ["1050346478","3750824424"]}