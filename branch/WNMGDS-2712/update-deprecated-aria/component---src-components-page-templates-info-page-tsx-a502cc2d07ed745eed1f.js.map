{"version":3,"file":"component---src-components-page-templates-info-page-tsx-a502cc2d07ed745eed1f.js","mappings":"iNAyDA,WAAeA,EAAAA,EAAAA,IA/CEC,IAAkC,IAAjC,KAAEC,EAAI,SAAEC,GAAoBF,EAC5C,MAAM,YAAEG,EAAW,KAAEC,EAAI,gBAAEC,EAAe,KAAEC,GAASL,EAAKM,IACpDC,GAAQC,EAAAA,EAAAA,KAEd,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLR,YAAaA,EACbD,SAAUA,EACVI,KAAMA,EACNE,MAAOA,EACPI,oBAAqBP,aAAe,EAAfA,EAAiBQ,MAAMC,UAE5CJ,EAAAA,EAAAA,KAACK,EAAAA,EAAe,CAACd,KAAMG,EAAMI,MAAOA,KAC7B,G,qCCrBb,SAASQ,EAAaC,EAAWC,GAC/B,MAAMC,EAAeD,EAAUhB,SACzBkB,EAAeH,EAAUf,SAO/B,OACEiB,EAAaE,WAAaD,EAAaC,UACvCF,EAAaG,SAAWF,EAAaE,MAKzC,CAUA,IAFsBC,IAAcC,EAAAA,EAAAA,MAAKD,EAAWP,E","sources":["webpack://@cmsgov/cms-design-system-docs/./src/components/page-templates/InfoPage.tsx","webpack://@cmsgov/cms-design-system-docs/./src/helpers/avoidRefresh.ts"],"sourcesContent":["import ContentRenderer from '../content/ContentRenderer';\nimport Layout from '../layout/Layout';\nimport avoidRefresh from '../../helpers/avoidRefresh';\nimport useTheme from '../../helpers/useTheme';\nimport { MdxQuery } from '../../helpers/graphQLTypes';\nimport { graphql } from 'gatsby';\n\n/**\n * Template for information content pages.\n */\nconst InfoPage = ({ data, location }: MdxQuery) => {\n  const { frontmatter, body, tableOfContents, slug } = data.mdx;\n  const theme = useTheme();\n\n  return (\n    <Layout\n      frontmatter={frontmatter}\n      location={location}\n      slug={slug}\n      theme={theme}\n      tableOfContentsData={tableOfContents?.items}\n    >\n      <ContentRenderer data={body} theme={theme} />\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      id\n      frontmatter {\n        title\n        intro\n        core {\n          githubLink\n          sketchLink\n          storybookLink\n        }\n        healthcare {\n          sketchLink\n          storybookLink\n          githubLink\n        }\n        medicare {\n          sketchLink\n          storybookLink\n          githubLink\n        }\n      }\n      slug\n      body\n      tableOfContents(maxDepth: 3)\n    }\n  }\n`;\n\nexport default avoidRefresh(InfoPage);\n","import { memo } from 'react';\n\nfunction compareProps(prevProps, nextProps) {\n  const nextLocation = nextProps.location;\n  const prevLocation = prevProps.location;\n\n  /*\n  return true if passing nextProps to render would return\n  the same result as passing prevProps to render,\n  otherwise return false\n  */\n  if (\n    nextLocation.pathname === prevLocation.pathname &&\n    nextLocation.search === prevLocation.search\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * A higher-order component that wraps a page component and avoids refreshing\n * when the page location.pathname or location.search hasn't changed. That is,\n * when only the hash changes because of clicking on an in-page link, it will\n * not cause a page refresh.\n */\nconst avoidRefresh = (component) => memo(component, compareProps);\n\nexport default avoidRefresh;\n"],"names":["avoidRefresh","_ref","data","location","frontmatter","body","tableOfContents","slug","mdx","theme","useTheme","_jsx","Layout","tableOfContentsData","items","children","ContentRenderer","compareProps","prevProps","nextProps","nextLocation","prevLocation","pathname","search","component","memo"],"sourceRoot":""}