"use strict";(globalThis.webpackChunkdesign_system=globalThis.webpackChunkdesign_system||[]).push([[7911],{"./packages/design-system/src/components/web-components/ds-text-field/ds-text-field.tsx":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{var _preactement_define__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./packages/design-system/src/components/web-components/preactement/define.ts"),_TextField__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./packages/design-system/src/components/TextField/TextField.tsx"),_wrapperUtils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/design-system/src/components/web-components/wrapperUtils.ts"),_shared_attributes_form__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/design-system/src/components/web-components/shared-attributes/form.ts"),_TextField_useLabelMask__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./packages/design-system/src/components/TextField/useLabelMask.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/preact/compat/jsx-runtime.mjs");const attributes=["autofocus","aria-disabled","class-name","disabled","field-class-name","inversed","label-mask","multiline","name","numeric","value","root-id","rows","size","type",..._shared_attributes_form__WEBPACK_IMPORTED_MODULE_2__.z];function getMaskFunction(value){switch(value){case"phone":return _TextField_useLabelMask__WEBPACK_IMPORTED_MODULE_4__.N_;case"zip":return _TextField_useLabelMask__WEBPACK_IMPORTED_MODULE_4__.AJ;case"ssn":return _TextField_useLabelMask__WEBPACK_IMPORTED_MODULE_4__.Nl;case"currency":return _TextField_useLabelMask__WEBPACK_IMPORTED_MODULE_4__.vP}}const Wrapper=_ref=>{let{autofocus,rootId,...otherProps}=_ref;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.tZ)(_TextField__WEBPACK_IMPORTED_MODULE_5__.n,{...otherProps,autoFocus:(0,_wrapperUtils__WEBPACK_IMPORTED_MODULE_1__.Mt)(autofocus),"aria-disabled":(0,_wrapperUtils__WEBPACK_IMPORTED_MODULE_1__.Mt)(otherProps.ariaDisabled),disabled:(0,_wrapperUtils__WEBPACK_IMPORTED_MODULE_1__.Mt)(otherProps.disabled),id:rootId,inversed:(0,_wrapperUtils__WEBPACK_IMPORTED_MODULE_1__.Mt)(otherProps.inversed),labelMask:getMaskFunction(otherProps.labelMask),multiline:(0,_wrapperUtils__WEBPACK_IMPORTED_MODULE_1__.Mt)(otherProps.multiline)})};(0,_preactement_define__WEBPACK_IMPORTED_MODULE_0__.O)("ds-text-field",(()=>Wrapper),{attributes,events:["onChange","onBlur"]})},"./packages/design-system/src/components/web-components/shared-attributes/form.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{z:()=>formAttrs});const formAttrs=["label","label-class-name","label-id","hint","hint-id","requirement-label","hint-class-name","error-id","error-placement","error-message","error-message-class-name"]},"./packages/design-system/src/components/web-components/wrapperUtils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function parseBooleanAttr(attr){return void 0!==attr&&"false"!==attr}function parseDateAttr(attr){return attr?new Date(attr):void 0}function parseIntegerAttr(attr){if(void 0!==attr)return parseInt(attr)}function parseJsonAttr(attr){return(str=>{try{JSON.parse(str)}catch(e){return!1}return!0})(attr)?JSON.parse(attr):attr}__webpack_require__.d(__webpack_exports__,{Mt:()=>parseBooleanAttr,Py:()=>parseDateAttr,RC:()=>parseJsonAttr,bD:()=>parseIntegerAttr})},"./packages/design-system/src/components/web-components/ds-autocomplete/ds-autocomplete.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,LabeledList:()=>LabeledList,LoadingMessage:()=>LoadingMessage,NoResults:()=>NoResults,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ds_autocomplete_stories});var compat_module=__webpack_require__("./node_modules/preact/compat/dist/compat.module.js"),dist=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs"),WebComponentDocTemplate=__webpack_require__("./.storybook/docs/WebComponentDocTemplate.mdx"),storybook=__webpack_require__("./packages/design-system/src/components/web-components/storybook.tsx"),preactement_define=__webpack_require__("./packages/design-system/src/components/web-components/preactement/define.ts"),Autocomplete=__webpack_require__("./packages/design-system/src/components/Autocomplete/Autocomplete.tsx"),wrapperUtils=__webpack_require__("./packages/design-system/src/components/web-components/wrapperUtils.ts"),TextField=__webpack_require__("./packages/design-system/src/components/TextField/TextField.tsx"),shared_attributes_form=__webpack_require__("./packages/design-system/src/components/web-components/shared-attributes/form.ts"),jsx_runtime=__webpack_require__("./node_modules/preact/compat/jsx-runtime.mjs");const attributes=["aria-clear-label","aria-complete-label","autofocus","class-name","clear-input-text","clear-search-button","value","items","loading-message","loading","menu-heading-id","menu-heading","name","no-results-message","root-id",...shared_attributes_form.z],Wrapper=_ref=>{let{autofocus,clearSearchButton,hint,value,items,label,loading,menuHeading,menuHeadingId,rootId,...otherProps}=_ref;return(0,jsx_runtime.tZ)(Autocomplete.F,{...otherProps,label:menuHeading,labelId:menuHeadingId,autoFocus:(0,wrapperUtils.Mt)(autofocus),clearSearchButton:(0,wrapperUtils.Mt)(clearSearchButton),id:rootId,items:(0,wrapperUtils.RC)(items),loading:(0,wrapperUtils.Mt)(loading),children:(0,jsx_runtime.tZ)(TextField.n,{label,hint,name:"autocomplete",value})})};(0,preactement_define.O)("ds-autocomplete",(()=>Wrapper),{attributes,events:[["onChange",selectedItem=>({detail:{selectedItem}})],["onInputValueChange",value=>({detail:{value}})]]});var uniqueId=__webpack_require__("./node_modules/lodash/uniqueId.js"),uniqueId_default=__webpack_require__.n(uniqueId);__webpack_require__("./packages/design-system/src/components/web-components/ds-text-field/ds-text-field.tsx");const ds_autocomplete_stories={title:"Web Components/ds-autocomplete",decorators:[storybook.h],parameters:{docs:{page:WebComponentDocTemplate.Z}},args:{"clear-input-text":"Clear search","clear-search-button":!0,"loading-message":"Loading...","no-results-message":"No results",name:"ds-autocomplete"},argTypes:{"aria-clear-label":{description:"Screen reader-specific label for the Clear search `<button>`. Intended to provide a longer, more descriptive explanation of the button's behavior.",control:"text"},"aria-complete-label":{description:'Control the `TextField` autocomplete attribute. Defaults to "off" to support accessibility. [Read more.](https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion)',control:"text"},autofocus:{description:"Sets the focus on the select during the first mount",control:"boolean"},children:{control:!1,table:{disable:!0}},"class-name":{description:"Additional classes to be added to the root element. Useful for adding utility classes.",control:"text"},"clear-input-text":{description:'Text rendered on the page if `clearInput` prop is passed. Default is "Clear search".',control:"text"},"clear-search-button":{description:"Removes the Clear search button when set to `false`",control:"boolean"},hint:{description:"An optional hint for the label",control:"text"},"hint-class-name":{control:"text",description:"Custom CSS class name(s) for the hint element"},items:{description:'An array of objects used to populate the suggestion list that appears below the input as users type. Passing an empty array will show a "No results" message. If you do not yet want to show results, this props should be undefined. This parameter needs to be stringified (please see examples for usage and [read more on the autocomplete docs](https://design.cms.gov/storybook/?path=/docs/components-autocomplete--docs):).',control:"text"},label:{description:"A label for the input",control:"text"},loading:{description:"Can be called when the `items` array is being fetched remotely, or will be delayed for more than 1-2 seconds.",control:"boolean"},"loading-message":{description:"Message users will see when the `loading` prop is passed to `Autocomplete`.",control:"text"},"menu-heading":{description:"Adds a heading to the top of the autocomplete list. This can be used to convey to the user that they're required to select an option from the autocomplete list.",control:"text"},"menu-heading-id":{description:"A unique `id` to be used on the child `TextField` label tag",control:"text"},name:{description:"The `input` field's `name` attribute.",control:"text"},"no-results-message":{description:"Message users will see when the `items` array returns empty and the `loading` prop is passed to `<Autocomplete />`.",control:"text"},"root-id":{description:"A unique ID for this element. A unique ID will be generated if one isn't provided.",control:"text"},textFieldHint:{table:{disable:!0}},textFieldLabel:{table:{disable:!0}},value:{description:"Input value",control:"text"}}},Template=args=>{const{items,textFieldLabel,textFieldHint,...autocompleteArgs}=args,[input,setInput]=(0,compat_module.useState)("");let filteredItems=null;return input.length>0&&items&&(filteredItems=items.filter((item=>!item.name||item.name.toLowerCase().includes(input.toLowerCase())))),(0,compat_module.useEffect)((()=>{const element=document.querySelector("ds-autocomplete");if(element){const handleOnChange=event=>(setInput(event.detail.selectedItem.name),(0,dist.aD)("ds-change")(event)),handleOnInputValueChange=event=>{(0,dist.aD)("ds-input-value-change")(event),setInput(event.detail.value)};return element.addEventListener("ds-change",handleOnChange),element.addEventListener("ds-input-value-change",handleOnInputValueChange),()=>{element.removeEventListener("ds-change",handleOnChange),element.removeEventListener("ds-input-value-change",handleOnInputValueChange)}}}),[]),(0,jsx_runtime.tZ)("ds-autocomplete",{...autocompleteArgs,items:JSON.stringify(filteredItems),label:textFieldLabel,hint:textFieldHint,value:input})};function makeItem(name,children){return{id:uniqueId_default()(),name,children}}const Default={render:Template,args:{textFieldLabel:"Enter and select a drug to see its cost under each plan.",textFieldHint:"Type a letter to see results, then use ARROW keys to change options, ENTER key to make a selection, ESC to dismiss.",items:[makeItem("Acetaminophen"),makeItem("Advil"),makeItem("Benadryl"),makeItem("Claritin"),makeItem("Detrol"),makeItem("Excedrin"),makeItem("Flonase"),makeItem("Gas-X"),makeItem("Hydrocortisone"),makeItem("Ibuprofen"),makeItem("Insulin glargine"),makeItem("Jublia"),makeItem("Ketoprofen"),makeItem("Lidocaine"),makeItem("Lunestra"),makeItem("Melatonin"),makeItem("Meloxicam"),makeItem("Neosporin"),makeItem("Oxycodone"),makeItem("Prednisone"),makeItem("Prilosec"),makeItem("Quinine"),makeItem("Robitussin"),makeItem("Sudafed"),makeItem("Tamiflu"),makeItem("Unisom"),makeItem("Vicodin"),makeItem("Warfarin"),makeItem("Xanax"),makeItem("Yonsa"),makeItem("Zyrtec")]}},LabeledList={render:Template,args:{textFieldLabel:"Search for and select your county.",textFieldHint:'Type "C" then use ARROW keys to change options, ENTER key to make a selection, ESC to dismiss.',"menu-heading":"Select from the options below:",items:[makeItem("Cook County, IL"),makeItem("Cook County, MD"),makeItem("Cook County, TN"),makeItem("Cook County, AK"),makeItem("Cook County, FL"),makeItem("Cook County, AL"),makeItem("Cook County, WA"),makeItem("Cook County, OR")]}},LoadingMessage={render:Template,args:{clearSearchButton:!1,loading:!0,items:[],textFieldLabel:"This will only show a loading message.",textFieldHint:"List should return string Loading to simulate async data call."}},NoResults={render:Template,args:{items:[],clearSearchButton:!1,textFieldLabel:'This will show a "no results" message.',textFieldHint:'Start typing, but you’ll only get a "no results" message.'}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {\n    textFieldLabel: 'Enter and select a drug to see its cost under each plan.',\n    textFieldHint: 'Type a letter to see results, then use ARROW keys to change options, ENTER key to make a selection, ESC to dismiss.',\n    items: [makeItem('Acetaminophen'), makeItem('Advil'), makeItem('Benadryl'), makeItem('Claritin'), makeItem('Detrol'), makeItem('Excedrin'), makeItem('Flonase'), makeItem('Gas-X'), makeItem('Hydrocortisone'), makeItem('Ibuprofen'), makeItem('Insulin glargine'), makeItem('Jublia'), makeItem('Ketoprofen'), makeItem('Lidocaine'), makeItem('Lunestra'), makeItem('Melatonin'), makeItem('Meloxicam'), makeItem('Neosporin'), makeItem('Oxycodone'), makeItem('Prednisone'), makeItem('Prilosec'), makeItem('Quinine'), makeItem('Robitussin'), makeItem('Sudafed'), makeItem('Tamiflu'), makeItem('Unisom'), makeItem('Vicodin'), makeItem('Warfarin'), makeItem('Xanax'), makeItem('Yonsa'), makeItem('Zyrtec')]\n  }\n}",...Default.parameters?.docs?.source}}},LabeledList.parameters={...LabeledList.parameters,docs:{...LabeledList.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: ({\n    textFieldLabel: 'Search for and select your county.',\n    textFieldHint: 'Type \"C\" then use ARROW keys to change options, ENTER key to make a selection, ESC to dismiss.',\n    'menu-heading': 'Select from the options below:',\n    items: [makeItem('Cook County, IL'), makeItem('Cook County, MD'), makeItem('Cook County, TN'), makeItem('Cook County, AK'), makeItem('Cook County, FL'), makeItem('Cook County, AL'), makeItem('Cook County, WA'), makeItem('Cook County, OR')]\n  } as any)\n}",...LabeledList.parameters?.docs?.source}}},LoadingMessage.parameters={...LoadingMessage.parameters,docs:{...LoadingMessage.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: ({\n    clearSearchButton: false,\n    loading: true,\n    items: [],\n    textFieldLabel: 'This will only show a loading message.',\n    textFieldHint: 'List should return string Loading to simulate async data call.'\n  } as any)\n}",...LoadingMessage.parameters?.docs?.source}}},NoResults.parameters={...NoResults.parameters,docs:{...NoResults.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: ({\n    items: [],\n    clearSearchButton: false,\n    textFieldLabel: 'This will show a \"no results\" message.',\n    textFieldHint: 'Start typing, but you’ll only get a \"no results\" message.'\n  } as any)\n}",...NoResults.parameters?.docs?.source}}};const __namedExportsOrder=["Default","LabeledList","LoadingMessage","NoResults"]}}]);