{"version":3,"file":"component---src-components-page-templates-info-page-tsx-content-file-path-content-patterns-zip-codes-mdx-a8a588332a17c9245c54.js","mappings":"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","sources":["webpack://@cmsgov/cms-design-system-docs/../design-system/dist/react-components/esm/Label/Label.js","webpack://@cmsgov/cms-design-system-docs/../design-system/dist/react-components/esm/TextField/useLabelMask.js","webpack://@cmsgov/cms-design-system-docs/../design-system/dist/react-components/esm/TextField/LabelMask.js","webpack://@cmsgov/cms-design-system-docs/../design-system/dist/react-components/esm/TextField/maskHelpers.js","webpack://@cmsgov/cms-design-system-docs/../design-system/dist/react-components/esm/TextField/Mask.js","webpack://@cmsgov/cms-design-system-docs/../design-system/dist/react-components/esm/TextField/TextField.js","webpack://@cmsgov/cms-design-system-docs/./content/patterns/zip-codes.mdx","webpack://@cmsgov/cms-design-system-docs/./src/components/page-templates/InfoPage.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport { Hint } from '../Hint';\nimport { InlineError } from '../InlineError';\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\n/**\n * The Label component describes individual form fields (as a `<label>`) or fieldsets (as\n * a `<legend>`). They are built in to all form fields in the design system, but they can\n * also be used on their own to create custom fields.\n *\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/label/).\n */\nexport const Label = props => {\n  const {\n    fieldId,\n    id,\n    children,\n    component,\n    hint,\n    hintId,\n    className,\n    inversed,\n    errorMessage,\n    errorId,\n    requirementLabel,\n    labelHidden,\n    ...labelProps\n  } = props;\n  if (process.env.NODE_ENV !== 'production' && (hint || hintId)) {\n    console.warn(\"[Deprecated]: Hints are now their own component called 'Hint'. Please render your 'Hint' directly instead of passing them to 'Label'.\");\n  }\n  if (process.env.NODE_ENV !== 'production' && errorMessage) {\n    console.warn(\"[Deprecated]: Passing 'errorMessage' to the 'Label' component is now deprecated. Please render your error message directly with the 'InlineError' component instead.\");\n  }\n  let hintElement;\n  if (hint || requirementLabel) {\n    hintElement = /*#__PURE__*/_jsx(Hint, {\n      requirementLabel: requirementLabel,\n      inversed: inversed,\n      id: hintId,\n      children: hint\n    });\n  }\n  let errorElement = errorMessage;\n  if (typeof errorMessage === 'string') {\n    errorElement = /*#__PURE__*/_jsx(InlineError, {\n      id: errorId,\n      children: errorMessage\n    });\n  }\n  let htmlFor = fieldId;\n  if (component === 'legend' && fieldId) {\n    console.warn('The `for` attribute is invalid for legends. Omitting `fieldId` from rendered element.');\n    htmlFor = undefined;\n  }\n  const ComponentType = component;\n  const classes = classNames('ds-c-label', className, inversed && 'ds-c-label--inverse');\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(ComponentType, {\n      className: classes,\n      htmlFor: htmlFor,\n      id: id,\n      \"aria-hidden\": labelHidden ? true : undefined,\n      ...labelProps,\n      children: children\n    }), hintElement, errorElement]\n  });\n};\nLabel.defaultProps = {\n  component: 'label'\n};\nexport default Label;","import { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport mergeIds from '../utilities/mergeIds';\nimport useId from '../utilities/useId';\n\n/**\n * Function for taking raw input and formatting it for a label mask. Passing `true` to\n * `valueOnly` will return just the formatted value entered.\n */\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/**\n * Regular expressions for matching commonly used masks, ensure capture groups are\n * set for each set of items that are separated by a delimiter, delimiters are\n * optional and so should be shown as well with the `?` optional flag.\n */\nexport const RE_DATE = /^(\\d{1,2})[\\D]?(\\d{1,2})?[\\D]?(\\d{1,4})?/;\nexport const RE_PHONE = /^\\(?(\\d{1,3})?\\)?[\\s.-]?(\\d{1,3})?[\\s.-]?(\\d{1,4})?/;\nexport const RE_SSN = /([*\\d]{1,3})[\\s.-]?([*\\d]{1,2})?[\\s.-]?([\\d{1,4}]+)?/;\nexport const RE_ZIP = /(\\d{1,5})/;\nexport const RE_CURRENCY = /\\$?[\\d,.-]*/;\n\n/**\n * This function returns a mask function which returns either the formatted match only, or\n * the formatted match + the hint substring which the regular expressions above match against\n * when determining what content has been filled in.\n */\nconst makeMask = (regex, hint, formatter) => {\n  return function () {\n    let rawInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let valueOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const match = regex.exec(rawInput);\n    const formattedMatch = match ? formatter(match) : '';\n    if (valueOnly) {\n      return formattedMatch;\n    }\n    const hintSub = hint.substring(formattedMatch.length);\n    return formattedMatch + hintSub;\n  };\n};\n\n/**\n * The date mask automatically pads months and days that are one digit\n */\nexport const DATE_MASK = makeMask(RE_DATE, 'MM/DD/YYYY', match => {\n  const [month, day, year] = match.slice(1);\n  const formattedDate = [\n  // We treat all non-numeric characters as a delimiter. If they're using a\n  // delimiter after a month or day, we interpret that as the user supplying\n  // a single digit for month or day, which we will automatically pad for them.\n  month && month.padStart(2, '0'), day && day.padStart(2, '0'), year].filter(s => s).join('/');\n  return formattedDate;\n});\n\n/**\n * Formatting for US phone numbers\n */\nexport const PHONE_MASK = makeMask(RE_PHONE, '###-###-####', match => {\n  return match.slice(1).filter(s => s).join('-');\n});\n\n/**\n * Formatting for US Postal codes, this could be expanded to allow for 9 digit numbers\n */\nexport const ZIP_MASK = makeMask(RE_ZIP, '#####', match => {\n  return match[1];\n});\n\n/**\n * Formatting for social security numbers.\n */\nexport const SSN_MASK = makeMask(RE_SSN, '###-##-####', match => {\n  /**\n   * for future notice, there are rules regarding social security numbers, these could be validated\n   * if we were to add error handling to useLabelMask as an additional set of functionality\n   * The first part should have 3 digits and should not be 000, 666, or between 900 and 999.\n   * The second part should have 2 digits and it should be from 01 to 99.\n   * The third part should have 4 digits and it should be from 0001 to 9999.\n   */\n  return match.slice(1).filter(s => s).join('-');\n});\n\n/**\n * Does the same thing as SSN_MASK except that it obfuscates the first five digits\n */\nexport const SSN_MASK_OBFUSCATED = (rawInput, valueOnly) => {\n  // Use the normal SSN_MASK function just to clean the raw input and format it\n  const formatted = SSN_MASK(rawInput, true);\n  // We only hide the first five digits of the SSNs\n  const obfuscation = '***-**';\n  let obfuscated;\n  if (formatted.length < obfuscation.length) {\n    obfuscated = obfuscation.substring(0, formatted.length);\n  } else {\n    obfuscated = obfuscation + formatted.substring(obfuscation.length);\n  }\n  return SSN_MASK(obfuscated, valueOnly);\n};\n\n/**\n * Currency mask is a little different, we need to modify the incoming content to strip\n * out any commas or dollar signs before evaluating it via the Intl.NumberFormat function.\n */\nexport const CURRENCY_MASK = makeMask(RE_CURRENCY, '$', match => {\n  const signed = match[0].includes('-');\n  const stripped = match[0].replace(/[^0-9.]/g, '');\n  const clipped = stripped.includes('.') ? stripped.slice(0, stripped.indexOf('.') + 3) : stripped;\n  const USDollar = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  });\n  const formatted = USDollar.format(Number(clipped)).replace(/\\.00/, '');\n  if (Number(clipped) > 0) {\n    return signed ? '-' + formatted : formatted;\n  } else {\n    return '';\n  }\n});\nexport function useLabelMask(maskFn, originalInputProps) {\n  // TODO: Once we're on React 18, we can use the `useId` hook\n  const generatedId = useId('label-mask--');\n  const labelMaskId = originalInputProps.id ? `${originalInputProps.id}__label-mask` : generatedId;\n  const [focused, setFocused] = useState(false);\n  const {\n    onFocus,\n    onBlur,\n    onChange\n  } = originalInputProps;\n  const value = originalInputProps.value?.toString() ?? originalInputProps.defaultValue?.toString() ?? '';\n  const [currentValue, setCurrentValue] = useState(value);\n  useEffect(() => {\n    setCurrentValue(value);\n  }, [value, setCurrentValue]);\n  const inputProps = {\n    ...originalInputProps,\n    defaultValue: undefined,\n    value: currentValue,\n    onChange: e => {\n      setCurrentValue(e.currentTarget.value);\n      if (onChange) {\n        onChange(e);\n      }\n    },\n    onFocus: e => {\n      if (onFocus) {\n        onFocus(e);\n      }\n      setFocused(true);\n    },\n    onBlur: e => {\n      const maskedValue = maskFn(currentValue, true);\n      e.currentTarget.value = maskedValue;\n      e.target.value = maskedValue;\n      setCurrentValue(maskedValue);\n      if (onChange) {\n        onChange(e);\n      }\n      if (onBlur) {\n        onBlur(e);\n      }\n      setFocused(false);\n    },\n    type: 'text',\n    inputMode: 'numeric',\n    'aria-describedby': mergeIds(originalInputProps['aria-describedby'], labelMaskId)\n  };\n  let currentMask = maskFn(currentValue);\n\n  // Date mask needs to return the default empty mask when not focused\n  if (maskFn === DATE_MASK && !focused) {\n    currentMask = maskFn('');\n  }\n\n  // SSN mask needs to obfuscate the SSN when not focused\n  if (maskFn === SSN_MASK && !focused && currentValue !== '') {\n    currentMask = SSN_MASK_OBFUSCATED(currentValue);\n    inputProps.value = SSN_MASK_OBFUSCATED(currentValue, true);\n  }\n  return {\n    labelMask: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"ds-c-label-mask\",\n      id: labelMaskId,\n      children: [/*#__PURE__*/_jsx(\"span\", {\n        className: classNames(focused && 'ds-u-visibility--screen-reader'),\n        children: currentMask\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: classNames(!focused && 'ds-u-display--none'),\n        \"aria-hidden\": \"true\",\n        children: currentMask\n      })]\n    }),\n    inputProps\n  };\n}\nexport default useLabelMask;","import { Children, cloneElement } from 'react';\nimport { useLabelMask } from './useLabelMask';\nimport { Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst LabelMask = props => {\n  const field = Children.only(props.children);\n  const {\n    labelMask,\n    inputProps\n  } = useLabelMask(props.labelMask, field.props);\n  const input = /*#__PURE__*/cloneElement(field, inputProps);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [labelMask, input]\n  });\n};\nexport default LabelMask;","// Deliminate chunks of integers\nconst maskDeliminatedRegex = {\n  phone: /(\\d{3})(\\d{1,3})?(\\d+)?/,\n  ssn: /([*\\d]{3})([*\\d]{1,2})?([*\\d]+)?/,\n  zip: /(\\d{5})(\\d*)/\n};\n\n/**\n * Remove everything that isn't a digit or asterisk\n * @param {String} value\n * @returns {String}\n */\nfunction toDigitsAndAsterisks(value) {\n  return value.replace(/[^\\d*]/g, '');\n}\n\n/**\n * Split value into groups and insert a hyphen deliminator between each\n * @param {String} value\n * @param {RegExp} rx - Regular expression with capturing groups\n * @returns {String}\n */\nfunction deliminateRegexGroups(value, rx) {\n  const matches = toDigitsAndAsterisks(value).match(rx);\n  if (matches && matches.length > 1) {\n    value = matches.slice(1).filter(a => !!a) // remove undefined groups\n    .join('-');\n  }\n  return value;\n}\n\n/**\n * Determines if a value is a valid string with numeric digits\n * @param {String} value\n * @param {String} mask\n * @returns {Boolean}\n */\nfunction isValueMaskable(value, mask) {\n  if (value && typeof value === 'string') {\n    const hasDigits = value.match(/\\d/);\n    const hasDigitsAsterisks = value.match(/[\\d*]/g);\n    if (hasDigits || hasDigitsAsterisks && mask === 'ssn') {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Performs various transforms to format provided string as currency.\n * @param {String} value - a string containing at least one digit\n * @returns {String}\n */\nexport function toCurrency(value) {\n  // Determine if the value is positive or negative.\n  const sign = value.indexOf('-') === 0 ? '-' : '';\n  // Remove all characters except digits and decimal points.\n  value = value.replace(/[^\\d.]/g, '');\n  // Remove all but the first decimal point.\n  const firstDecimalPointIndex = value.indexOf('.');\n  value = value.replace(/[.]/g, (match, index) => {\n    return index > firstDecimalPointIndex ? '' : match;\n  });\n  // Remove leading zeroes (we'll add one back later if needed).\n  value = value.replace(/^0+/g, '');\n  // Split into whole number and fractional parts based on decimal point.\n  let [whole, fractional = ''] = value.split('.');\n  // Add commas for readability (if applicable), or simply return zero.\n  // This \"replaces\" the zero-length space between groups of 3 digits with a comma.\n  // Demo of this regex: https://regex101.com/r/JPocnt/2\n  whole = whole === '' ? '0' : whole.replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, ',');\n  if (fractional !== '') {\n    if (fractional.length === 1) {\n      // Pad with a zero for two decimal places.\n      fractional = fractional.concat('0');\n    } else if (fractional.length > 2) {\n      // Cut all characters after the second decimal place.\n      fractional = fractional.slice(0, 2);\n    }\n    // Clear the fractional if there's no cents. Add the decimal back here.\n    fractional = fractional === '00' ? '' : `.${fractional}`;\n  }\n  return `${sign}${whole}${fractional}`;\n}\n\n/**\n * Returns the value with additional masking characters, or the same value back if invalid numeric string\n * @param {String} value\n * @returns {String}\n */\nexport function maskValue() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let mask = arguments.length > 1 ? arguments[1] : undefined;\n  if (isValueMaskable(value, mask)) {\n    if (mask === 'currency') {\n      value = toCurrency(value);\n    } else if (maskDeliminatedRegex[mask]) {\n      // Use deliminator regex to mask value and remove unwanted characters\n      // If the regex does not match, return the numeric digits.\n      value = deliminateRegexGroups(value, maskDeliminatedRegex[mask]);\n    }\n  }\n  return value;\n}\n\n/**\n * Remove mask characters from value, or the same value back if invalid numeric string\n * @param {String} value\n * @param {String} mask\n * @returns {String}\n */\nexport function unmaskValue(value, mask) {\n  if (isValueMaskable(value, mask)) {\n    if (mask === 'currency') {\n      // Preserve only digits, decimal point, or negative symbol\n      const matches = value.match(/^-|[\\d.]/g);\n      if (matches) {\n        value = matches.join('');\n      }\n    } else if (maskDeliminatedRegex[mask]) {\n      // Remove the deliminators and revert to single ungrouped string\n      value = toDigitsAndAsterisks(value);\n    }\n  }\n  return value;\n}","import { Children, PureComponent, cloneElement, isValidElement } from 'react';\nimport classNames from 'classnames';\nimport { maskValue, unmaskValue } from './maskHelpers';\n\n// TODO: Remove `maskValue` and `unmaskValue` exports with next major release (v3.x.x)\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport { maskValue, unmaskValue };\nconst maskPattern = {\n  phone: '[0-9-]*',\n  ssn: '[0-9-*]*',\n  zip: '[0-9-]*',\n  currency: '[0-9.,-]*'\n};\nconst maskOverlayContent = {\n  currency: '$'\n};\nexport class Mask extends PureComponent {\n  constructor(props) {\n    super(props);\n    const field = this.field();\n    const initialValue = field.props.value || field.props.defaultValue;\n    this.state = {\n      value: maskValue(initialValue, props.mask)\n    };\n  }\n  componentDidUpdate(prevProps) {\n    if (this.debouncedOnBlurEvent) {\n      this.field().props.onBlur(this.debouncedOnBlurEvent);\n      this.debouncedOnBlurEvent = null;\n    }\n    const fieldProps = this.field().props;\n    const prevField = Children.only(prevProps.children);\n    const prevFieldProps = /*#__PURE__*/isValidElement(prevField) ? prevField.props : {};\n    const isControlled = fieldProps.value !== undefined;\n    if (isControlled && prevFieldProps.value !== fieldProps.value) {\n      const {\n        mask\n      } = this.props;\n      // For controlled components, the value prop should ideally be changed by\n      // the controlling component once we've called onChange with our updates.\n      // If the change was triggered this way through user input, then the prop\n      // given should match our internal state when unmasked. If what we're\n      // given and what we have locally don't match, that means the controlling\n      // component has made its own unrelated change, so we should update our\n      // state and mask this new value.\n      if (unmaskValue(fieldProps.value, mask) !== unmaskValue(this.state.value, mask)) {\n        const value = maskValue(fieldProps.value || '', mask);\n        this.setState({\n          value\n        });\n      }\n    }\n  }\n  /**\n   * Get the child text field. Called as a method so that\n   * updates to the field cause the mask to re-render\n   * @returns {React.ReactElement} Child TextField\n   */\n  field() {\n    return Children.only(this.props.children);\n  }\n\n  /**\n   * To avoid a jarring experience for screen readers, we only\n   * add/remove characters after the field has been blurred,\n   * rather than when the user is typing in the field\n   * @param {Object} evt\n   * @param {React.Element} field - Child TextField\n   */\n  handleBlur(evt, field) {\n    const value = maskValue(evt.target.value, this.props.mask);\n\n    // We only debounce the onBlur when we know for sure that\n    // this component will re-render (AKA when the value changes)\n    // and when an onBlur callback is present\n    const debounce = value !== this.state.value && typeof field.props.onBlur === 'function';\n    if (debounce) {\n      // We need to retain a reference to the event after the callback\n      // has been called. We pass this onto the consuming app's onBlur\n      // only after the value has been manipulated – this way, the\n      // value returned by event.target.value is the value after masking\n      evt.persist();\n      this.debouncedOnBlurEvent = evt;\n    }\n    this.setState({\n      value\n    });\n    if (!debounce && typeof field.props.onBlur === 'function') {\n      // If we didn't debounce the onBlur event, then we need to\n      // call the onBlur callback from here\n      field.props.onBlur(evt);\n    }\n  }\n\n  /**\n   * @param {Object} evt\n   * @param {React.Element} field - Child TextField\n   */\n  handleChange(evt, field) {\n    this.setState({\n      value: evt.target.value\n    });\n    if (typeof field.props.onChange === 'function') {\n      field.props.onChange(evt);\n    }\n  }\n  render() {\n    const {\n      mask\n    } = this.props;\n    const field = this.field();\n    const modifiedTextField = /*#__PURE__*/cloneElement(field, {\n      defaultValue: undefined,\n      fieldClassName: classNames(field.props.fieldClassName, `ds-c-field--${mask}`),\n      onBlur: evt => this.handleBlur(evt, field),\n      onChange: evt => this.handleChange(evt, field),\n      value: this.state.value,\n      type: 'text',\n      inputMode: 'numeric',\n      pattern: maskPattern[this.props.mask]\n    });\n\n    // UI overlayed on top of a field to support certain masks\n    const maskOverlay = maskOverlayContent[mask] ? /*#__PURE__*/_jsx(\"div\", {\n      className: `ds-c-field__before ds-c-field__before--${mask}`,\n      children: maskOverlayContent[mask]\n    }) : null;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: `ds-c-field-mask ds-c-field-mask--${mask}`,\n      children: [maskOverlay, modifiedTextField]\n    });\n  }\n}\nexport default Mask;","import LabelMask from './LabelMask';\nimport Mask from './Mask';\nimport TextInput from './TextInput';\nimport classNames from 'classnames';\nimport cleanFieldProps from '../utilities/cleanFieldProps';\nimport describeField from '../utilities/describeField';\nimport useId from '../utilities/useId';\nimport { Label } from '../Label';\nimport { useLabelProps } from '../Label/useLabelProps';\nimport { useHint } from '../Hint/useHint';\nimport { useInlineError } from '../InlineError/useInlineError';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/**\n * For information about how and when to use this component,\n * [refer to its full documentation page](https://design.cms.gov/components/text-field/).\n */\nexport const TextField = props => {\n  const {\n    id: originalId,\n    mask,\n    labelMask,\n    className,\n    ...remainingProps\n  } = props;\n  const id = useId('text-field--', originalId);\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.type === 'number') {\n      console.warn(`Please use the 'numeric' prop instead of 'type=\"number\"' unless your user research suggests otherwise.`);\n    }\n    if (mask && labelMask) {\n      console.warn(\"The 'mask' and 'labelMask' fields are mutually exclusive. Please use either one or the other.\");\n    }\n  }\n  const {\n    errorId,\n    topError,\n    bottomError,\n    invalid\n  } = useInlineError({\n    ...props,\n    id\n  });\n  const {\n    hintId,\n    hintElement\n  } = useHint({\n    ...props,\n    id\n  });\n  const labelProps = useLabelProps({\n    ...props,\n    id\n  });\n  let input = /*#__PURE__*/_jsx(TextInput\n  // TypeScript doesn't know we set this in .defaultProps\n  , {\n    type: TextField.defaultProps.type,\n    ...cleanFieldProps(remainingProps),\n    id: id,\n    \"aria-invalid\": invalid,\n    \"aria-describedby\": describeField({\n      ...props,\n      errorId,\n      hintId\n    })\n  });\n\n  // See if we need to wrap the input based on some props\n  if (mask) {\n    input = /*#__PURE__*/_jsx(Mask, {\n      mask: mask,\n      children: input\n    });\n  } else if (labelMask) {\n    input = /*#__PURE__*/_jsx(LabelMask, {\n      labelMask: labelMask,\n      children: input\n    });\n  }\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: classNames('ds-u-clearfix',\n    // fixes issue where the label's margin is collapsed\n    className),\n    children: [/*#__PURE__*/_jsx(Label, {\n      ...labelProps,\n      fieldId: id\n    }), hintElement, topError, input, bottomError]\n  });\n};\nTextField.defaultProps = {\n  type: 'text'\n};\nexport default TextField;","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {TextField} from '@cmsgov/design-system';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {EmbeddedExample} = _components;\n  if (!EmbeddedExample) _missingMdxReference(\"EmbeddedExample\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"guidance\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#guidance\",\n    \"aria-label\": \"guidance permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Guidance\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"5-digit-zip-code-pattern\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#5-digit-zip-code-pattern\",\n    \"aria-label\": \"5 digit zip code pattern permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"5-digit ZIP code pattern\"), \"\\n\", React.createElement(_components.p, null, \"Use the \", React.createElement(_components.code, null, \"small\"), \" input size when data validation uses a 5-digit ZIP format.\"), \"\\n\", React.createElement(EmbeddedExample, null, React.createElement(TextField, {\n    size: \"small\",\n    label: \"ZIP code\",\n    name: \"zip-small\",\n    numeric: true\n  })), \"\\n\", React.createElement(_components.h3, {\n    id: \"9-digit-zip-code-pattern\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#9-digit-zip-code-pattern\",\n    \"aria-label\": \"9 digit zip code pattern permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"9-digit ZIP code pattern\"), \"\\n\", React.createElement(_components.p, null, \"Use the \", React.createElement(_components.code, null, \"medium\"), \" input size when validating against a stricter data set, such as the 9-digit format.\"), \"\\n\", React.createElement(EmbeddedExample, null, React.createElement(TextField, {\n    size: \"medium\",\n    label: \"ZIP code\",\n    name: \"zip-medium\",\n    numeric: true\n  })), \"\\n\", React.createElement(_components.h3, {\n    id: \"zip-code-with-geolocation-information\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#zip-code-with-geolocation-information\",\n    \"aria-label\": \"zip code with geolocation information permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"ZIP code with geolocation information\"), \"\\n\", React.createElement(_components.p, null, \"Use the default (\", React.createElement(_components.code, null, \"large\"), \") input size when the user must confirm or enter data containing County, State, and ZIP code.\"), \"\\n\", React.createElement(EmbeddedExample, null, React.createElement(TextField, {\n    label: \"Enter your ZIP code & select your location\",\n    name: \"zip-default\",\n    numeric: true\n  })), \"\\n\", React.createElement(_components.p, null, \"Consider user \", React.createElement(\"a\", {\n    href: \"#user-pain-points\"\n  }, \"pain points\"), \" when choosing a ZIP code input field size.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"interactions\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#interactions\",\n    \"aria-label\": \"interactions permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Interactions\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"To reduce cognitive load, use the 5-digit pattern which supports a mental model that widely exists.\"), \"\\n\", React.createElement(_components.li, null, \"Specific validation of numeric values 0–9, spaces, and dashes.\"), \"\\n\", React.createElement(_components.li, null, \"Let the user pick the ZIP code and county/state option from an autocomplete option. In some use cases the ZIP code alone is ambiguous because some ZIP codes are in more than one county.\"), \"\\n\", React.createElement(_components.li, null, \"Display the option the user selects from the autocomplete option list\"), \"\\n\", React.createElement(_components.li, null, \"Error prevention clearly indicates the user needs to enter a valid ZIP code before moving to the next item.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"user-pain-points\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#user-pain-points\",\n    \"aria-label\": \"user pain points permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"User pain points\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"A small-sized input field works for a 5-digit ZIP code but hides a 9-digit format.\"), \"\\n\", React.createElement(_components.li, null, \"A medium-sized input field accommodates a 9-digit ZIP format but hides additional data such as county and/or state.\"), \"\\n\", React.createElement(_components.li, null, \"Some users' browsers auto-populate the 9-digit  ZIP code, including the dash. This interaction can be problematic when using the small input field.\"), \"\\n\", React.createElement(_components.li, null, \"ZIP codes are not always consistent. They may not reflect the current geography, which can lead to problems when services rely on the accuracy of the ZIP code.\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/tamaradement/Desktop/corbalt/design-system/packages/docs/content/patterns/zip-codes.mdx\";\nimport ContentRenderer from '../content/ContentRenderer';\nimport Layout from '../layout/Layout';\nimport SEO from '../layout/DocSiteSeo';\nimport useTheme from '../../helpers/useTheme';\nimport {jsx as _jsx} from \"react/jsx-runtime\";\nconst InfoPage = _ref => {\n  let {children, data, location} = _ref;\n  const {frontmatter, tableOfContents, fields: {slug}} = data.mdx;\n  const theme = useTheme();\n  return _jsx(Layout, {\n    frontmatter: frontmatter,\n    location: location,\n    slug: slug,\n    theme: theme,\n    tableOfContentsData: tableOfContents === null || tableOfContents === void 0 ? void 0 : tableOfContents.items,\n    children: _jsx(ContentRenderer, {\n      theme: theme,\n      children: children\n    })\n  });\n};\nexport const Head = _ref2 => {\n  let {data, location} = _ref2;\n  const {frontmatter, fields: {slug}} = data.mdx;\n  return _jsx(SEO, {\n    frontmatter: frontmatter,\n    slug: slug,\n    location: location\n  });\n};\nconst query = \"3197591104\";\nInfoPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(InfoPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["Label","props","fieldId","id","children","component","hint","hintId","className","inversed","errorMessage","errorId","requirementLabel","labelHidden","labelProps","hintElement","_jsx","Hint","errorElement","InlineError","htmlFor","console","warn","undefined","ComponentType","classes","classNames","_jsxs","_Fragment","defaultProps","makeMask","regex","formatter","rawInput","arguments","length","valueOnly","match","exec","formattedMatch","substring","DATE_MASK","month","day","year","slice","padStart","filter","s","join","SSN_MASK","SSN_MASK_OBFUSCATED","formatted","obfuscation","obfuscated","signed","includes","stripped","replace","clipped","indexOf","Intl","NumberFormat","style","currency","format","Number","useLabelMask","maskFn","originalInputProps","_ref","_originalInputProps$v","_originalInputProps$v2","_originalInputProps$d","generatedId","useId","labelMaskId","focused","setFocused","useState","onFocus","onBlur","onChange","value","toString","defaultValue","currentValue","setCurrentValue","useEffect","inputProps","e","currentTarget","maskedValue","target","type","inputMode","mergeIds","currentMask","labelMask","field","Children","only","input","cloneElement","maskDeliminatedRegex","phone","ssn","zip","toDigitsAndAsterisks","isValueMaskable","mask","hasDigits","hasDigitsAsterisks","maskValue","sign","firstDecimalPointIndex","index","whole","fractional","split","concat","toCurrency","rx","matches","a","deliminateRegexGroups","unmaskValue","maskPattern","maskOverlayContent","_PureComponent","Mask","_this","call","initialValue","state","_inheritsLoose","_proto","prototype","componentDidUpdate","prevProps","this","debouncedOnBlurEvent","fieldProps","prevField","prevFieldProps","isValidElement","setState","handleBlur","evt","debounce","persist","handleChange","render","modifiedTextField","fieldClassName","pattern","maskOverlay","PureComponent","TextField","originalId","remainingProps","topError","bottomError","invalid","useInlineError","useHint","useLabelProps","TextInput","cleanFieldProps","describeField","LabelMask","_createMdxContent","_components","Object","assign","h2","span","h3","p","code","ul","li","_provideComponents","components","EmbeddedExample","Error","_missingMdxReference","React","position","href","dangerouslySetInnerHTML","__html","size","label","name","numeric","wrapper","MDXLayout","InfoPage","data","location","frontmatter","tableOfContents","fields","slug","mdx","theme","useTheme","Layout","tableOfContentsData","items","ContentRenderer","Head","_ref2","SEO","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}