{"version":3,"file":"component---src-components-page-templates-blog-page-tsx-c178ce6fa8789b286815.js","mappings":"oRAkBA,EARiB,SAAC,GAAkC,IAAhCA,EAA+B,EAA/BA,UAClB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAD,CAASC,MAAM,aAAaC,QAAQ,cAAcJ,UAAWA,EAA7D,UACEC,EAAAA,EAAAA,KAAAA,OAAAA,CAAMI,EAAE,kOAHd,E,6mBCSA,IAgDA,EAhDqB,SAAC,GAAmE,IAAD,IAAhEC,SAAAA,OAAgE,MAArD,4BAAqD,EACtF,GAAgCC,EAAAA,EAAAA,WAAS,GAAlCC,EAAP,KAAiBC,EAAjB,KAEA,SAASC,EAAYC,GACnBC,OAAOC,SACJC,cACAC,WAAW,YACXC,aAAa,UAAWL,EAAU,MAAQ,MAC1CM,OACHR,GAAY,EATwE,CAatF,IAAMS,EAAa,OAEbC,EAAkBX,EACpB,CACEY,UAAW,UACXC,MAAO,CAELC,QAAS,eACTJ,WAAAA,IAGJ,CACEK,OAAQ,cACRF,MAAO,CAAEH,WAAAA,IAGf,OACEjB,EAAAA,EAAAA,KAACuB,EAAAA,EAAD,OAAWL,GAAX,IAA4BM,UAAQ,EAACzB,UAAU,qBAA/C,SACGQ,GACCP,EAAAA,EAAAA,KAAAA,EAAAA,SAAAA,CAAAA,SAAAA,kCAEAyB,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,CACGpB,GACDL,EAAAA,EAAAA,KAAC0B,EAAAA,EAAD,CAAQ3B,UAAU,sBAAsB4B,QAAS,kBAAMlB,GAAY,EAAnE,oBAGAT,EAAAA,EAAAA,KAAC0B,EAAAA,EAAD,CAAQ3B,UAAU,sBAAsB4B,QAAS,kBAAMlB,GAAY,EAAnE,uBAvCV,EC8CA,GAAemB,EAAAA,EAAAA,IAnDE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SACxB,EAAqDD,EAAKE,IAAlDC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,gBAAiBC,EAA5C,EAA4CA,KACtCC,GAAQC,EAAAA,EAAAA,KACRC,GACJb,EAAAA,EAAAA,MAACc,EAAAA,KAAD,CAAMC,GAAG,SAAT,WACExC,EAAAA,EAAAA,KAACyC,EAAD,CAAU1C,UAAU,yBADtB,wBAMF,OACEC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAD,CACEV,YAAaA,EACbF,SAAUA,EACVK,KAAMA,EACNC,MAAOA,EACPO,oBAAqBT,aAAF,EAAEA,EAAiBU,MACtCC,YACEpB,EAAAA,EAAAA,MAAAA,SAAAA,CAAQ1B,UAAU,wFAAlB,WACEC,EAAAA,EAAAA,KAAAA,MAAAA,CAAAA,SAAMsC,KACNtC,EAAAA,EAAAA,KAAAA,KAAAA,CAAID,UAAU,mEAAd,SACGiC,EAAY9B,SAEfF,EAAAA,EAAAA,KAAC8C,EAAAA,EAAD,CAAaC,KAAMf,EAAYe,UAZrC,UAgBEtB,EAAAA,EAAAA,MAAAA,MAAAA,CAAK1B,UAAU,qBAAf,WACEC,EAAAA,EAAAA,KAACgD,EAAAA,EAAD,CAAiBnB,KAAMI,EAAMG,MAAOA,KACpCpC,EAAAA,EAAAA,KAACiD,EAAD,KACAjD,EAAAA,EAAAA,KAAAA,MAAAA,CAAKD,UAAU,qBAAf,SAAqCuC,QA9B7C,G,qCCZA,SAASY,EAAaC,EAAWC,GAC/B,IAAMC,EAAeD,EAAUtB,SACzBwB,EAAeH,EAAUrB,SAO/B,OACEuB,EAAaE,WAAaD,EAAaC,UACvCF,EAAaG,SAAWF,EAAaE,MAKxC,CAUD,IAFqB,SAACC,GAAD,OAAeC,EAAAA,EAAAA,MAAKD,EAAWP,EAApD,C","sources":["webpack://@cmsgov/cms-design-system-docs/./src/components/icons/BackIcon.tsx","webpack://@cmsgov/cms-design-system-docs/./src/components/content/PageFeedback.tsx","webpack://@cmsgov/cms-design-system-docs/./src/components/page-templates/BlogPage.tsx","webpack://@cmsgov/cms-design-system-docs/./src/helpers/avoidRefresh.ts"],"sourcesContent":["import React from 'react';\nimport { SvgIcon } from '@cmsgov/design-system';\n\ninterface BackIconProps {\n  className?: string;\n}\n\n/**\n * SVG for Email logo\n */\nconst BackIcon = ({ className }: BackIconProps) => {\n  return (\n    <SvgIcon title=\"Email logo\" viewBox=\"0 0 448 512\" className={className}>\n      <path d=\"M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z\" />\n    </SvgIcon>\n  );\n};\n\nexport default BackIcon;\n","import React from 'react';\nimport { Alert, Button } from '@cmsgov/design-system';\nimport { useState } from 'react';\n\ndeclare global {\n  interface Window {\n    newrelic: {\n      interaction: any;\n    };\n  }\n}\n\nexport interface PageFeedbackProps {\n  question?: string;\n}\n\n/**\n * Asks a feedback question to the user and reports the answer to New Relic\n */\nconst PageFeedback = ({ question = 'Was this article helpful?' }: PageFeedbackProps) => {\n  const [answered, setAnswered] = useState(false);\n\n  function handleClick(helpful: boolean) {\n    window.newrelic\n      .interaction()\n      .actionText('Feedback')\n      .setAttribute('helpful', helpful ? 'yes' : 'no')\n      .save();\n    setAnswered(true);\n  }\n\n  // Use a consistent line-height between alerts so we don't get a content shift\n  const lineHeight = '40px';\n\n  const stateAlertProps = answered\n    ? {\n        variation: 'success' as const,\n        style: {\n          // Don't have the feedback span the whole width\n          display: 'inline-block',\n          lineHeight,\n        },\n      }\n    : {\n        weight: 'lightweight' as const,\n        style: { lineHeight },\n      };\n\n  return (\n    <Alert {...stateAlertProps} hideIcon className=\"ds-u-margin-top--4\">\n      {answered ? (\n        <>Thank you for your feedback!</>\n      ) : (\n        <>\n          {question}\n          <Button className=\"ds-u-margin-left--2\" onClick={() => handleClick(true)}>\n            Yes\n          </Button>\n          <Button className=\"ds-u-margin-left--1\" onClick={() => handleClick(false)}>\n            No\n          </Button>\n        </>\n      )}\n    </Alert>\n  );\n};\n\nexport default PageFeedback;\n\n// window.newrelic.interaction().actionText('Liked the article').setAttribute('helpful', 'no').save()\n","import React from 'react';\nimport ContentRenderer from '../content/ContentRenderer';\nimport Layout from '../layout/Layout';\nimport avoidRefresh from '../../helpers/avoidRefresh';\nimport PublishDate from '../content/PublishDate';\nimport useTheme from '../../helpers/useTheme';\nimport { MdxQuery } from '../../helpers/graphQLTypes';\nimport { graphql, Link } from 'gatsby';\nimport BackIcon from '../icons/BackIcon';\nimport PageFeedback from '../content/PageFeedback';\n\n/**\n * Template for information content pages.\n */\nconst BlogPage = ({ data, location }: MdxQuery) => {\n  const { frontmatter, body, tableOfContents, slug } = data.mdx;\n  const theme = useTheme();\n  const backLink = (\n    <Link to=\"/blog/\">\n      <BackIcon className=\"ds-u-margin-right--1\" />\n      See other releases\n    </Link>\n  );\n\n  return (\n    <Layout\n      frontmatter={frontmatter}\n      location={location}\n      slug={slug}\n      theme={theme}\n      tableOfContentsData={tableOfContents?.items}\n      pageHeader={\n        <header className=\"ds-u-padding--3 ds-u-sm-padding-x--6 ds-u-sm-padding-bottom--3 ds-u-sm-padding-top--2\">\n          <div>{backLink}</div>\n          <h1 className=\"ds-text-heading--4xl ds-u-sm-margin-top--2 ds-u-margin-bottom--1\">\n            {frontmatter.title}\n          </h1>\n          <PublishDate date={frontmatter.date} />\n        </header>\n      }\n    >\n      <div className=\"ds-u-measure--wide\">\n        <ContentRenderer data={body} theme={theme} />\n        <PageFeedback />\n        <div className=\"ds-u-margin-top--4\">{backLink}</div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      id\n      frontmatter {\n        title\n        date\n      }\n      slug\n      body\n      tableOfContents(maxDepth: 3)\n    }\n  }\n`;\n\nexport default avoidRefresh(BlogPage);\n","import { memo } from 'react';\n\nfunction compareProps(prevProps, nextProps) {\n  const nextLocation = nextProps.location;\n  const prevLocation = prevProps.location;\n\n  /*\n  return true if passing nextProps to render would return\n  the same result as passing prevProps to render,\n  otherwise return false\n  */\n  if (\n    nextLocation.pathname === prevLocation.pathname &&\n    nextLocation.search === prevLocation.search\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * A higher-order component that wraps a page component and avoids refreshing\n * when the page location.pathname or location.search hasn't changed. That is,\n * when only the hash changes because of clicking on an in-page link, it will\n * not cause a page refresh.\n */\nconst avoidRefresh = (component) => memo(component, compareProps);\n\nexport default avoidRefresh;\n"],"names":["className","_jsx","SvgIcon","title","viewBox","d","question","useState","answered","setAnswered","handleClick","helpful","window","newrelic","interaction","actionText","setAttribute","save","lineHeight","stateAlertProps","variation","style","display","weight","Alert","hideIcon","_jsxs","Button","onClick","avoidRefresh","data","location","mdx","frontmatter","body","tableOfContents","slug","theme","useTheme","backLink","Link","to","BackIcon","Layout","tableOfContentsData","items","pageHeader","PublishDate","date","ContentRenderer","PageFeedback","compareProps","prevProps","nextProps","nextLocation","prevLocation","pathname","search","component","memo"],"sourceRoot":""}