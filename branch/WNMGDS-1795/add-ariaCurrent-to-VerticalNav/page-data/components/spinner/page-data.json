{
    "componentChunkName": "component---src-components-info-page-tsx",
    "path": "/components/spinner",
    "result": {"data":{"mdx":{"id":"a9353433-0382-551e-89ca-4aea51c09fb2","frontmatter":{"title":"Spinner","status":null,"relatedUswdsGuidance":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Spinner\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar EmbeddedExample = makeShortcode(\"EmbeddedExample\");\nvar StorybookExample = makeShortcode(\"StorybookExample\");\nvar PropTable = makeShortcode(\"PropTable\");\nvar ComponentThemeOptions = makeShortcode(\"ComponentThemeOptions\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Spinners signify that the application is waiting for an asynchronous operation to complete.\"), mdx(\"h2\", null, \"Changing the spinner color\"), mdx(\"p\", null, \"To change the color of the spinner, one only has to change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" property of the spinner element. This can be done with the standard Design System \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/design-system/branch/WNMGDS-1795/add-ariaCurrent-to-VerticalNav/foundation/color/\"\n  }, \"utility classes\"), \". The color of the spinner also defaults to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inherit\"), \", so it will take on the color of the text in its parent container.\"), mdx(\"h2\", null, \"Use inside buttons\"), mdx(EmbeddedExample, {\n    mdxType: \"EmbeddedExample\"\n  }, mdx(React.Fragment, null, mdx(Button, {\n    className: \"ds-u-margin-right--2\",\n    mdxType: \"Button\"\n  }, mdx(Spinner, {\n    size: \"small\",\n    mdxType: \"Spinner\"\n  }), \" Loading\", ' '), mdx(Button, {\n    variation: \"primary\",\n    className: \"ds-u-margin-right--2\",\n    mdxType: \"Button\"\n  }, mdx(Spinner, {\n    size: \"small\",\n    inversed: true,\n    mdxType: \"Spinner\"\n  }), \" Loading\", ' '), mdx(Button, {\n    size: \"big\",\n    className: \"ds-u-margin-right--2\",\n    mdxType: \"Button\"\n  }, mdx(Spinner, {\n    mdxType: \"Spinner\"\n  }), \" Big button\", ' '), mdx(Button, {\n    size: \"big\",\n    variation: \"success\",\n    className: \"ds-u-margin-right--2\",\n    mdxType: \"Button\"\n  }, mdx(Spinner, {\n    mdxType: \"Spinner\"\n  }), \" Big green button\", ' '))), mdx(\"h2\", null, \"\\\"Filled\\\" mode\"), mdx(\"p\", null, \"To provide more contrast when being rendered over other content, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".ds-c-spinner--filled\"), \" class can be added to give it an appropriately shaped background with some padding.\"), mdx(EmbeddedExample, {\n    mdxType: \"EmbeddedExample\"\n  }, mdx(React.Fragment, null, mdx(\"div\", {\n    className: \"ds-u-fill--background-inverse ds-u-color--base-inverse ds-u-padding--2\",\n    style: {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"p\", null, loremIpsumGenerator('l')), mdx(\"div\", {\n    className: \"ds-u-display--flex ds-u-justify-content--center ds-u-align-items--center\",\n    style: {\n      \"position\": \"absolute\",\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"top\": \"0\",\n      \"left\": \"0\"\n    }\n  }, mdx(Spinner, {\n    filled: true,\n    \"aria-valuetext\": \"Loading\",\n    mdxType: \"Spinner\"\n  }))), mdx(\"div\", {\n    className: \"ds-u-padding--2\",\n    style: {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"p\", null, loremIpsumGenerator('l')), mdx(\"div\", {\n    className: \"ds-u-display--flex ds-u-justify-content--center ds-u-align-items--center\",\n    style: {\n      \"position\": \"absolute\",\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"top\": \"0\",\n      \"left\": \"0\"\n    }\n  }, mdx(Spinner, {\n    filled: true,\n    inversed: true,\n    \"aria-valuetext\": \"Loading\",\n    mdxType: \"Spinner\"\n  }))))), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"<Spinner>\")), mdx(StorybookExample, {\n    componentName: \"spinner\",\n    sourceFilePath: \"components/Spinner/Spinner.tsx\",\n    storyId: \"components-spinner--default-spinner\",\n    mdxType: \"StorybookExample\"\n  }), mdx(\"h3\", null, \"Props\"), mdx(PropTable, {\n    componentName: \"Spinner\",\n    mdxType: \"PropTable\"\n  }), mdx(\"h2\", null, \"Guidance\"), mdx(\"h3\", null, \"When to use\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To indicate a loading state for quick asynchronous tasks\")), mdx(\"h3\", null, \"When to consider alternatives\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When the process it is waiting for takes a long time. Spinners provide no feedback other than that \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"we're waiting\"), \", so long processes can make users nervous that something went wrong. Consider adding descriptive text or another UX pattern entirely.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When you are loading a whole page of content. If all you show the user is a spinner, the user may spend several seconds watching the spinner to be surprised with all the content all at once. Consider using a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.lukew.com/ff/entry.asp?1797\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"skeleton screen\")), \" so the user knows what to expect.\")), mdx(\"h3\", null, \"Usage\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the process takes a long time, use something else.\")), mdx(\"h3\", null, \"Accessibility\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The Spinner element should have an \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-valuetext_attribute\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"aria-valuetext\")), \" attribute with a value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"loading\"), \" to provide a human readable text alternative for screen readers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When placed within a parent container, the parent element should include several ARIA attributes: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-relevant\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-live\"), \", and optionally \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-atomic\"), \".\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-relevant\"), \" may include \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"additions\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"text\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"removals\"), \". If a section will have items added or removed, use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"additions removals\"), \". If there will be additions or text changes without explicit removals, use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"additions text\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-live\"), \" should be set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"polite\"), \" for a screen reader to speak the changes whenever the user is idle. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-live=\\\"assertive\\\"\"), \" should only be used in situations that require a user\", \"\\u2019\", \"s immediate attention.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"By default, a screen reader will only speak the contents of a changed node, and not the entire contents of the element. Set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-atomic=\\\"true\\\"\"), \" for cases, such as an address, where a screen reader should read the contents of the entire element.\")))), mdx(\"h2\", null, \"Customization\"), mdx(\"p\", null, \"The following Sass variables can be overridden to customize Spinner components:\"), mdx(ComponentThemeOptions, {\n    componentname: \"spinner\",\n    mdxType: \"ComponentThemeOptions\"\n  }), mdx(\"h3\", null, \"Learn more\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.nngroup.com/articles/response-times-3-important-limits/\"\n  }, \"Response Times\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.nngroup.com/articles/progress-indicators/\"\n  }, \"Progress Indicators\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://paper.dropbox.com/doc/Loading-patterns-v0x8Xych1PbZQXOlbP3L6\"\n  }, \"GOV.UK Loading patterns discussion\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.lukew.com/ff/entry.asp?1797\"\n  }, \"Avoid the Spinner\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\"\n  }, \"ARIA Live Regions\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#changing-the-spinner-color","title":"Changing the spinner color"},{"url":"#use-inside-buttons","title":"Use inside buttons"},{"url":"#filled-mode","title":"\"Filled\" mode"},{"url":"#spinner","title":"<Spinner>"},{"url":"#guidance","title":"Guidance"},{"url":"#customization","title":"Customization"}]}}},"pageContext":{"id":"a9353433-0382-551e-89ca-4aea51c09fb2"}},
    "staticQueryHashes": ["1050346478","3750824424"]}