"use strict";(globalThis.webpackChunkdesign_system=globalThis.webpackChunkdesign_system||[]).push([[335],{"./packages/design-system/src/components/Autocomplete/Autocomplete.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>Autocomplete,Z:()=>Autocomplete_Autocomplete});var compat_module=__webpack_require__("./node_modules/preact/compat/dist/compat.module.js"),Button=__webpack_require__("./packages/design-system/src/components/Button/Button.tsx"),DropdownMenu=__webpack_require__("./packages/design-system/src/components/Dropdown/DropdownMenu.tsx"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),mergeRefs=__webpack_require__("./packages/design-system/src/components/utilities/mergeRefs.ts"),useId=__webpack_require__("./packages/design-system/src/components/utilities/useId.ts"),config=__webpack_require__("./packages/design-system/src/components/config.ts"),react_aria=__webpack_require__("./packages/design-system/src/components/react-aria/index.js"),TextField=__webpack_require__("./packages/design-system/src/components/TextField/TextField.tsx"),DropdownMenuOption=__webpack_require__("./packages/design-system/src/components/Dropdown/DropdownMenuOption.tsx"),jsx_runtime=__webpack_require__("./node_modules/preact/compat/jsx-runtime.mjs");function renderStatusMessage(message){return(0,jsx_runtime.tZ)("li",{className:"ds-c-autocomplete__menu-item-message",role:"option",children:message})}function getTextFieldChild(children){let textField;return compat_module.Children.forEach(children,(child=>{(function isTextField(child){if(!child||!(0,compat_module.isValidElement)(child))return!1;const componentName=child.type?.displayName||child.type?.name;return child.type===TextField.n||"TextField"===componentName})(child)&&(textField=child)})),textField}function getActiveDescendant(rootId,state,items){const index=(items??[]).findIndex((item=>state.selectionManager.focusedKey===item.id));return(0,DropdownMenuOption.cA)(rootId,index)}function removeUndefined(obj){return Object.keys(obj).forEach((key=>void 0===obj[key]&&delete obj[key])),obj}try{renderStatusMessage.displayName="renderStatusMessage",renderStatusMessage.__docgenInfo={description:"",displayName:"renderStatusMessage",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/design-system/src/components/Autocomplete/utils.tsx#renderStatusMessage"]={docgenInfo:renderStatusMessage.__docgenInfo,name:"renderStatusMessage",path:"packages/design-system/src/components/Autocomplete/utils.tsx#renderStatusMessage"})}catch(__react_docgen_typescript_loader_error){}try{getTextFieldChild.displayName="getTextFieldChild",getTextFieldChild.__docgenInfo={description:"",displayName:"getTextFieldChild",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/design-system/src/components/Autocomplete/utils.tsx#getTextFieldChild"]={docgenInfo:getTextFieldChild.__docgenInfo,name:"getTextFieldChild",path:"packages/design-system/src/components/Autocomplete/utils.tsx#getTextFieldChild"})}catch(__react_docgen_typescript_loader_error){}try{getActiveDescendant.displayName="getActiveDescendant",getActiveDescendant.__docgenInfo={description:"Assumes that it will find the item, so only use in cases where react-aria\nwould define an aria-activedescendent",displayName:"getActiveDescendant",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/design-system/src/components/Autocomplete/utils.tsx#getActiveDescendant"]={docgenInfo:getActiveDescendant.__docgenInfo,name:"getActiveDescendant",path:"packages/design-system/src/components/Autocomplete/utils.tsx#getActiveDescendant"})}catch(__react_docgen_typescript_loader_error){}try{removeUndefined.displayName="removeUndefined",removeUndefined.__docgenInfo={description:"Mutates the original object, deleting properties whose values are undefined.\nReturns the object.",displayName:"removeUndefined",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/design-system/src/components/Autocomplete/utils.tsx#removeUndefined"]={docgenInfo:removeUndefined.__docgenInfo,name:"removeUndefined",path:"packages/design-system/src/components/Autocomplete/utils.tsx#removeUndefined"})}catch(__react_docgen_typescript_loader_error){}var i18n=__webpack_require__("./packages/design-system/src/components/i18n.ts");const Autocomplete=props=>{const id=(0,useId.Z)("autocomplete--",props.id),menuId=`${id}__menu`,{ariaClearLabel,autoCompleteLabel,autoFocus,children,className,clearInputText,clearSearchButton,focusTrigger,inputRef:userInputRef,items,itemToString,label:menuHeading,labelId:menuHeadingId,loading,loadingMessage,noResultsMessage,onChange,onInputValueChange,...autocompleteProps}=props;let statusMessage,reactStatelyItems=[];items?.length?reactStatelyItems=function renderReactStatelyItems(items,itemToString){return items.map((item=>{const{id,name,children,isResult,...extraAttrs}=item;return(0,compat_module.createElement)(react_aria.ck,{...extraAttrs,textValue:name??itemToString?.(item),key:id},children??name)}))}(items,itemToString):loading?statusMessage=renderStatusMessage(loadingMessage??(0,i18n.t)("autocomplete.loadingMessage")):items&&(statusMessage=renderStatusMessage(noResultsMessage??(0,i18n.t)("autocomplete.noResultsMessage")));const textField=getTextFieldChild(children),size=textField.props.size,labelId=textField.props.labelId??`${id}__label`,state=(0,react_aria.P)({...autocompleteProps,allowsCustomValue:!0,allowsEmptyCollection:!0,children:reactStatelyItems,inputValue:textField.props.value,onInputChange:onInputValueChange?value=>{onInputValueChange(value)}:void 0,onSelectionChange:onChange?selectedKey=>{const selectedItem=items?items.find((item=>selectedKey===item.id)):void 0;selectedItem&&onChange(selectedItem)}:void 0}),inputRef=(0,compat_module.useRef)(),listBoxRef=(0,compat_module.useRef)(),wrapperRef=(0,compat_module.useRef)(),useComboboxProps=(0,react_aria.E_)({...autocompleteProps,name:textField.props.name,label:textField.props.label,isDisabled:textField.props.disabled,inputRef,listBoxRef,popoverRef:listBoxRef},state),bottomError=("bottom"===textField.props.errorPlacement||"bottom"===(0,config.vc)().errorPlacementDefault)&&null!=textField.props.errorMessage,errorMessageClassName=classnames_default()(textField.props.errorMessageClassName,bottomError&&"ds-c-autocomplete__error-message",bottomError&&clearSearchButton&&"ds-c-autocomplete__error-message-clear-btn"),textFieldProps=removeUndefined({...useComboboxProps.inputProps,autoComplete:autoCompleteLabel,autoFocus:autoFocus||focusTrigger,"aria-activedescendant":useComboboxProps.inputProps["aria-activedescendant"]?getActiveDescendant(id,state,items):void 0,"aria-controls":menuId,"aria-labelledby":labelId,errorMessageClassName,id,labelId,inputRef:(0,mergeRefs.Z)([inputRef,userInputRef]),onFocus:event=>{useComboboxProps.inputProps.onFocus?.(event),textField.props.onFocus?.(event),state.open()},onChange:event=>{useComboboxProps.inputProps.onChange?.(event),textField.props.onChange?.(event)},onBlur:event=>{useComboboxProps.inputProps.onBlur?.(event),textField.props.onBlur?.(event)},onTouchEnd:event=>{useComboboxProps.inputProps.onTouchEnd?.(event),textField.props.onTouchEnd?.(event)},onKeyDown:event=>{useComboboxProps.inputProps.onKeyDown?.(event),textField.props.onKeyDown?.(event)}}),rootClassName=classnames_default()("ds-c-autocomplete",className);return(0,jsx_runtime.BX)("div",{className:rootClassName,ref:wrapperRef,children:[(0,compat_module.cloneElement)(textField,textFieldProps),(state.isOpen&&reactStatelyItems.length>0||state.isFocused&&statusMessage)&&(0,jsx_runtime.tZ)(DropdownMenu.Z,{...useComboboxProps.listBoxProps,componentClass:"ds-c-autocomplete",heading:menuHeading,labelId:menuHeadingId,menuId,rootId:id,size,state,triggerRef:wrapperRef,listBoxRef,children:statusMessage}),clearSearchButton&&(0,jsx_runtime.tZ)(Button.Z,{"aria-label":ariaClearLabel??(0,i18n.t)("autocomplete.ariaClearLabel"),className:"ds-u-padding-right--0 ds-c-autocomplete__clear-btn",onClick:()=>{state.setSelectedKey(null),state.setInputValue(""),state.selectedKey&&onChange?.(null)},size:"small",variation:"ghost",disabled:textField.props.disabled,children:clearInputText??(0,i18n.t)("autocomplete.clearInputText")})]})};Autocomplete.defaultProps={autoCompleteLabel:"off",clearSearchButton:!0};const Autocomplete_Autocomplete=Autocomplete;try{Autocomplete.displayName="Autocomplete",Autocomplete.__docgenInfo={description:'The Autocomplete component wraps a TextField component and turns it into a combobox,\nwhere a user can type into the text field and see matching results. They can then\nselect one of these results from the list, which will trigger an `onChange` event on\nthe Autocomplete.\n\nThe two event handlers that should be used when this is a controlled component are\n`onChange` and `onInputValueChange`. They are defined on the Autocomplete component\nand not its child TextField component.\n\nAs the user types and `onInputValueChange` is called, you should be supplying relevant\nresults to the Autocomplete through the `items` prop. The `items` prop is an array of\nobjects. Passing an empty array will show a "No results" message. If you do not yet\nwant to show results—for instance, because they haven\'t typed enough characters yet to\nmake a database call—the `items` prop should remain be undefined. If you are still\nloading the results, use the `loading` boolean prop to display the loading message to\nthe user.\n\nFor information about how and when to use this component,\n[refer to its full documentation page](https://design.cms.gov/components/autocomplete/).',displayName:"Autocomplete",props:{ariaClearLabel:{defaultValue:null,description:"Screen reader-specific label for the Clear search `<button>`. Intended to provide a longer, more descriptive explanation of the button's behavior.",name:"ariaClearLabel",required:!1,type:{name:"string"}},autoCompleteLabel:{defaultValue:{value:"off"},description:'Control the `TextField` autocomplete attribute. Defaults to "off" to support accessibility. [Read more.](https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion)',name:"autoCompleteLabel",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"Must contain a `TextField` component",name:"children",required:!0,type:{name:"ReactNode"}},className:{defaultValue:null,description:"Additional classes to be added to the root element.\nUseful for adding utility classes.",name:"className",required:!1,type:{name:"string"}},clearInputText:{defaultValue:null,description:'Text rendered on the page if `clearInput` prop is passed. Default is "Clear search".',name:"clearInputText",required:!1,type:{name:"ReactNode"}},clearSearchButton:{defaultValue:{value:"true"},description:"Removes the Clear search button when set to `false`",name:"clearSearchButton",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"",name:"autoFocus",required:!1,type:{name:"boolean"}},focusTrigger:{defaultValue:null,description:"@deprecated This is deprecated in favor of autoFocus\n@hide-prop [Deprecated]",name:"focusTrigger",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"A unique id to be passed to the child `TextField`. If no id is passed as a prop,\nthe `Autocomplete` component will auto-generate one. This prop was provided in cases\nwhere an id might need to be passed to multiple components, such as the `htmlFor`\nattribute on a label and the id of an input.",name:"id",required:!1,type:{name:"string"}},getA11yStatusMessage:{defaultValue:null,description:"Customize the default status messages announced to screen reader users via aria-live when autocomplete results are populated.\n@deprecated This is no longer used\n@hide-prop [Deprecated]",name:"getA11yStatusMessage",required:!1,type:{name:"any"}},inputRef:{defaultValue:null,description:"Access a reference to the child `TextField`'s `input` element",name:"inputRef",required:!1,type:{name:"(...args: any[]) => any"}},itemToString:{defaultValue:null,description:"Used to determine the string value for the selected item (which is used to compute the `inputValue`).\n@deprecated Please provide a `name` property to each item instead.\n@hide-prop [Deprecated]",name:"itemToString",required:!1,type:{name:"(item: AutocompleteItem) => string"}},items:{defaultValue:null,description:'Array of objects used to populate the suggestion list that appears below the input as users type.\nPassing an empty array will show a "No results" message. If you do not yet want to show results,\nthis props should be undefined.',name:"items",required:!1,type:{name:"AutocompleteItem[]"}},label:{defaultValue:null,description:"Adds a heading to the top of the autocomplete list. This can be used to convey to the user that they're required to select an option from the autocomplete list.",name:"label",required:!1,type:{name:"ReactNode"}},labelId:{defaultValue:null,description:"A unique `id` to be used on the child `TextField` label tag",name:"labelId",required:!1,type:{name:"string"}},loading:{defaultValue:null,description:"Can be called when the `items` array is being fetched remotely, or will be delayed for more than 1-2 seconds.",name:"loading",required:!1,type:{name:"boolean"}},loadingMessage:{defaultValue:null,description:"Message users will see when the `loading` prop is passed to `Autocomplete`.",name:"loadingMessage",required:!1,type:{name:"ReactNode"}},noResultsMessage:{defaultValue:null,description:"Message users will see when the `items` array returns empty and the `loading` prop is passed to `<Autocomplete />`.",name:"noResultsMessage",required:!1,type:{name:"ReactNode"}},onChange:{defaultValue:null,description:"Called when the user selects an item and the selected item has changed. Called with the item that was selected.",name:"onChange",required:!1,type:{name:"(selectedItem: AutocompleteItem) => void"}},onInputValueChange:{defaultValue:null,description:"Called when the child `TextField` value changes. Is called with a string representing the input value.",name:"onInputValueChange",required:!1,type:{name:"(inputValue: string) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/design-system/src/components/Autocomplete/Autocomplete.tsx#Autocomplete"]={docgenInfo:Autocomplete.__docgenInfo,name:"Autocomplete",path:"packages/design-system/src/components/Autocomplete/Autocomplete.tsx#Autocomplete"})}catch(__react_docgen_typescript_loader_error){}},"./packages/design-system/src/components/Button/Button.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{z:()=>Button,Z:()=>Button_Button});var classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),mergeRefs=__webpack_require__("./packages/design-system/src/components/utilities/mergeRefs.ts"),config=__webpack_require__("./packages/design-system/src/components/config.ts"),getAnalyticsContentFromRefs=__webpack_require__("./packages/design-system/src/components/analytics/getAnalyticsContentFromRefs.ts"),events=__webpack_require__("./packages/design-system/src/components/analytics/events.ts"),compat_module=__webpack_require__("./node_modules/preact/compat/dist/compat.module.js");var jsx_runtime=__webpack_require__("./node_modules/preact/compat/jsx-runtime.mjs");const Button=props=>{const{analytics,analyticsLabelOverride,analyticsParentHeading,analyticsParentType,onAnalyticsEvent,children,className,inputRef,isAlternate,onClick,onDark,size,variation,...otherProps}=props,{contentRef,sendButtonEvent}=function useButtonAnalytics(_ref){let{analytics,analyticsLabelOverride,analyticsParentHeading,analyticsParentType,href,onAnalyticsEvent=(0,config.vc)().defaultAnalyticsFunction,type,variation}=_ref;const contentRef=(0,compat_module.useRef)();return{contentRef,sendButtonEvent:function sendButtonEvent(){if(!0!==analytics&&(!(0,config.vc)().buttonSendsAnalytics||!1===analytics))return;const buttonText=analyticsLabelOverride??(0,getAnalyticsContentFromRefs.L)([contentRef]),buttonStyle=variation??"default",buttonType=type??"button",buttonParentHeading=analyticsParentHeading??" ",buttonParentType=analyticsParentType??" ";return onAnalyticsEvent({event_name:"button_engagement",event_extension:events.RW,text:buttonText,button_style:buttonStyle,button_type:href?"link":buttonType,parent_component_heading:buttonParentHeading,parent_component_type:buttonParentType,...href?{link_url:href}:{}})}}}(props),ComponentType=props.href?"a":"button",colorSchemeClass=isAlternate&&"ds-c-button--alternate",modeClass=onDark&&"ds-c-button--on-dark",sizeClass=size&&`ds-c-button--${size}`,variationClass=variation&&`ds-c-button--${variation}`,attrs={...otherProps,className:classnames_default()("ds-c-button",colorSchemeClass,modeClass,sizeClass,variationClass,className)};function handleClick(e){props.disabled||(sendButtonEvent(),onClick&&onClick(e))}return"button"!==ComponentType&&(delete attrs.disabled,delete attrs.type,props.disabled&&(attrs.role="link",attrs["aria-disabled"]=!0,delete attrs.href)),(0,jsx_runtime.tZ)(ComponentType,{ref:(0,mergeRefs.Z)([inputRef,contentRef]),onClick:handleClick,onKeyPress:"a"===ComponentType?function handleKeyPress(e){" "===e.key&&handleClick(e)}:void 0,...attrs,children})};Button.defaultProps={isAlternate:!1,onDark:!1,type:"button"};const Button_Button=Button;try{Button.displayName="Button",Button.__docgenInfo={description:"For information about how and when to use this component,\n[refer to its full documentation page](https://design.cms.gov/components/button/).",displayName:"Button",props:{children:{defaultValue:null,description:"Label text or HTML",name:"children",required:!0,type:{name:"ReactNode"}},className:{defaultValue:null,description:"Additional classes to be added to the root button element.",name:"className",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},href:{defaultValue:null,description:"When provided, the root component will render as an `<a>` element\nrather than `button`.",name:"href",required:!1,type:{name:"string"}},inputRef:{defaultValue:null,description:"Access a reference to the `button` or `a` element",name:"inputRef",required:!1,type:{name:"ButtonRef"}},isAlternate:{defaultValue:{value:"false"},description:"Applies the alternate color to a Button. By default, Button\nuses the `main` color.",name:"isAlternate",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Returns the [`SyntheticEvent`](https://facebook.github.io/react/docs/events.html).\nNot called when the Button is disabled.",name:"onClick",required:!1,type:{name:"(...args: any[]) => any"}},onDark:{defaultValue:{value:"false"},description:"Defines a color palette best used when Button is placed on a dark\nbackground-color. By default, Button uses a light color palette.",name:"onDark",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"small"'}]}},type:{defaultValue:{value:"'button' as const"},description:"Button [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) attribute",name:"type",required:!1,type:{name:"enum",value:[{value:'"button"'},{value:'"reset"'},{value:'"submit"'}]}},variation:{defaultValue:null,description:"A string corresponding to Button variation classes.",name:"variation",required:!1,type:{name:"enum",value:[{value:'"ghost"'},{value:'"solid"'}]}},analytics:{defaultValue:null,description:"Analytics events tracking is enabled by default. Set this value to `false` to\ndisable tracking for this component instance.\n\n[Read more about analytics.](https://design.cms.gov/components/analytics/)",name:"analytics",required:!1,type:{name:"boolean"}},analyticsLabelOverride:{defaultValue:null,description:"An override for the dynamic content sent to analytics services. By default this\ncontent comes from the heading.\n\nIn cases where this component’s heading may contain **sensitive information**,\nuse this prop to override what is sent to analytics.\n\n[Read more about analytics.](https://design.cms.gov/components/analytics/)",name:"analyticsLabelOverride",required:!1,type:{name:"string"}},onAnalyticsEvent:{defaultValue:null,description:"Optional callback that will intercept analytics events for this component.\nIf none is specified, the design system will use the default analytics\nfunction, which can be overwritten globally with the `defaultAnalyticsFunction`\nconfig property.\n\n[Read more about analytics.](https://design.cms.gov/components/analytics/)",name:"onAnalyticsEvent",required:!1,type:{name:"(event: AnalyticsEvent) => void"}},analyticsParentHeading:{defaultValue:null,description:"If needed for analytics, pass heading text of parent component of button.\n\n[Read more about analytics.](https://design.cms.gov/components/analytics/)",name:"analyticsParentHeading",required:!1,type:{name:"string"}},analyticsParentType:{defaultValue:null,description:"If needed for analytics, pass type of parent component of button.\n\n[Read more about analytics.](https://design.cms.gov/components/analytics/)",name:"analyticsParentType",required:!1,type:{name:"string"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLButtonElement> & Ref<HTMLAnchorElement>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/design-system/src/components/Button/Button.tsx#Button"]={docgenInfo:Button.__docgenInfo,name:"Button",path:"packages/design-system/src/components/Button/Button.tsx#Button"})}catch(__react_docgen_typescript_loader_error){}},"./packages/design-system/src/components/TextField/TextField.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{n:()=>TextField,Z:()=>TextField_TextField});var compat_module=__webpack_require__("./node_modules/preact/compat/dist/compat.module.js"),useLabelMask=__webpack_require__("./packages/design-system/src/components/TextField/useLabelMask.tsx"),jsx_runtime=__webpack_require__("./node_modules/preact/compat/jsx-runtime.mjs");const LabelMask=props=>{const field=compat_module.Children.only(props.children),{labelMask,inputProps}=(0,useLabelMask.yR)(props.labelMask,field.props),input=(0,compat_module.cloneElement)(field,inputProps);return(0,jsx_runtime.BX)(jsx_runtime.HY,{children:[labelMask,input]})},TextField_LabelMask=LabelMask;try{LabelMask.displayName="LabelMask",LabelMask.__docgenInfo={description:"",displayName:"LabelMask",props:{children:{defaultValue:null,description:"Must contain a `TextField` component",name:"children",required:!0,type:{name:"ReactNode"}},labelMask:{defaultValue:null,description:"Providing a function here will turn the text field into a label-masked field, where\nthe user input is formatted in a label as the user types and then the input field\nitself is automatically formatted when the user shifts focus away from the input.\nA custom function can be given, or one of the following built-in functions can be\nimported from the design system and passed to this component: PHONE_MASK, ZIP_MASK,\nSSN_MASK, and CURRENCY_MASK. See\n[Label-masked field](https://design.cms.gov/components/text-field/label-masked-field/)\ndocumentation page for more information.",name:"labelMask",required:!1,type:{name:"MaskFunction"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/design-system/src/components/TextField/LabelMask.tsx#LabelMask"]={docgenInfo:LabelMask.__docgenInfo,name:"LabelMask",path:"packages/design-system/src/components/TextField/LabelMask.tsx#LabelMask"})}catch(__react_docgen_typescript_loader_error){}var classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),maskHelpers=__webpack_require__("./packages/design-system/src/components/TextField/maskHelpers.ts");const maskPattern={phone:"[0-9-]*",ssn:"[0-9-*]*",zip:"[0-9-]*",currency:"[0-9.,-]*"},maskOverlayContent={currency:"$"};class Mask extends compat_module.PureComponent{constructor(props){super(props);const field=this.field(),initialValue=field.props.value||field.props.defaultValue;this.state={value:(0,maskHelpers.in)(initialValue,props.mask)}}componentDidUpdate(prevProps){this.debouncedOnBlurEvent&&(this.field().props.onBlur(this.debouncedOnBlurEvent),this.debouncedOnBlurEvent=null);const fieldProps=this.field().props,prevField=compat_module.Children.only(prevProps.children),prevFieldProps=(0,compat_module.isValidElement)(prevField)?prevField.props:{};if(void 0!==fieldProps.value&&prevFieldProps.value!==fieldProps.value){const{mask}=this.props;if((0,maskHelpers.FF)(fieldProps.value,mask)!==(0,maskHelpers.FF)(this.state.value,mask)){const value=(0,maskHelpers.in)(fieldProps.value||"",mask);this.setState({value})}}}field(){return compat_module.Children.only(this.props.children)}handleBlur(evt,field){const value=(0,maskHelpers.in)(evt.target.value,this.props.mask),debounce=value!==this.state.value&&"function"==typeof field.props.onBlur;debounce&&(evt.persist(),this.debouncedOnBlurEvent=evt),this.setState({value}),debounce||"function"!=typeof field.props.onBlur||field.props.onBlur(evt)}handleChange(evt,field){this.setState({value:evt.target.value}),"function"==typeof field.props.onChange&&field.props.onChange(evt)}render(){const{mask}=this.props,field=this.field(),modifiedTextField=(0,compat_module.cloneElement)(field,{defaultValue:void 0,fieldClassName:classnames_default()(field.props.fieldClassName,`ds-c-field--${mask}`),onBlur:evt=>this.handleBlur(evt,field),onChange:evt=>this.handleChange(evt,field),value:this.state.value,type:"text",inputMode:"numeric",pattern:maskPattern[this.props.mask]}),maskOverlay=maskOverlayContent[mask]?(0,jsx_runtime.tZ)("div",{className:`ds-c-field__before ds-c-field__before--${mask}`,children:maskOverlayContent[mask]}):null;return(0,jsx_runtime.BX)("div",{className:`ds-c-field-mask ds-c-field-mask--${mask}`,children:[maskOverlay,modifiedTextField]})}}const TextField_Mask=Mask;try{maskValue.displayName="maskValue",maskValue.__docgenInfo={description:"Returns the value with additional masking characters, or the same value back if invalid numeric string",displayName:"maskValue",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/design-system/src/components/TextField/Mask.tsx#maskValue"]={docgenInfo:maskValue.__docgenInfo,name:"maskValue",path:"packages/design-system/src/components/TextField/Mask.tsx#maskValue"})}catch(__react_docgen_typescript_loader_error){}try{unmaskValue.displayName="unmaskValue",unmaskValue.__docgenInfo={description:"Remove mask characters from value, or the same value back if invalid numeric string",displayName:"unmaskValue",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/design-system/src/components/TextField/Mask.tsx#unmaskValue"]={docgenInfo:unmaskValue.__docgenInfo,name:"unmaskValue",path:"packages/design-system/src/components/TextField/Mask.tsx#unmaskValue"})}catch(__react_docgen_typescript_loader_error){}try{Mask.displayName="Mask",Mask.__docgenInfo={description:"",displayName:"Mask",props:{children:{defaultValue:null,description:"Must contain a `TextField` component",name:"children",required:!0,type:{name:"ReactNode"}},mask:{defaultValue:null,description:"The type of mask",name:"mask",required:!1,type:{name:"enum",value:[{value:'"currency"'},{value:'"phone"'},{value:'"ssn"'},{value:'"zip"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/design-system/src/components/TextField/Mask.tsx#Mask"]={docgenInfo:Mask.__docgenInfo,name:"Mask",path:"packages/design-system/src/components/TextField/Mask.tsx#Mask"})}catch(__react_docgen_typescript_loader_error){}var TextInput=__webpack_require__("./packages/design-system/src/components/TextField/TextInput.tsx"),cleanFieldProps=__webpack_require__("./packages/design-system/src/components/utilities/cleanFieldProps.ts"),describeField=__webpack_require__("./packages/design-system/src/components/utilities/describeField.ts"),useId=__webpack_require__("./packages/design-system/src/components/utilities/useId.ts"),Label=__webpack_require__("./packages/design-system/src/components/Label/Label.tsx"),useLabelProps=__webpack_require__("./packages/design-system/src/components/Label/useLabelProps.ts"),useHint=__webpack_require__("./packages/design-system/src/components/Hint/useHint.tsx"),useInlineError=__webpack_require__("./packages/design-system/src/components/InlineError/useInlineError.tsx");const TextField=props=>{const{id:originalId,mask,labelMask,className,...remainingProps}=props,id=(0,useId.Z)("text-field--",originalId);const{errorId,topError,bottomError,invalid}=(0,useInlineError.g)({...props,id}),{hintId,hintElement}=(0,useHint.U)({...props,id}),labelProps=(0,useLabelProps.v)({...props,id});let input=(0,jsx_runtime.tZ)(TextInput.Z,{type:TextField.defaultProps.type,...(0,cleanFieldProps.Z)(remainingProps),id,"aria-invalid":invalid,"aria-describedby":(0,describeField.Z)({...props,errorId,hintId})});return mask?input=(0,jsx_runtime.tZ)(TextField_Mask,{mask,children:input}):labelMask&&(input=(0,jsx_runtime.tZ)(TextField_LabelMask,{labelMask,children:input})),(0,jsx_runtime.BX)("div",{className:classnames_default()("ds-u-clearfix",className),children:[(0,jsx_runtime.tZ)(Label._,{...labelProps,fieldId:id}),hintElement,topError,input,bottomError]})};TextField.defaultProps={type:"text"};const TextField_TextField=TextField;try{TextField.displayName="TextField",TextField.__docgenInfo={description:"For information about how and when to use this component,\n[refer to its full documentation page](https://design.cms.gov/components/text-field/).",displayName:"TextField",props:{ariaLabel:{defaultValue:null,description:"Apply an `aria-label` to the text field to provide additional\ncontext to assistive devices.",name:"ariaLabel",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"",name:"autoFocus",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"Additional classes to be added to the root element.",name:"className",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"Sets the initial value. Use this for an uncontrolled component; otherwise,\nuse the `value` property.",name:"defaultValue",required:!1,type:{name:"TextFieldDefaultValue"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fieldClassName:{defaultValue:null,description:"",name:"fieldClassName",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"A unique `id` to be used on the text field.",name:"id",required:!1,type:{name:"string"}},inputRef:{defaultValue:null,description:"Access a reference to the `input` or `textarea` element",name:"inputRef",required:!1,type:{name:"(...args: any[]) => any"}},inversed:{defaultValue:null,description:'Set to `true` to apply the "inverse" color scheme',name:"inversed",required:!1,type:{name:"boolean"}},labelMask:{defaultValue:null,description:"Applies date format masking to the input value entered and renders to a text field\nabove the input. Passing `true` to `valueOnly` will return just the formatted value\nentered.",name:"labelMask",required:!1,type:{name:"(rawInput: string, valueOnly?: boolean) => string"}},mask:{defaultValue:null,description:"Apply formatting to the field that's unique to the value you expect to be entered.\nDepending on the mask, the field's appearance and functionality may be affected.",name:"mask",required:!1,type:{name:"enum",value:[{value:'"currency"'},{value:'"phone"'},{value:'"ssn"'},{value:'"zip"'}]}},multiline:{defaultValue:null,description:"Whether or not the text field is a multiline text field",name:"multiline",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},numeric:{defaultValue:null,description:'Sets `inputMode`, `type`, and `pattern` to improve accessibility and consistency for number fields. Use this prop instead of `type="number"`, see [here](https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/) for more information.',name:"numeric",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"(...args: any[]) => any"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"(...args: any[]) => any"}},pattern:{defaultValue:null,description:"@hide-prop HTML `input` [pattern](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefpattern).",name:"pattern",required:!1,type:{name:"string"}},rows:{defaultValue:null,description:"Optionally specify the number of visible text lines for the field. Only\napplicable if this is a multiline field.",name:"rows",required:!1,type:{name:"TextFieldRows"}},size:{defaultValue:null,description:"Set the max-width of the input either to `'small'` or `'medium'`.",name:"size",required:!1,type:{name:"enum",value:[{value:'"medium"'},{value:'"small"'}]}},type:{defaultValue:{value:"text"},description:"HTML `input` [type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#<input>_types) attribute. If you are using `type=number` please use the numeric prop instead.",name:"type",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"Sets the input's `value`. Use this in combination with `onChange`\nfor a controlled component; otherwise, set `defaultValue`.",name:"value",required:!1,type:{name:"TextFieldValue"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},label:{defaultValue:null,description:"Label for the field.",name:"label",required:!0,type:{name:"ReactNode"}},labelClassName:{defaultValue:null,description:"Additional classes to be added to the label",name:"labelClassName",required:!1,type:{name:"string"}},labelId:{defaultValue:null,description:"A unique `id` to be used on the field label. If one isn't provided, a unique ID\nwill be generated.",name:"labelId",required:!1,type:{name:"string"}},hint:{defaultValue:null,description:"Additional hint text to display",name:"hint",required:!1,type:{name:"ReactNode"}},hintId:{defaultValue:null,description:"The ID of the hint element",name:"hintId",required:!1,type:{name:"string"}},requirementLabel:{defaultValue:null,description:'Text showing the requirement ("Required", "Optional", etc.). See [Required and Optional Fields](https://design.cms.gov/patterns/Forms/forms/#required-and-optional-fields).',name:"requirementLabel",required:!1,type:{name:"ReactNode"}},hintClassName:{defaultValue:null,description:"Custom CSS class name(s) for the hint element",name:"hintClassName",required:!1,type:{name:"string"}},errorId:{defaultValue:null,description:"The ID of the error message applied to this field. If none is provided, the id\nwill be derived from the `id` prop for the field.",name:"errorId",required:!1,type:{name:"string"}},errorPlacement:{defaultValue:null,description:"Location of the error message relative to the field input",name:"errorPlacement",required:!1,type:{name:"enum",value:[{value:'"bottom"'},{value:'"top"'}]}},errorMessage:{defaultValue:null,description:"Enable the error state by providing an error message.",name:"errorMessage",required:!1,type:{name:"ReactNode"}},errorMessageClassName:{defaultValue:null,description:"Additional classes to be added to the error message",name:"errorMessageClassName",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/design-system/src/components/TextField/TextField.tsx#TextField"]={docgenInfo:TextField.__docgenInfo,name:"TextField",path:"packages/design-system/src/components/TextField/TextField.tsx#TextField"})}catch(__react_docgen_typescript_loader_error){}},"./packages/design-system/src/components/TextField/maskHelpers.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{FF:()=>unmaskValue,in:()=>maskValue});const maskDeliminatedRegex={phone:/(\d{3})(\d{1,3})?(\d+)?/,ssn:/([*\d]{3})([*\d]{1,2})?([*\d]+)?/,zip:/(\d{5})(\d*)/};function toDigitsAndAsterisks(value){return value.replace(/[^\d*]/g,"")}function isValueMaskable(value,mask){if(value&&"string"==typeof value){const hasDigits=value.match(/\d/),hasDigitsAsterisks=value.match(/[\d*]/g);if(hasDigits||hasDigitsAsterisks&&"ssn"===mask)return!0}return!1}function maskValue(){let value=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",mask=arguments.length>1?arguments[1]:void 0;return isValueMaskable(value,mask)&&("currency"===mask?value=function toCurrency(value){const sign=0===value.indexOf("-")?"-":"",firstDecimalPointIndex=(value=value.replace(/[^\d.]/g,"")).indexOf(".");value=(value=value.replace(/[.]/g,((match,index)=>index>firstDecimalPointIndex?"":match))).replace(/^0+/g,"");let[whole,fractional=""]=value.split(".");return whole=""===whole?"0":whole.replace(/\B(?=(?:\d{3})+(?!\d))/g,","),""!==fractional&&(1===fractional.length?fractional=fractional.concat("0"):fractional.length>2&&(fractional=fractional.slice(0,2)),fractional="00"===fractional?"":`.${fractional}`),`${sign}${whole}${fractional}`}(value):maskDeliminatedRegex[mask]&&(value=function deliminateRegexGroups(value,rx){const matches=toDigitsAndAsterisks(value).match(rx);return matches&&matches.length>1&&(value=matches.slice(1).filter((a=>!!a)).join("-")),value}(value,maskDeliminatedRegex[mask]))),value}function unmaskValue(value,mask){if(isValueMaskable(value,mask))if("currency"===mask){const matches=value.match(/^-|[\d.]/g);matches&&(value=matches.join(""))}else maskDeliminatedRegex[mask]&&(value=toDigitsAndAsterisks(value));return value}},"./packages/design-system/src/components/analytics/getAnalyticsContentFromRefs.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function getAnalyticsContentFromRefs(refs){return refs.map((ref=>ref.current?.textContent)).find((textContent=>textContent))}__webpack_require__.d(__webpack_exports__,{L:()=>getAnalyticsContentFromRefs,Z:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=getAnalyticsContentFromRefs}}]);