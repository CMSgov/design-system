"use strict";(globalThis.webpackChunkdesign_system=globalThis.webpackChunkdesign_system||[]).push([[4645],{"./packages/design-system/src/components/Autocomplete/Autocomplete.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AsyncItems:()=>AsyncItems,CustomMarkup:()=>CustomMarkup,Default:()=>Default,GroupsAndStandaloneItems:()=>GroupsAndStandaloneItems,ItemGroups:()=>ItemGroups,LabeledList:()=>LabeledList,LoadingMessage:()=>LoadingMessage,NoResults:()=>NoResults,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/preact/compat/dist/compat.module.js"),_Autocomplete__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./packages/design-system/src/components/Autocomplete/Autocomplete.tsx"),_TextField_TextField__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./packages/design-system/src/components/TextField/TextField.tsx"),lodash_uniqueId__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/lodash/uniqueId.js"),lodash_uniqueId__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(lodash_uniqueId__WEBPACK_IMPORTED_MODULE_1__),_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs"),_utilities_debounce__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./packages/design-system/src/components/utilities/debounce.ts"),_testMocks__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./packages/design-system/src/components/Autocomplete/testMocks.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/preact/compat/jsx-runtime.mjs");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Autocomplete",component:_Autocomplete__WEBPACK_IMPORTED_MODULE_4__.j,args:{ariaClearLabel:"Clear search",clearInputText:"Clear search",clearSearchButton:!0,loadingMessage:"Loading...",noResultsMessage:"No results"},argTypes:{ariaClearLabel:{table:{defaultValue:{summary:"Clear search to try again"}}},clearInputText:{table:{defaultValue:{summary:"Clear Search"}}},loadingMessage:{table:{defaultValue:{summary:"Loading..."}}},noResultsMessage:{table:{defaultValue:{summary:"No results"}}}}},Template=args=>{const{items,textFieldLabel,textFieldHint,...autocompleteArgs}=args,[input,setInput]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)("");let filteredItems=null;return input.length>0&&(filteredItems=items.map((item=>{if(item.label&&item.items){const filteredGroupItems=item.items.filter((groupItem=>!groupItem.name||groupItem.name.toLowerCase().includes(input.toLowerCase())));return 0===filteredGroupItems.length?null:{...item,items:filteredGroupItems}}return!item.name||item.name.toLowerCase().includes(input.toLowerCase())?item:null})).filter(Boolean)),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Y)(_Autocomplete__WEBPACK_IMPORTED_MODULE_4__.j,{...autocompleteArgs,onChange:(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.XI)("onChange"),onInputValueChange:function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.XI)("onInputValueChange")(args),setInput(args[0])},items:filteredItems,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Y)(_TextField_TextField__WEBPACK_IMPORTED_MODULE_5__.h,{label:textFieldLabel,hint:textFieldHint,name:"autocomplete",value:input})})};function makeItem(name,children){return{id:lodash_uniqueId__WEBPACK_IMPORTED_MODULE_1___default()(),name,children}}function makeGroup(label,items){return{id:lodash_uniqueId__WEBPACK_IMPORTED_MODULE_1___default()(),label,items}}const Default={render:Template,args:{textFieldLabel:"Enter and select a drug to see its cost under each plan.",textFieldHint:"Type a letter to see results, then use ARROW keys to change options, ENTER key to make a selection, ESC to dismiss.",items:[makeItem("Acetaminophen"),makeItem("Advil"),makeItem("Benadryl"),makeItem("Claritin"),makeItem("Detrol"),makeItem("Excedrin"),makeItem("Flonase"),makeItem("Gas-X"),makeItem("Hydrocortisone"),makeItem("Ibuprofen"),makeItem("Insulin glargine"),makeItem("Jublia"),makeItem("Ketoprofen"),makeItem("Lidocaine"),makeItem("Lunestra"),makeItem("Melatonin"),makeItem("Meloxicam"),makeItem("Neosporin"),makeItem("Oxycodone"),makeItem("Prednisone"),makeItem("Prilosec"),makeItem("Quinine"),makeItem("Robitussin"),makeItem("Sudafed"),makeItem("Tamiflu"),makeItem("Unisom"),makeItem("Vicodin"),makeItem("Warfarin"),makeItem("Xanax"),makeItem("Yonsa"),makeItem("Zyrtec")]}},LabeledList={render:Template,args:{textFieldLabel:"Search for and select your county.",textFieldHint:'Type "C" then use ARROW keys to change options, ENTER key to make a selection, ESC to dismiss.',label:"Select from the options below:",items:[makeItem("Cook County, IL"),makeItem("Cook County, MD"),makeItem("Cook County, TN"),makeItem("Cook County, AK"),makeItem("Cook County, FL"),makeItem("Cook County, AL"),makeItem("Cook County, WA"),makeItem("Cook County, OR")]}},ItemGroups={render:Template,args:{textFieldLabel:"Select a state.",textFieldHint:'Type "A" then use ARROW keys to change options, ENTER key to make a selection, ESC to dismiss.',items:[makeGroup("Group A",[makeItem("Alabama"),makeItem("Alaska"),makeItem("Arizona"),makeItem("Arkansas")]),makeGroup("Group C",[makeItem("California"),makeItem("Colorado"),makeItem("Connecticut")]),makeGroup("Group D",[makeItem("Delaware"),makeItem("District of Columbia")])]}},GroupsAndStandaloneItems={render:Template,args:{textFieldLabel:"Search for a healthcare specialty or doctor’s office.",textFieldHint:"Type to filter options. Use ARROW keys to navigate, ENTER to select, ESC to dismiss.",items:[makeItem("Care Clinic - Specialty Center"),makeItem("Healthy Life Gastroenterology - Main Campus"),makeItem("Dermatology Associates - East Wing"),makeGroup("Healthcare Specialties",[makeItem("Pediatrics"),makeItem("Gastroenterology"),makeItem("Dermatology"),makeItem("Cardiology"),makeItem("Neurology"),makeItem("Orthopedics")])]}},CustomMarkup={render:Template,args:{textFieldLabel:'Select a snack that starts with "C".',textFieldHint:'Type "C" to start seeing a list of snacks. Clicking the last item should not change the input value to "Search all snacks"',label:"Select from the options below:",items:[makeItem("Carrots (1)",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.FD)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.FK,{children:["Carrots ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Y)("strong",{children:"(1)"})]})),makeItem("Cookies (3)",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.FD)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.FK,{children:["Cookies ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Y)("strong",{children:"(3)"})]})),makeItem("Crackers (2)",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.FD)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.FK,{children:["Crackers ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Y)("strong",{children:"(2)"})]})),{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Y)("a",{href:"#snacks",onClick:()=>console.log("Searching for all the snacks!"),children:"Search all snacks"}),className:"ds-c-autocomplete__search-all",isResult:!1}]},parameters:{docs:{source:{code:"Disabled for this story. See https://github.com/storybookjs/storybook/issues/11554"}}}},LoadingMessage={render:Template,args:{clearSearchButton:!1,loading:!0,items:[],textFieldLabel:"This will only show a loading message.",textFieldHint:"List should return string Loading to simulate async data call."}},NoResults={render:Template,args:{items:[],clearSearchButton:!1,textFieldLabel:'This will show a "no results" message.',textFieldHint:'Start typing, but you’ll only get a "no results" message.'}},AsyncItems={render:function Component(args){const{items,textFieldLabel,textFieldHint,label,...autocompleteArgs}=args,[input,setInput]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(""),[additionalItems,setAdditionalItems]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),hasResults=input.length>2&&additionalItems.length,debouncedSearch=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((0,_utilities_debounce__WEBPACK_IMPORTED_MODULE_6__.s)((()=>{fetch(`https://api.artic.edu/api/v1/artworks/search?q=${input}&fields=id,title,artist_title&limit=10`).then((response=>{if(200===response.status)return response.json()})).then((_ref=>{let{data}=_ref;const additionalItems=data.map((_ref2=>{let{id,title,artist_title}=_ref2;return{id:id.toString(),name:`${title} by ${artist_title}`}}));setAdditionalItems(additionalItems)}))}),500),[]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Y)(_Autocomplete__WEBPACK_IMPORTED_MODULE_4__.j,{...autocompleteArgs,label:hasResults?void 0:label,onChange:(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.XI)("onChange"),onInputValueChange:function(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.XI)("onInputValueChange")(args),setInput(args[0]),input.length>2&&input!==args[0]&&debouncedSearch()},items:hasResults?additionalItems:items,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Y)(_TextField_TextField__WEBPACK_IMPORTED_MODULE_5__.h,{label:textFieldLabel,hint:textFieldHint,name:"autocomplete",value:input})})},args:{textFieldLabel:"Search for artwork",textFieldHint:"Enter the name of an artist, title, or genre",label:"Popular searches includes:",items:[makeItem("Mountains"),makeItem("Watercolor"),makeItem("Georgia O'Keeffe"),makeItem("City Landscape"),makeItem("Self-Portrait")]},parameters:{fetchMock:{mocks:[_testMocks__WEBPACK_IMPORTED_MODULE_7__.J]}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {\n    textFieldLabel: 'Enter and select a drug to see its cost under each plan.',\n    textFieldHint: 'Type a letter to see results, then use ARROW keys to change options, ENTER key to make a selection, ESC to dismiss.',\n    items: [makeItem('Acetaminophen'), makeItem('Advil'), makeItem('Benadryl'), makeItem('Claritin'), makeItem('Detrol'), makeItem('Excedrin'), makeItem('Flonase'), makeItem('Gas-X'), makeItem('Hydrocortisone'), makeItem('Ibuprofen'), makeItem('Insulin glargine'), makeItem('Jublia'), makeItem('Ketoprofen'), makeItem('Lidocaine'), makeItem('Lunestra'), makeItem('Melatonin'), makeItem('Meloxicam'), makeItem('Neosporin'), makeItem('Oxycodone'), makeItem('Prednisone'), makeItem('Prilosec'), makeItem('Quinine'), makeItem('Robitussin'), makeItem('Sudafed'), makeItem('Tamiflu'), makeItem('Unisom'), makeItem('Vicodin'), makeItem('Warfarin'), makeItem('Xanax'), makeItem('Yonsa'), makeItem('Zyrtec')]\n  } as AutocompleteArgs\n}",...Default.parameters?.docs?.source}}},LabeledList.parameters={...LabeledList.parameters,docs:{...LabeledList.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {\n    textFieldLabel: 'Search for and select your county.',\n    textFieldHint: 'Type \"C\" then use ARROW keys to change options, ENTER key to make a selection, ESC to dismiss.',\n    label: 'Select from the options below:',\n    items: [makeItem('Cook County, IL'), makeItem('Cook County, MD'), makeItem('Cook County, TN'), makeItem('Cook County, AK'), makeItem('Cook County, FL'), makeItem('Cook County, AL'), makeItem('Cook County, WA'), makeItem('Cook County, OR')]\n  } as AutocompleteArgs\n}",...LabeledList.parameters?.docs?.source}}},ItemGroups.parameters={...ItemGroups.parameters,docs:{...ItemGroups.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {\n    textFieldLabel: 'Select a state.',\n    textFieldHint: 'Type \"A\" then use ARROW keys to change options, ENTER key to make a selection, ESC to dismiss.',\n    items: [makeGroup('Group A', [makeItem('Alabama'), makeItem('Alaska'), makeItem('Arizona'), makeItem('Arkansas')]), makeGroup('Group C', [makeItem('California'), makeItem('Colorado'), makeItem('Connecticut')]), makeGroup('Group D', [makeItem('Delaware'), makeItem('District of Columbia')])]\n  } as AutocompleteArgs\n}",...ItemGroups.parameters?.docs?.source}}},GroupsAndStandaloneItems.parameters={...GroupsAndStandaloneItems.parameters,docs:{...GroupsAndStandaloneItems.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {\n    textFieldLabel: 'Search for a healthcare specialty or doctor’s office.',\n    textFieldHint: 'Type to filter options. Use ARROW keys to navigate, ENTER to select, ESC to dismiss.',\n    items: [makeItem('Care Clinic - Specialty Center'), makeItem('Healthy Life Gastroenterology - Main Campus'), makeItem('Dermatology Associates - East Wing'), makeGroup('Healthcare Specialties', [makeItem('Pediatrics'), makeItem('Gastroenterology'), makeItem('Dermatology'), makeItem('Cardiology'), makeItem('Neurology'), makeItem('Orthopedics')])]\n  } as AutocompleteArgs\n}",...GroupsAndStandaloneItems.parameters?.docs?.source}}},CustomMarkup.parameters={...CustomMarkup.parameters,docs:{...CustomMarkup.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {\n    textFieldLabel: 'Select a snack that starts with \"C\".',\n    textFieldHint: 'Type \"C\" to start seeing a list of snacks. Clicking the last item should not change the input value to \"Search all snacks\"',\n    label: 'Select from the options below:',\n    items: [makeItem('Carrots (1)', <>\n          Carrots <strong>(1)</strong>\n        </>), makeItem('Cookies (3)', <>\n          Cookies <strong>(3)</strong>\n        </>), makeItem('Crackers (2)', <>\n          Crackers <strong>(2)</strong>\n        </>), {\n      children: <a href=\"#snacks\" onClick={() => console.log('Searching for all the snacks!')}>\n            Search all snacks\n          </a>,\n      className: 'ds-c-autocomplete__search-all',\n      isResult: false\n    }]\n  } as AutocompleteArgs,\n  parameters: {\n    docs: {\n      source: {\n        code: 'Disabled for this story. See https://github.com/storybookjs/storybook/issues/11554'\n      }\n    }\n  }\n}",...CustomMarkup.parameters?.docs?.source}}},LoadingMessage.parameters={...LoadingMessage.parameters,docs:{...LoadingMessage.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {\n    clearSearchButton: false,\n    loading: true,\n    items: [],\n    textFieldLabel: 'This will only show a loading message.',\n    textFieldHint: 'List should return string Loading to simulate async data call.'\n  } as AutocompleteArgs\n}",...LoadingMessage.parameters?.docs?.source}}},NoResults.parameters={...NoResults.parameters,docs:{...NoResults.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {\n    items: [],\n    clearSearchButton: false,\n    textFieldLabel: 'This will show a \"no results\" message.',\n    textFieldHint: 'Start typing, but you’ll only get a \"no results\" message.'\n  } as AutocompleteArgs\n}",...NoResults.parameters?.docs?.source}}},AsyncItems.parameters={...AsyncItems.parameters,docs:{...AsyncItems.parameters?.docs,source:{originalSource:"{\n  render: function Component(args: AutocompleteArgs) {\n    const {\n      items,\n      textFieldLabel,\n      textFieldHint,\n      label,\n      ...autocompleteArgs\n    } = args;\n    const [input, setInput] = useState('');\n    const [additionalItems, setAdditionalItems] = useState<AutocompleteItem[]>([]);\n    const hasResults = input.length > 2 && additionalItems.length;\n    const searchArtwork = () => {\n      // Note: the response is mocked\n      const searchURL = `https://api.artic.edu/api/v1/artworks/search?q=${input}&fields=id,title,artist_title&limit=10`;\n      fetch(searchURL).then(response => {\n        if (response.status === 200) {\n          return response.json();\n        }\n      }).then(({\n        data\n      }: {\n        data: MockedDataResponse[];\n      }) => {\n        const additionalItems = data.map(({\n          id,\n          title,\n          artist_title\n        }) => ({\n          id: id.toString(),\n          name: `${title} by ${artist_title}`\n        }));\n        setAdditionalItems(additionalItems);\n      });\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const debouncedSearch = useCallback(debounce(() => {\n      searchArtwork();\n    }, 500), []);\n    const onInputValueChange = (...args) => {\n      action('onInputValueChange')(args);\n      setInput(args[0]);\n      if (input.length > 2 && input !== args[0]) {\n        debouncedSearch();\n      }\n    };\n    return <Autocomplete {...autocompleteArgs} label={hasResults ? undefined : label} onChange={action('onChange')} onInputValueChange={onInputValueChange} items={hasResults ? additionalItems : items}>\n        <TextField label={textFieldLabel} hint={textFieldHint} name=\"autocomplete\" value={input} />\n      </Autocomplete>;\n  },\n  args: {\n    textFieldLabel: 'Search for artwork',\n    textFieldHint: 'Enter the name of an artist, title, or genre',\n    label: 'Popular searches includes:',\n    items: [makeItem('Mountains'), makeItem('Watercolor'), makeItem(\"Georgia O'Keeffe\"), makeItem('City Landscape'), makeItem('Self-Portrait')]\n  } as AutocompleteArgs,\n  parameters: {\n    fetchMock: {\n      mocks: [searchMock]\n    }\n  }\n}",...AsyncItems.parameters?.docs?.source}}};const __namedExportsOrder=["Default","LabeledList","ItemGroups","GroupsAndStandaloneItems","CustomMarkup","LoadingMessage","NoResults","AsyncItems"]}}]);