{"componentChunkName":"component---src-components-page-templates-info-page-tsx","path":"/components/analytics/","result":{"data":{"mdx":{"id":"682509e4-198b-570a-b15c-e27e9167554a","frontmatter":{"title":"Component analytics","intro":null,"cmsgov":null,"core":null,"healthcare":null,"medicare":null},"slug":"components/analytics","body":"const _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Component analytics\",\n  \"order\": -8\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Some of the design system components come with built-in analytics functionality that can be opted into. The following components are capable of reporting analytics data:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/design-system/branch/kniedermaier/WNMGDS-2835-update-docs-site/components/alert/\"\n  }, `Alert`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/design-system/branch/kniedermaier/WNMGDS-2835-update-docs-site/components/button/\"\n  }, `Button`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/design-system/branch/kniedermaier/WNMGDS-2835-update-docs-site/components/dialog/\"\n  }, `Dialog`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/design-system/branch/kniedermaier/WNMGDS-2835-update-docs-site/components/drawer/\"\n  }, `Help Drawer`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/design-system/branch/kniedermaier/WNMGDS-2835-update-docs-site/components/header/healthcare-header/\"\n  }, `Header`), ` (HealthCare.gov)`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/design-system/branch/kniedermaier/WNMGDS-2835-update-docs-site/components/footer/healthcare-footer/\"\n  }, `Footer`), ` (HealthCare.gov)`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/design-system/branch/kniedermaier/WNMGDS-2835-update-docs-site/components/third-party-external-link/\"\n  }, `Third Party External Link`))), mdx(\"h2\", {\n    \"id\": \"turning-it-on-and-off\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#turning-it-on-and-off\",\n    \"aria-label\": \"turning it on and off permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Turning it on and off`), mdx(\"p\", null, `Analytics event tracking is `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `disabled by default`), `, except for the HealthCare.gov header. There are two ways you can enable or disable analytics in your application:`), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, `At the application level, globally for all instances of a component with the `, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/design-system/branch/kniedermaier/WNMGDS-2835-update-docs-site/components/config/\"\n  }, `config function`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, `At the component-instance level by using the `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `analytics`), ` prop`)), mdx(\"p\", null, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `analytics`), ` prop on a particular component instance will always override the global setting. For instance, you can turn on analytics globally for all alerts but turn it off for a particular `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Alert`), ` on a particular page by setting `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `analytics={false}`), ` on that `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Alert`), `. It works the other way around too where analytics are turned off globally but turned on for a particular `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Alert`), ` instance.`), mdx(\"p\", null, `As an example, to turn analytics on globally for alerts, `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/design-system/branch/kniedermaier/WNMGDS-2835-update-docs-site/components/config/\"\n  }, `call the config function`), ` from somewhere universal to your application, like this:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, `// Import from the package that corresponds to your theme (one of these):\nimport { config } from '@cmsgov/design-system';\nimport { config } from '@cmsgov/ds-cms-gov';\nimport { config } from '@cmsgov/ds-healthcare-gov';\nimport { config } from '@cmsgov/ds-medicare-gov';\n\n// Then call the config function with your configuration settings\nconfig({ alertSendsAnalytics: true });\n`)), mdx(\"p\", null, `Here is the list of each component config property for analytics:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `alertSendsAnalytics`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `buttonSendsAnalytics`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `dialogSendsAnalytics`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `helpDrawerSendsAnalytics`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `headerSendsAnalytics`), ` (HealthCare.gov)`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `footerSendsAnalytics`), ` (HealthCare.gov)`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `thirdPartyExternalLinkSendsAnalytics`))), mdx(\"h2\", {\n    \"id\": \"handling-the-events\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#handling-the-events\",\n    \"aria-label\": \"handling the events permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Handling the events`), mdx(\"p\", null, `We currently provide two ways of handling analytics events in the design system:`), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Through a global default event handler function, which can be changed`), mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Through a function provided to a component instance via the `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `onAnalyticsEvent`), ` prop`)), mdx(\"p\", null, `For the global default handler, the design system will currently attempt to pass all events to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `window.utag.link`), ` function if it exists. If this is not the desired analytics behavior for your application, you can provide your own default analytics event handler by setting the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/design-system/branch/kniedermaier/WNMGDS-2835-update-docs-site/components/config/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, `defaultAnalyticsFunction`), ` global config setting`), ` with your custom implementation, or you can pass a handler to each component instance with the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `onAnalyticsEvent`), ` prop.`), mdx(\"h2\", {\n    \"id\": \"overriding-logged-data\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#overriding-logged-data\",\n    \"aria-label\": \"overriding logged data permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `Overriding logged data`), mdx(\"p\", null, `When you need to prevent sensitive personal information from being passed to analytics trackers from a particular component instance, you can either override the content that contains sensitive information using the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `analyticsLabelOverride`), ` prop, or you can disable tracking on that component instance entirely by setting `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `analytics={false}`), `.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#turning-it-on-and-off","title":"Turning it on and off"},{"url":"#handling-the-events","title":"Handling the events"},{"url":"#overriding-logged-data","title":"Overriding logged data"}]}}},"pageContext":{"id":"682509e4-198b-570a-b15c-e27e9167554a"}},"staticQueryHashes":["3481578012"]}