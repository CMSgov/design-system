{
    "componentChunkName": "component---src-components-info-page-tsx",
    "path": "/getting-started/developers/code-conventions",
    "result": {"data":{"mdx":{"id":"013dda4b-b611-524a-9b4b-1e1c3511756d","frontmatter":{"title":"Code conventions","status":null,"intro":null,"core":null,"healthcare":null,"medicare":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Code conventions\",\n  \"order\": 12\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The design system favors clarity over succinctness. This means the design system may be verbose, but it should deliver clarity, predictability, and legibility in exchange.\"), mdx(\"h2\", null, \"CSS class naming convention\"), mdx(\"img\", {\n    src: \"https://design.cms.gov/images/naming-convention.svg\",\n    className: \"ds-u-border--1\"\n  }), mdx(\"h3\", null, \"Namespace\"), mdx(\"p\", null, \"To avoid conflicting with other libraries and existing code, the design system namespaces its CSS class names with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ds-\"), \".\"), mdx(\"h3\", null, \"Prefix\"), mdx(\"p\", null, \"Prefixes are added to class names to make it more apparent what job the class is doing.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Prefix\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"l-\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Indicates layout-related styles. Example: \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \".ds-l-container\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"c-\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Indicates a component. Example: \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \".ds-c-button\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"u-\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Indicates a utility. Example: \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \".ds-u-color--base\"))))), mdx(\"p\", null, \"These prefixes can sometimes be followed by a \\\"breakpoint prefix\\\". \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/design-system/branch/WNMGDS-1805/deprecate-btn-state-classes/foundation/layout-grid/responsive-design/\"\n  }, \"Learn more about breakpoint prefixes.\")), mdx(\"h3\", null, \"BEM syntax\"), mdx(\"p\", null, \"Following the namespace and prefix is a name conforming to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://getbem.com/introduction/\"\n  }, \"BEM syntax\"), \".\"), mdx(\"p\", null, \"Put all together, a CSS class can be broken down to these key parts: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[NAMESPACE]-[PREFIX]-[BLOCK]__[ELEMENT]--[MODIFIER]\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Block\"), \" is a standalone entity that is meaningful on its own. For example: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".ds-c-card\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".ds-c-button\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Element\"), \" is a part of a block that has no standalone meaning and is semantically tied to its block, such as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".ds-c-card__title\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Modifier\"), \" is a flag on a block or element and is used to change appearance or behavior. For example: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".ds-c-button--primary\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".ds-u-color--base\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".ds-l-col--3\"))), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://getbem.com/naming/\"\n  }, \"BEM\\u2019s strict naming rules can be found here\"), \".\"), mdx(\"h2\", null, \"Credits\"), mdx(\"p\", null, \"The CSS naming convention outlined here was heavily influenced by:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://bradfrost.com/blog/post/css-architecture-for-design-systems/\"\n  }, \"CSS Architecture for Design Systems\"), \", by Brad Frost\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://seesparkbox.com/foundry/thoughtful_css_architecture\"\n  }, \"Thoughtful CSS Architecture\"), \", by Nathan Rambeck\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces/\"\n  }, \"More Transparent UI Code with Namespaces\"), \", by Harry Roberts\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#css-class-naming-convention","title":"CSS class naming convention","items":[{"url":"#namespace","title":"Namespace"},{"url":"#prefix","title":"Prefix"},{"url":"#bem-syntax","title":"BEM syntax"}]},{"url":"#credits","title":"Credits"}]}}},"pageContext":{"id":"013dda4b-b611-524a-9b4b-1e1c3511756d"}},
    "staticQueryHashes": ["1050346478","3750824424"]}