{"componentChunkName":"component---src-components-page-templates-info-page-tsx","path":"/patterns/overview/","result":{"data":{"mdx":{"id":"e1568427-49e5-5d3a-84e1-489659bee05c","frontmatter":{"title":"Patterns overview","intro":null,"cmsgov":null,"core":null,"healthcare":null,"medicare":null},"slug":"patterns/overview","body":"const _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nconst _frontmatter = {\n  \"title\": \"Patterns overview\",\n  \"order\": -10\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n      components\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Patterns are solutions and researched best practices that solve recurring user interface design problems:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `How do you build complex, multi-part web forms?`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `How do you provide navigational context?`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `How do you handle progressive disclosure?`)), mdx(\"h2\", {\n    \"id\": \"how-are-they-different-from-components\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#how-are-they-different-from-components\",\n    \"aria-label\": \"how are they different from components permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), `How are they different from components?`), mdx(\"p\", null, `A pattern is more than the sum of its parts. Patterns are solutions, whereas a component can be considered a UI chunk. Patterns consist of design, content strategy, reusable components, and accessibility put together to solve common problems.`), mdx(\"p\", null, `Components can be considered concrete, a finite list: buttons, accordions, tables, etc. Patterns might be unique to a site or an application and may evolve with changes in technology or after competitive analysis.`));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#how-are-they-different-from-components","title":"How are they different from components?"}]}}},"pageContext":{"id":"e1568427-49e5-5d3a-84e1-489659bee05c"}},"staticQueryHashes":["3481578012"]}