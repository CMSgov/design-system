{
    "componentChunkName": "component---src-components-info-page-tsx",
    "path": "/components/button",
    "result": {"data":{"mdx":{"id":"75eed998-31d7-5272-9826-5e23acd3aae7","frontmatter":{"title":"Button","status":null,"relatedUswdsGuidance":"components/buttons"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Button\",\n  \"relatedUswdsGuidance\": \"components/buttons\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar EmbeddedExample = makeShortcode(\"EmbeddedExample\");\nvar StorybookExample = makeShortcode(\"StorybookExample\");\nvar PropTable = makeShortcode(\"PropTable\");\nvar ComponentThemeOptions = makeShortcode(\"ComponentThemeOptions\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Use buttons to signal actions.\"), mdx(\"h2\", null, \"Default Button\"), mdx(EmbeddedExample, {\n    mdxType: \"EmbeddedExample\"\n  }, mdx(\"div\", null, mdx(Button, {\n    className: \"ds-u-margin-right--1\",\n    mdxType: \"Button\"\n  }, \"Default\"), mdx(Button, {\n    className: \"ds-c-button--hover ds-u-margin-right--1\",\n    mdxType: \"Button\"\n  }, \"Hover\"), mdx(Button, {\n    className: \"ds-c-button--active ds-u-margin-right--1\",\n    mdxType: \"Button\"\n  }, \"Active\"), mdx(Button, {\n    className: \"ds-c-button--focus ds-u-margin-right--1\",\n    mdxType: \"Button\"\n  }, \"Focus\"), mdx(Button, {\n    disabled: true,\n    mdxType: \"Button\"\n  }, \"Disabled\"))), mdx(\"h2\", null, \"Primary Button\"), mdx(EmbeddedExample, {\n    mdxType: \"EmbeddedExample\"\n  }, mdx(\"div\", null, mdx(Button, {\n    className: \"ds-u-margin-right--1\",\n    variation: \"primary\",\n    mdxType: \"Button\"\n  }, \"Default\"), mdx(Button, {\n    className: \"ds-c-button--hover ds-u-margin-right--1\",\n    variation: \"primary\",\n    mdxType: \"Button\"\n  }, \"Hover\"), mdx(Button, {\n    className: \"ds-c-button--active ds-u-margin-right--1\",\n    variation: \"primary\",\n    mdxType: \"Button\"\n  }, \"Active\"), mdx(Button, {\n    className: \"ds-c-button--focus ds-u-margin-right--1\",\n    variation: \"primary\",\n    mdxType: \"Button\"\n  }, \"Focus\"), mdx(Button, {\n    disabled: true,\n    variation: \"primary\",\n    mdxType: \"Button\"\n  }, \"Disabled\"))), mdx(\"h2\", null, \"Success Button\"), mdx(EmbeddedExample, {\n    mdxType: \"EmbeddedExample\"\n  }, mdx(\"div\", null, mdx(Button, {\n    className: \"ds-u-margin-right--1\",\n    variation: \"success\",\n    mdxType: \"Button\"\n  }, \"Default\"), mdx(Button, {\n    className: \"ds-c-button--hover ds-u-margin-right--1\",\n    variation: \"success\",\n    mdxType: \"Button\"\n  }, \"Hover\"), mdx(Button, {\n    className: \"ds-c-button--active ds-u-margin-right--1\",\n    variation: \"success\",\n    mdxType: \"Button\"\n  }, \"Active\"), mdx(Button, {\n    className: \"ds-c-button--focus ds-u-margin-right--1\",\n    variation: \"success\",\n    mdxType: \"Button\"\n  }, \"Focus\"), mdx(Button, {\n    disabled: true,\n    variation: \"success\",\n    mdxType: \"Button\"\n  }, \"Disabled\"))), mdx(\"h2\", null, \"Transparent Button\"), mdx(EmbeddedExample, {\n    mdxType: \"EmbeddedExample\"\n  }, mdx(\"div\", null, mdx(Button, {\n    className: \"ds-u-margin-right--1\",\n    variation: \"transparent\",\n    mdxType: \"Button\"\n  }, \"Default\"), mdx(Button, {\n    className: \"ds-c-button--hover ds-u-margin-right--1\",\n    variation: \"transparent\",\n    mdxType: \"Button\"\n  }, \"Hover\"), mdx(Button, {\n    className: \"ds-c-button--active ds-u-margin-right--1\",\n    variation: \"transparent\",\n    mdxType: \"Button\"\n  }, \"Active\"), mdx(Button, {\n    className: \"ds-c-button--focus ds-u-margin-right--1\",\n    variation: \"transparent\",\n    mdxType: \"Button\"\n  }, \"Focus\"), mdx(Button, {\n    disabled: true,\n    variation: \"transparent\",\n    mdxType: \"Button\"\n  }, \"Disabled\"))), mdx(\"h2\", null, \"Button Size Variations\"), mdx(EmbeddedExample, {\n    mdxType: \"EmbeddedExample\"\n  }, mdx(\"div\", null, mdx(Button, {\n    className: \"ds-u-margin-right--1\",\n    size: \"small\",\n    mdxType: \"Button\"\n  }, \"Small\"), mdx(Button, {\n    className: \"ds-u-margin-right--1\",\n    mdxType: \"Button\"\n  }, \"Default\"), mdx(Button, {\n    className: \"ds-u-margin-right--1\",\n    size: \"big\",\n    mdxType: \"Button\"\n  }, \"Big\"))), mdx(\"h2\", null, \"Inverse Buttons\"), mdx(EmbeddedExample, {\n    mdxType: \"EmbeddedExample\"\n  }, mdx(\"div\", {\n    className: \"ds-u-fill--background-inverse ds-u-padding--2\"\n  }, mdx(\"div\", {\n    className: \"ds-u-margin-bottom--2\"\n  }, mdx(Button, {\n    className: \"ds-u-margin-right--1\",\n    inversed: true,\n    mdxType: \"Button\"\n  }, \"Default\"), mdx(Button, {\n    className: \"ds-c-button--hover ds-u-margin-right--1\",\n    inversed: true,\n    mdxType: \"Button\"\n  }, \"Hover\"), mdx(Button, {\n    className: \"ds-c-button--active ds-u-margin-right--1\",\n    inversed: true,\n    mdxType: \"Button\"\n  }, \"Active\"), mdx(Button, {\n    className: \"ds-c-button--focus ds-u-margin-right--1\",\n    inversed: true,\n    mdxType: \"Button\"\n  }, \"Focus\"), mdx(Button, {\n    disabled: true,\n    inversed: true,\n    mdxType: \"Button\"\n  }, \"Disabled\")), mdx(\"div\", null, mdx(Button, {\n    className: \"ds-u-margin-right--1\",\n    variation: \"transparent\",\n    inversed: true,\n    mdxType: \"Button\"\n  }, \"Default\"), mdx(Button, {\n    className: \"ds-c-button--hover ds-u-margin-right--1\",\n    variation: \"transparent\",\n    inversed: true,\n    mdxType: \"Button\"\n  }, \"Hover\"), mdx(Button, {\n    className: \"ds-c-button--active ds-u-margin-right--1\",\n    variation: \"transparent\",\n    inversed: true,\n    mdxType: \"Button\"\n  }, \"Active\"), mdx(Button, {\n    className: \"ds-c-button--focus ds-u-margin-right--1\",\n    variation: \"transparent\",\n    inversed: true,\n    mdxType: \"Button\"\n  }, \"Focus\"), mdx(Button, {\n    disabled: true,\n    variation: \"transparent\",\n    inversed: true,\n    mdxType: \"Button\"\n  }, \"Disabled\")))), mdx(\"h2\", null, \"Danger Button\"), mdx(Alert, {\n    heading: \"Deprecated\",\n    variation: \"error\",\n    className: \"ds-u-margin-bottom--2 ds-u-font-size--small\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", {\n    className: \"ds-c-alert__text\"\n  }, \"Do not use.\")), mdx(EmbeddedExample, {\n    mdxType: \"EmbeddedExample\"\n  }, mdx(\"div\", null, mdx(Button, {\n    className: \"ds-u-margin-right--1\",\n    variation: \"danger\",\n    mdxType: \"Button\"\n  }, \"Default\"), mdx(Button, {\n    className: \"ds-c-button--hover ds-u-margin-right--1\",\n    variation: \"danger\",\n    mdxType: \"Button\"\n  }, \"Hover\"), mdx(Button, {\n    className: \"ds-c-button--active ds-u-margin-right--1\",\n    variation: \"danger\",\n    mdxType: \"Button\"\n  }, \"Active\"), mdx(Button, {\n    className: \"ds-c-button--focus ds-u-margin-right--1\",\n    variation: \"danger\",\n    mdxType: \"Button\"\n  }, \"Focus\"), mdx(Button, {\n    disabled: true,\n    variation: \"danger\",\n    mdxType: \"Button\"\n  }, \"Disabled\"))), mdx(\"h2\", null, \"Button icons\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add an inline SVG icon and it will become the same color as the button text. For the crispest icon rendering, ensure the icon has a square \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"viewBox\"), \" with values that are multiples of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"8\"), \" (ie. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"24x24\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use the margin utility class to add spacing between the icon and button text.\")), mdx(EmbeddedExample, {\n    mdxType: \"EmbeddedExample\"\n  }, mdx(\"div\", null, mdx(Button, {\n    className: \"ds-u-margin-right--1\",\n    mdxType: \"Button\"\n  }, mdx(ArrowIcon, {\n    direction: \"left\",\n    className: \"ds-u-margin-right--05\",\n    mdxType: \"ArrowIcon\"\n  }), \"Left Icon\"), mdx(Button, {\n    className: \"ds-u-margin-right--1\",\n    mdxType: \"Button\"\n  }, \"Right Icon\", mdx(ArrowIcon, {\n    direction: \"right\",\n    className: \"ds-u-margin-left--05\",\n    mdxType: \"ArrowIcon\"\n  })), mdx(Button, {\n    mdxType: \"Button\"\n  }, \"No Icon\"))), mdx(\"h2\", null, \"Button inline with field\"), mdx(\"p\", null, \"The button is the same height as a single-line text field.\"), mdx(EmbeddedExample, {\n    mdxType: \"EmbeddedExample\"\n  }, mdx(\"div\", null, mdx(TextInput, {\n    fieldClassName: \"ds-u-display--inline-block ds-u-margin-right--05\",\n    type: \"text\",\n    mdxType: \"TextInput\"\n  }), mdx(Button, {\n    mdxType: \"Button\"\n  }, \"Submit\"))), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"<Button>\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Button\"), \" component accepts its text as children (AKA inner HTML), which\\nmeans you can also pass in HTML or custom components. This gives you a lot of\\nflexibility and supports a variety of advanced use cases. The most common use\\ncase would be passing in an SVG icon along with the text.\"), mdx(\"p\", null, \"In addition to the supported props listed, you can also pass in additional\\nprops, which will be passed to the rendered root component. For example,\\nyou could pass in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" prop to pass to the rendered anchor element.\"), mdx(StorybookExample, {\n    componentName: \"button\",\n    sourceFilePath: \"components/Button/Button.tsx\",\n    storyId: \"components-button--default\",\n    mdxType: \"StorybookExample\"\n  }), mdx(\"h3\", null, \"Props\"), mdx(PropTable, {\n    componentName: \"Button\",\n    mdxType: \"PropTable\"\n  }), mdx(\"h2\", null, \"Guidance\"), mdx(\"h3\", null, \"When to use\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use buttons for the most important actions you want users to take on your site, such as \\\"Download,\\\" \\\"Sign up,\\\" or \\\"Apply.\\\"\")), mdx(\"h3\", null, \"When to consider alternatives\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Less popular or less important actions may be visually styled as links.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Buttons are for performing actions, not making choices. If you need your users to make a choice, use something else like radio buttons. Alternatively, if one choice is much less important then try styling it as a link instead.\")), mdx(\"h3\", null, \"Usage\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use the \\\"primary\\\" button variation for the button most users should click. This is your primary call-to-action.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid using too many buttons on a page. Aim to use only one button per page.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid similar styles elsewhere on the page that could be confused for buttons.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use buttons for the primary action and links for secondary actions.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Label text\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use sentence case for button labels.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Button labels should be as short as possible with \\u201Ctrigger words\\u201D that your users will recognize to clearly explain what will happen when the button is clicked (for example, \\u201CSave and continue,\\u201D \\u201CDownload\\u201D or \\u201CSign up\\u201D).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make the first word of the button\\u2019s label a verb. For example, instead of \\u201CComplaint Filing\\u201D, label the button \\u201CFile a complaint.\\u201D\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If a button has an icon, it should still have accompanying text describing the action.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Destructive buttons\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use the \\\"danger\\\" button variation for destructive buttons. For example, buttons that delete or reset a user's information.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Confirm the user meant to trigger a destructive action before following through with the action.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Provide a method for a user to undo a destructive action.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Disabled buttons\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don\\u2019t disable buttons, unless there\\u2019s a good reason to.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you do disable a button, make sure it receives the disabled styling. A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"button\"), \" element will automatically be styled as a disabled button when it has the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"disabled\"), \" HTML attribute, but an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"a\"), \" element will need to have the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".ds-c-button--disabled\"), \" class applied to it.\")), mdx(\"h3\", null, \"Accessibility\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Buttons should display a visible focus state when users tab to them.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a button with a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"button\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"a\"), \" element to retain the native click functionality. Avoid using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<div>\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<img>\"), \" tags to create buttons. Screen readers don't automatically know either is a usable button.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When styling links to look like buttons, remember that screen readers handle links slightly differently than they do buttons. Pressing the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Space\"), \" key triggers a button, but pressing the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Enter\"), \" key triggers a link.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dimmed or unavailable buttons should have the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"disabled\"), \" attribute applied. This removes native click and keypress events from the button. It also prevents automated scanners from logging a low contrast error. Finally, it announces the button as \\\"dimmed\\\" or \\\"disabled\\\" to screen readers, offering users additional context.\")), mdx(\"h2\", null, \"Customization\"), mdx(\"p\", null, \"The following Sass variables can be overridden to customize Button components:\"), mdx(ComponentThemeOptions, {\n    componentname: \"button\",\n    mdxType: \"ComponentThemeOptions\"\n  }), mdx(\"h3\", null, \"Learn more\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.nngroup.com/articles/clickable-elements/\"\n  }, \"Beyond Blue Links: Making Clickable Elements Recognizable\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://www.uxmatters.com/mt/archives/2012/05/7-basic-best-practices-for-buttons.php\"\n  }, \"7 Basic Best Practices for Buttons\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://www.uxbooth.com/articles/the-grammar-of-interactivity/\"\n  }, \"The Grammar of Interactivity\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://paper.dropbox.com/doc/Navigation-buttons-continue-next-previous-ghLqL5a9Ostxxb3rvBhyO\"\n  }, \"GOV.UK navigation buttons discussion\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Button alignment\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://www.slideshare.net/cjforms/buttons-on-forms-and-surveys-a-look-at-some-research-2012\"\n  }, \"Buttons on forms and surveys: a look at some research\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.lukew.com/ff/entry.asp?730=\"\n  }, \"Previous and Next Actions in Web Forms\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ARIA\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_button_role\"\n  }, \"Using the button role\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.deque.com/blog/accessible-aria-buttons\"\n  }, \"Building Accessible Buttons with ARIA\"))), mdx(\"h2\", null, \"Google Analytics\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Analytics event tracking is disabled by default.\")), mdx(\"h3\", null, \"Enable event tracking\"), mdx(\"p\", null, \"Import and set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setButtonSendsAnalytics\"), \" feature flag to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" in your application's entry file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { setButtonSendsAnalytics } from '@cmsgov/<design-system-package>';\\nsetButtonSendsAnalytics(true);\\n\")), mdx(\"p\", null, \"On applications where the page has \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"utag\"), \" loaded, the data goes to Tealium which allows it to route to Google Analytics or the currently approved data analytics tools.\"), mdx(\"h3\", null, \"Disable event tracking\"), mdx(\"p\", null, \"For the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"analytics\"), \" prop, pass the value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" to the component to disable analytics tracking for a singular component instance\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"analytics={false}\\n\")), mdx(\"h3\", null, \"Override event tracking\"), mdx(\"p\", null, \"A custom heading value can be sent for an analytics event by using the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"analyticsLabelOverride\"), \". It is recommended that this value be used to prevent sensitive personal information from being passed to analytics trackers.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#default-button","title":"Default Button"},{"url":"#primary-button","title":"Primary Button"},{"url":"#success-button","title":"Success Button"},{"url":"#transparent-button","title":"Transparent Button"},{"url":"#button-size-variations","title":"Button Size Variations"},{"url":"#inverse-buttons","title":"Inverse Buttons"},{"url":"#danger-button","title":"Danger Button"},{"url":"#button-icons","title":"Button icons"},{"url":"#button-inline-with-field","title":"Button inline with field"},{"url":"#button","title":"<Button>","items":[{"url":"#props","title":"Props"}]},{"url":"#guidance","title":"Guidance","items":[{"url":"#when-to-use","title":"When to use"},{"url":"#when-to-consider-alternatives","title":"When to consider alternatives"},{"url":"#usage","title":"Usage"},{"url":"#accessibility","title":"Accessibility"}]},{"url":"#customization","title":"Customization","items":[{"url":"#learn-more","title":"Learn more"}]},{"url":"#google-analytics","title":"Google Analytics","items":[{"url":"#enable-event-tracking","title":"Enable event tracking"},{"url":"#disable-event-tracking","title":"Disable event tracking"},{"url":"#override-event-tracking","title":"Override event tracking"}]}]}}},"pageContext":{"id":"75eed998-31d7-5272-9826-5e23acd3aae7"}},
    "staticQueryHashes": ["1050346478","2862643552"]}