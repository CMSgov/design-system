@use '../mixins';
@use '../layout' as *;

.ds-c-field {
  appearance: none;
  border: var(--text-input__border-width) solid var(--text-input__border-color);
  border-radius: var(--text-input__border-radius);
  color: var(--text-input__color);
  margin: $spacer-half 0;
  max-width: var(--form__max-width);
  outline: none;
  padding: var(--text-input__padding);
  width: 100%;

  // To stay consistent across browsers of not applying a style for :invalid pseudo-class,
  // disable the red "glow" of [Gecko default](https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid#gecko_defaults)
  &:-moz-ui-invalid {
    box-shadow: none;
  }

  &:disabled {
    background-color: var(--text-input__background-color--disabled);
    border-color: var(--text-input__border-color--disabled);

    @media (-ms-high-contrast: active), (forced-colors: active) {
      cursor: not-allowed;

      > option {
        color: GrayText;
      }
    }
  }

  &:focus {
    @include mixins.focus-styles;
  }
}

.ds-c-field--small {
  max-width: var(--form__max-width--small);
}

.ds-c-field--medium {
  max-width: var(--form__max-width--medium);
}

.ds-c-field,
.ds-c-field-mask {
  line-height: var(--text-input__line-height); // Needed to overwrite user agent heading tag styles
}

/*
Inverse theme
*/

.ds-c-field--inverse {
  border-color: var(--text-input__border-color--inverse);
}

// State modifiers and message
// ==============================
.ds-c-field--error {
  border: var(--text-input__border-width--error) solid var(--text-input__border-color--error);

  &.ds-c-field--inverse {
    border: var(--text-input__border-width--error) solid
      var(--text-input__border-color--error--inverse);
  }
}

.ds-c-field--success {
  border: var(--text-input__border-width--success) solid var(--text-input__border-color--success);
}
